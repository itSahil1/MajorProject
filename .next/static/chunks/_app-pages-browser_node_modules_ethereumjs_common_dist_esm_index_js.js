"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_ethereumjs_common_dist_esm_index_js"],{

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/chains.js":
/*!************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/dist/esm/chains.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chains: function() { return /* binding */ chains; }\n/* harmony export */ });\nconst chains = {\n    mainnet: {\n        name: 'mainnet',\n        chainId: 1,\n        networkId: 1,\n        defaultHardfork: 'shanghai',\n        consensus: {\n            type: 'pow',\n            algorithm: 'ethash',\n            ethash: {},\n        },\n        comment: 'The Ethereum main chain',\n        url: 'https://ethstats.net/',\n        genesis: {\n            gasLimit: 5000,\n            difficulty: 17179869184,\n            nonce: '0x0000000000000042',\n            extraData: '0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa',\n        },\n        depositContractAddress: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n        hardforks: [\n            {\n                name: 'chainstart',\n                block: 0,\n                forkHash: '0xfc64ec04',\n            },\n            {\n                name: 'homestead',\n                block: 1150000,\n                forkHash: '0x97c2c34c',\n            },\n            {\n                name: 'dao',\n                block: 1920000,\n                forkHash: '0x91d1f948',\n            },\n            {\n                name: 'tangerineWhistle',\n                block: 2463000,\n                forkHash: '0x7a64da13',\n            },\n            {\n                name: 'spuriousDragon',\n                block: 2675000,\n                forkHash: '0x3edd5b10',\n            },\n            {\n                name: 'byzantium',\n                block: 4370000,\n                forkHash: '0xa00bc324',\n            },\n            {\n                name: 'constantinople',\n                block: 7280000,\n                forkHash: '0x668db0af',\n            },\n            {\n                name: 'petersburg',\n                block: 7280000,\n                forkHash: '0x668db0af',\n            },\n            {\n                name: 'istanbul',\n                block: 9069000,\n                forkHash: '0x879d6e30',\n            },\n            {\n                name: 'muirGlacier',\n                block: 9200000,\n                forkHash: '0xe029e991',\n            },\n            {\n                name: 'berlin',\n                block: 12244000,\n                forkHash: '0x0eb440f6',\n            },\n            {\n                name: 'london',\n                block: 12965000,\n                forkHash: '0xb715077d',\n            },\n            {\n                name: 'arrowGlacier',\n                block: 13773000,\n                forkHash: '0x20c327fc',\n            },\n            {\n                name: 'grayGlacier',\n                block: 15050000,\n                forkHash: '0xf0afd0e3',\n            },\n            {\n                // The forkHash will remain same as mergeForkIdTransition is post merge\n                // terminal block: https://etherscan.io/block/15537393\n                name: 'paris',\n                ttd: '58750000000000000000000',\n                block: 15537394,\n                forkHash: '0xf0afd0e3',\n            },\n            {\n                name: 'mergeForkIdTransition',\n                block: null,\n                forkHash: null,\n            },\n            {\n                name: 'shanghai',\n                block: null,\n                timestamp: '1681338455',\n                forkHash: '0xdce96c2d',\n            },\n            {\n                name: 'cancun',\n                block: null,\n                timestamp: '1710338135',\n                forkHash: '0x9f3d2254',\n            },\n            {\n                name: 'prague',\n                block: null,\n            },\n        ],\n        bootstrapNodes: [\n            {\n                ip: '18.138.108.67',\n                port: 30303,\n                id: 'd860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666',\n                location: 'ap-southeast-1-001',\n                comment: 'bootnode-aws-ap-southeast-1-001',\n            },\n            {\n                ip: '3.209.45.79',\n                port: 30303,\n                id: '22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de',\n                location: 'us-east-1-001',\n                comment: 'bootnode-aws-us-east-1-001',\n            },\n            {\n                ip: '65.108.70.101',\n                port: 30303,\n                id: '2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc',\n                location: 'eu-west-1-001',\n                comment: 'bootnode-hetzner-hel',\n            },\n            {\n                ip: '157.90.35.166',\n                port: 30303,\n                id: '4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052',\n                location: 'eu-central-1-001',\n                comment: 'bootnode-hetzner-fsn',\n            },\n        ],\n        dnsNetworks: [\n            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net',\n        ],\n    },\n    goerli: {\n        name: 'goerli',\n        chainId: 5,\n        networkId: 5,\n        defaultHardfork: 'shanghai',\n        consensus: {\n            type: 'poa',\n            algorithm: 'clique',\n            clique: {\n                period: 15,\n                epoch: 30000,\n            },\n        },\n        comment: 'Cross-client PoA test network',\n        url: 'https://github.com/goerli/testnet',\n        genesis: {\n            timestamp: '0x5c51a607',\n            gasLimit: 10485760,\n            difficulty: 1,\n            nonce: '0x0000000000000000',\n            extraData: '0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n        },\n        hardforks: [\n            {\n                name: 'chainstart',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'homestead',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'tangerineWhistle',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'spuriousDragon',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'byzantium',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'constantinople',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'petersburg',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'istanbul',\n                block: 1561651,\n                forkHash: '0xc25efa5c',\n            },\n            {\n                name: 'berlin',\n                block: 4460644,\n                forkHash: '0x757a1c47',\n            },\n            {\n                name: 'london',\n                block: 5062605,\n                forkHash: '0xb8c6299d',\n            },\n            {\n                // The forkHash will remain same as mergeForkIdTransition is post merge,\n                // terminal block: https://goerli.etherscan.io/block/7382818\n                name: 'paris',\n                ttd: '10790000',\n                block: 7382819,\n                forkHash: '0xb8c6299d',\n            },\n            {\n                name: 'mergeForkIdTransition',\n                block: null,\n                forkHash: null,\n            },\n            {\n                name: 'shanghai',\n                block: null,\n                timestamp: '1678832736',\n                forkHash: '0xf9843abf',\n            },\n            {\n                name: 'cancun',\n                block: null,\n                timestamp: '1705473120',\n                forkHash: '0x70cc14e2',\n            },\n        ],\n        bootstrapNodes: [\n            {\n                ip: '51.141.78.53',\n                port: 30303,\n                id: '011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a',\n                location: '',\n                comment: 'Upstream bootnode 1',\n            },\n            {\n                ip: '13.93.54.137',\n                port: 30303,\n                id: '176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b',\n                location: '',\n                comment: 'Upstream bootnode 2',\n            },\n            {\n                ip: '94.237.54.114',\n                port: 30313,\n                id: '46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291',\n                location: '',\n                comment: 'Upstream bootnode 3',\n            },\n            {\n                ip: '18.218.250.66',\n                port: 30313,\n                id: 'b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949',\n                location: '',\n                comment: 'Upstream bootnode 4',\n            },\n            {\n                ip: '3.11.147.67',\n                port: 30303,\n                id: 'a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91',\n                location: '',\n                comment: 'Ethereum Foundation bootnode',\n            },\n            {\n                ip: '51.15.116.226',\n                port: 30303,\n                id: 'a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd',\n                location: '',\n                comment: 'Goerli Initiative bootnode',\n            },\n            {\n                ip: '51.15.119.157',\n                port: 30303,\n                id: '807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33',\n                location: '',\n                comment: 'Goerli Initiative bootnode',\n            },\n            {\n                ip: '51.15.119.157',\n                port: 40303,\n                id: 'a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd',\n                location: '',\n                comment: 'Goerli Initiative bootnode',\n            },\n        ],\n        dnsNetworks: [\n            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net',\n        ],\n    },\n    sepolia: {\n        name: 'sepolia',\n        chainId: 11155111,\n        networkId: 11155111,\n        defaultHardfork: 'shanghai',\n        consensus: {\n            type: 'pow',\n            algorithm: 'ethash',\n            ethash: {},\n        },\n        comment: 'PoW test network to replace Ropsten',\n        url: 'https://github.com/ethereum/go-ethereum/pull/23730',\n        genesis: {\n            timestamp: '0x6159af19',\n            gasLimit: 30000000,\n            difficulty: 131072,\n            nonce: '0x0000000000000000',\n            extraData: '0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521',\n        },\n        hardforks: [\n            {\n                name: 'chainstart',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'homestead',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'tangerineWhistle',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'spuriousDragon',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'byzantium',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'constantinople',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'petersburg',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'istanbul',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'muirGlacier',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'berlin',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'london',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                // The forkHash will remain same as mergeForkIdTransition is post merge,\n                // terminal block: https://sepolia.etherscan.io/block/1450408\n                name: 'paris',\n                ttd: '17000000000000000',\n                block: 1450409,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'mergeForkIdTransition',\n                block: 1735371,\n                forkHash: '0xb96cbd13',\n            },\n            {\n                name: 'shanghai',\n                block: null,\n                timestamp: '1677557088',\n                forkHash: '0xf7f9bc08',\n            },\n            {\n                name: 'cancun',\n                block: null,\n                timestamp: '1706655072',\n                forkHash: '0x88cf81d9',\n            },\n        ],\n        bootstrapNodes: [\n            {\n                ip: '18.168.182.86',\n                port: 30303,\n                id: '9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066',\n                location: '',\n                comment: 'geth',\n            },\n            {\n                ip: '52.14.151.177',\n                port: 30303,\n                id: 'ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7',\n                location: '',\n                comment: 'besu',\n            },\n            {\n                ip: '165.22.196.173',\n                port: 30303,\n                id: 'ce970ad2e9daa9e14593de84a8b49da3d54ccfdf83cbc4fe519cb8b36b5918ed4eab087dedd4a62479b8d50756b492d5f762367c8d20329a7854ec01547568a6',\n                location: '',\n                comment: 'EF',\n            },\n            {\n                ip: '65.108.95.67',\n                port: 30303,\n                id: '075503b13ed736244896efcde2a992ec0b451357d46cb7a8132c0384721742597fc8f0d91bbb40bb52e7d6e66728d36a1fda09176294e4a30cfac55dcce26bc6',\n                location: '',\n                comment: 'lodestar',\n            },\n        ],\n        dnsNetworks: [\n            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net',\n        ],\n    },\n    holesky: {\n        name: 'holesky',\n        chainId: 17000,\n        networkId: 17000,\n        defaultHardfork: 'paris',\n        consensus: {\n            type: 'pos',\n            algorithm: 'casper',\n        },\n        comment: 'PoS test network to replace Goerli',\n        url: 'https://github.com/eth-clients/holesky/',\n        genesis: {\n            baseFeePerGas: '0x3B9ACA00',\n            difficulty: '0x01',\n            extraData: '0x',\n            gasLimit: '0x17D7840',\n            nonce: '0x0000000000001234',\n            timestamp: '0x65156994',\n        },\n        hardforks: [\n            {\n                name: 'chainstart',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'homestead',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'tangerineWhistle',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'spuriousDragon',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'byzantium',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'constantinople',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'petersburg',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'istanbul',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'muirGlacier',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'berlin',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'london',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'paris',\n                ttd: '0',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'mergeForkIdTransition',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'shanghai',\n                block: null,\n                timestamp: '1696000704',\n                forkHash: '0xfd4f016b',\n            },\n            {\n                name: 'cancun',\n                block: null,\n                timestamp: '1707305664',\n                forkHash: '0x9b192ad0',\n            },\n        ],\n        bootstrapNodes: [\n            {\n                ip: '146.190.13.128',\n                port: 30303,\n                id: 'ac906289e4b7f12df423d654c5a962b6ebe5b3a74cc9e06292a85221f9a64a6f1cfdd6b714ed6dacef51578f92b34c60ee91e9ede9c7f8fadc4d347326d95e2b',\n                location: '',\n                comment: 'bootnode 1',\n            },\n            {\n                ip: '178.128.136.233',\n                port: 30303,\n                id: 'a3435a0155a3e837c02f5e7f5662a2f1fbc25b48e4dc232016e1c51b544cb5b4510ef633ea3278c0e970fa8ad8141e2d4d0f9f95456c537ff05fdf9b31c15072',\n                location: '',\n                comment: 'bootnode 2',\n            },\n        ],\n        dnsNetworks: [\n            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.holesky.ethdisco.net',\n        ],\n    },\n    kaustinen6: {\n        name: 'kaustinen6',\n        chainId: 69420,\n        networkId: 69420,\n        defaultHardfork: 'osaka',\n        consensus: {\n            type: 'pos',\n            algorithm: 'casper',\n        },\n        comment: 'Verkle kaustinen testnet 6 (likely temporary, do not hard-wire into production code)',\n        url: 'https://github.com/eth-clients/kaustinen/',\n        genesis: {\n            difficulty: '0x01',\n            extraData: '0x',\n            gasLimit: '0x17D7840',\n            nonce: '0x0000000000001234',\n            timestamp: '0x66190fbc',\n        },\n        hardforks: [\n            {\n                name: 'chainstart',\n                block: 0,\n            },\n            {\n                name: 'homestead',\n                block: 0,\n            },\n            {\n                name: 'tangerineWhistle',\n                block: 0,\n            },\n            {\n                name: 'spuriousDragon',\n                block: 0,\n            },\n            {\n                name: 'byzantium',\n                block: 0,\n            },\n            {\n                name: 'constantinople',\n                block: 0,\n            },\n            {\n                name: 'petersburg',\n                block: 0,\n            },\n            {\n                name: 'istanbul',\n                block: 0,\n            },\n            {\n                name: 'berlin',\n                block: 0,\n            },\n            {\n                name: 'london',\n                block: 0,\n            },\n            {\n                name: 'paris',\n                ttd: '0',\n                block: 0,\n            },\n            {\n                name: 'mergeForkIdTransition',\n                block: 0,\n            },\n            {\n                name: 'shanghai',\n                block: null,\n                timestamp: '0',\n            },\n            {\n                name: 'osaka',\n                block: null,\n                timestamp: '1712848500',\n            },\n        ],\n        bootstrapNodes: [],\n        dnsNetworks: [],\n    },\n};\n//# sourceMappingURL=chains.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/chains.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/common.js":
/*!************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/dist/esm/common.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Common: function() { return /* binding */ Common; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var _chains_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chains.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/chains.js\");\n/* harmony import */ var _crc_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./crc.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/crc.js\");\n/* harmony import */ var _eips_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./eips.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/eips.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./enums.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/enums.js\");\n/* harmony import */ var _hardforks_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hardforks.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/hardforks.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/utils.js\");\n\n\n\n\n\n\n\n\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nclass Common {\n    constructor(opts) {\n        this._eips = [];\n        this._paramsCache = {};\n        this._activatedEIPsCache = [];\n        this.events = new events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();\n        this._customChains = opts.customChains ?? [];\n        this._chainParams = this.setChain(opts.chain);\n        this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Shanghai;\n        // Assign hardfork changes in the sequence of the applied hardforks\n        this.HARDFORK_CHANGES = this.hardforks().map((hf) => [\n            hf.name,\n            _hardforks_js__WEBPACK_IMPORTED_MODULE_6__.hardforks[hf.name] ??\n                (this._chainParams.customHardforks && this._chainParams.customHardforks[hf.name]),\n        ]);\n        this._hardfork = this.DEFAULT_HARDFORK;\n        if (opts.hardfork !== undefined) {\n            this.setHardfork(opts.hardfork);\n        }\n        if (opts.eips) {\n            this.setEIPs(opts.eips);\n        }\n        this.customCrypto = opts.customCrypto ?? {};\n        if (Object.keys(this._paramsCache).length === 0) {\n            this._buildParamsCache();\n            this._buildActivatedEIPsCache();\n        }\n    }\n    /**\n     * Creates a {@link Common} object for a custom chain, based on a standard one.\n     *\n     * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n     * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n     *\n     * ```javascript\n     * Common.custom({chainId: 123})\n     * ```\n     *\n     * There are also selected supported custom chains which can be initialized by using one of the\n     * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n     *\n     * ```javascript\n     * Common.custom(CustomChains.MaticMumbai)\n     * ```\n     *\n     * Note that these supported custom chains only provide some base parameters (usually the chain and\n     * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n     * the `@ethereumjs/tx` library to a Layer-2 chain).\n     *\n     * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n     * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n     */\n    static custom(chainParamsOrName, opts = {}) {\n        const baseChain = opts.baseChain ?? 'mainnet';\n        const standardChainParams = { ...Common._getChainParams(baseChain) };\n        standardChainParams['name'] = 'custom-chain';\n        if (typeof chainParamsOrName !== 'string') {\n            return new Common({\n                chain: {\n                    ...standardChainParams,\n                    ...chainParamsOrName,\n                },\n                ...opts,\n            });\n        }\n        else {\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.PolygonMainnet) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.PolygonMainnet,\n                    chainId: 137,\n                    networkId: 137,\n                }, opts);\n            }\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.PolygonMumbai) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.PolygonMumbai,\n                    chainId: 80001,\n                    networkId: 80001,\n                }, opts);\n            }\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.ArbitrumOne) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.ArbitrumOne,\n                    chainId: 42161,\n                    networkId: 42161,\n                }, opts);\n            }\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.xDaiChain) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.xDaiChain,\n                    chainId: 100,\n                    networkId: 100,\n                }, opts);\n            }\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.OptimisticKovan) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.OptimisticKovan,\n                    chainId: 69,\n                    networkId: 69,\n                }, opts);\n            }\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.OptimisticEthereum) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.OptimisticEthereum,\n                    chainId: 10,\n                    networkId: 10,\n                }, \n                // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n                { hardfork: _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Berlin, ...opts });\n            }\n            throw new Error(`Custom chain ${chainParamsOrName} not supported`);\n        }\n    }\n    /**\n     * Static method to load and set common from a geth genesis json\n     * @param genesisJson json of geth configuration\n     * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n     * @returns Common\n     */\n    static fromGethGenesis(genesisJson, { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge, customCrypto }) {\n        const genesisParams = (0,_utils_js__WEBPACK_IMPORTED_MODULE_7__.parseGethGenesis)(genesisJson, chain, mergeForkIdPostMerge);\n        const common = new Common({\n            chain: genesisParams.name ?? 'custom',\n            customChains: [genesisParams],\n            eips,\n            hardfork: hardfork ?? genesisParams.hardfork,\n            customCrypto,\n        });\n        if (genesisHash !== undefined) {\n            common.setForkHashes(genesisHash);\n        }\n        return common;\n    }\n    /**\n     * Static method to determine if a {@link chainId} is supported as a standard chain\n     * @param chainId bigint id (`1`) of a standard chain\n     * @returns boolean\n     */\n    static isSupportedChainId(chainId) {\n        const initializedChains = this.getInitializedChains();\n        return Boolean(initializedChains['names'][chainId.toString()]);\n    }\n    static _getChainParams(chain, customChains) {\n        const initializedChains = this.getInitializedChains(customChains);\n        if (typeof chain === 'number' || typeof chain === 'bigint') {\n            chain = chain.toString();\n            if (initializedChains['names'][chain]) {\n                const name = initializedChains['names'][chain];\n                return initializedChains[name];\n            }\n            throw new Error(`Chain with ID ${chain} not supported`);\n        }\n        if (initializedChains[chain] !== undefined) {\n            return initializedChains[chain];\n        }\n        throw new Error(`Chain with name ${chain} not supported`);\n    }\n    /**\n     * Sets the chain\n     * @param chain String ('mainnet') or Number (1) chain representation.\n     *              Or, a Dictionary of chain parameters for a private network.\n     * @returns The dictionary with parameters set as chain\n     */\n    setChain(chain) {\n        if (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {\n            this._chainParams = Common._getChainParams(chain, this._customChains);\n        }\n        else if (typeof chain === 'object') {\n            if (this._customChains.length > 0) {\n                throw new Error('Chain must be a string, number, or bigint when initialized with customChains passed in');\n            }\n            const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n            for (const param of required) {\n                if (!(param in chain)) {\n                    throw new Error(`Missing required chain parameter: ${param}`);\n                }\n            }\n            this._chainParams = chain;\n        }\n        else {\n            throw new Error('Wrong input format');\n        }\n        for (const hf of this.hardforks()) {\n            if (hf.block === undefined) {\n                throw new Error(`Hardfork cannot have undefined block number`);\n            }\n        }\n        return this._chainParams;\n    }\n    /**\n     * Sets the hardfork to get params for\n     * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n     */\n    setHardfork(hardfork) {\n        let existing = false;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if (hfChanges[0] === hardfork) {\n                if (this._hardfork !== hardfork) {\n                    this._hardfork = hardfork;\n                    this._buildParamsCache();\n                    this._buildActivatedEIPsCache();\n                    this.events.emit('hardforkChanged', hardfork);\n                }\n                existing = true;\n            }\n        }\n        if (!existing) {\n            throw new Error(`Hardfork with name ${hardfork} not supported`);\n        }\n    }\n    /**\n     * Returns the hardfork either based on block numer (older HFs) or\n     * timestamp (Shanghai upwards).\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param Opts Block number, timestamp or TD (all optional)\n     * @returns The name of the HF\n     */\n    getHardforkBy(opts) {\n        const blockNumber = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(opts.blockNumber, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n        const td = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(opts.td, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n        const timestamp = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(opts.timestamp, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n        // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n        const hfs = this.hardforks().filter((hf) => hf.block !== null || (hf.ttd !== null && hf.ttd !== undefined) || hf.timestamp !== undefined);\n        const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);\n        const doubleTTDHF = hfs\n            .slice(mergeIndex + 1)\n            .findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);\n        if (doubleTTDHF >= 0) {\n            throw Error(`More than one merge hardforks found with ttd specified`);\n        }\n        // Find the first hardfork that has a block number greater than `blockNumber`\n        // (skips the merge hardfork since it cannot have a block number specified).\n        // If timestamp is not provided, it also skips timestamps hardforks to continue\n        // discovering/checking number hardforks.\n        let hfIndex = hfs.findIndex((hf) => (blockNumber !== undefined && hf.block !== null && BigInt(hf.block) > blockNumber) ||\n            (timestamp !== undefined && hf.timestamp !== undefined && BigInt(hf.timestamp) > timestamp));\n        if (hfIndex === -1) {\n            // all hardforks apply, set hfIndex to the last one as that's the candidate\n            hfIndex = hfs.length;\n        }\n        else if (hfIndex === 0) {\n            // cannot have a case where a block number is before all applied hardforks\n            // since the chain has to start with a hardfork\n            throw Error('Must have at least one hardfork at block 0');\n        }\n        // If timestamp is not provided, we need to rollback to the last hf with block or ttd\n        if (timestamp === undefined) {\n            const stepBack = hfs\n                .slice(0, hfIndex)\n                .reverse()\n                .findIndex((hf) => hf.block !== null || hf.ttd !== undefined);\n            hfIndex = hfIndex - stepBack;\n        }\n        // Move hfIndex one back to arrive at candidate hardfork\n        hfIndex = hfIndex - 1;\n        // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n        // hardforks. so it will now be needed to rollback\n        if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n            // We're on the merge hardfork.  Let's check the TTD\n            if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd) > td) {\n                // Merge ttd greater than current td so we're on hardfork before merge\n                hfIndex -= 1;\n            }\n        }\n        else {\n            if (mergeIndex >= 0 && td !== undefined && td !== null) {\n                if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) {\n                    throw Error('Maximum HF determined by total difficulty is lower than the block number HF');\n                }\n                else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) < td) {\n                    throw Error('HF determined by block number is lower than the minimum total difficulty HF');\n                }\n            }\n        }\n        const hfStartIndex = hfIndex;\n        // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n        // This won't anyway be the case with Merge hfs\n        for (; hfIndex < hfs.length - 1; hfIndex++) {\n            // break out if hfIndex + 1 is not scheduled at hfIndex\n            if (hfs[hfIndex].block !== hfs[hfIndex + 1].block ||\n                hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {\n                break;\n            }\n        }\n        if (timestamp !== undefined) {\n            const minTimeStamp = hfs\n                .slice(0, hfStartIndex)\n                .reduce((acc, hf) => Math.max(Number(hf.timestamp ?? '0'), acc), 0);\n            if (minTimeStamp > timestamp) {\n                throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);\n            }\n            const maxTimeStamp = hfs\n                .slice(hfIndex + 1)\n                .reduce((acc, hf) => Math.min(Number(hf.timestamp ?? timestamp), acc), Number(timestamp));\n            if (maxTimeStamp < timestamp) {\n                throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);\n            }\n        }\n        const hardfork = hfs[hfIndex];\n        return hardfork.name;\n    }\n    /**\n     * Sets a new hardfork either based on block numer (older HFs) or\n     * timestamp (Shanghai upwards).\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param Opts Block number, timestamp or TD (all optional)\n     * @returns The name of the HF set\n     */\n    setHardforkBy(opts) {\n        const hardfork = this.getHardforkBy(opts);\n        this.setHardfork(hardfork);\n        return hardfork;\n    }\n    /**\n     * Internal helper function, returns the params for the given hardfork for the chain set\n     * @param hardfork Hardfork name\n     * @returns Dictionary with hardfork params or null if hardfork not on chain\n     */\n    _getHardfork(hardfork) {\n        const hfs = this.hardforks();\n        for (const hf of hfs) {\n            if (hf['name'] === hardfork)\n                return hf;\n        }\n        return null;\n    }\n    /**\n     * Sets the active EIPs\n     * @param eips\n     */\n    setEIPs(eips = []) {\n        for (const eip of eips) {\n            if (!(eip in _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs)) {\n                throw new Error(`${eip} not supported`);\n            }\n            const minHF = this.gteHardfork(_eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip]['minimumHardfork']);\n            if (!minHF) {\n                throw new Error(`${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);\n            }\n        }\n        this._eips = eips;\n        this._buildParamsCache();\n        this._buildActivatedEIPsCache();\n        for (const eip of eips) {\n            if (_eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip].requiredEIPs !== undefined) {\n                for (const elem of _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip].requiredEIPs) {\n                    if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n                        throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Internal helper for _buildParamsCache()\n     */\n    _mergeWithParamsCache(params) {\n        this._paramsCache['gasConfig'] = {\n            ...this._paramsCache['gasConfig'],\n            ...params['gasConfig'],\n        };\n        this._paramsCache['gasPrices'] = {\n            ...this._paramsCache['gasPrices'],\n            ...params['gasPrices'],\n        };\n        this._paramsCache['pow'] = {\n            ...this._paramsCache['pow'],\n            ...params['pow'],\n        };\n        this._paramsCache['sharding'] = {\n            ...this._paramsCache['sharding'],\n            ...params['sharding'],\n        };\n        this._paramsCache['vm'] = {\n            ...this._paramsCache['vm'],\n            ...params['vm'],\n        };\n    }\n    /**\n     * Build up a cache for all parameter values for the current HF and all activated EIPs\n     */\n    _buildParamsCache() {\n        this._paramsCache = {};\n        // Iterate through all hardforks up to hardfork set\n        const hardfork = this.hardfork();\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            // EIP-referencing HF config (e.g. for berlin)\n            if ('eips' in hfChanges[1]) {\n                const hfEIPs = hfChanges[1]['eips'];\n                for (const eip of hfEIPs) {\n                    if (!(eip in _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs)) {\n                        throw new Error(`${eip} not supported`);\n                    }\n                    this._mergeWithParamsCache(_eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip]);\n                }\n                // Parameter-inlining HF config (e.g. for istanbul)\n            }\n            else {\n                this._mergeWithParamsCache(hfChanges[1]);\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        // Iterate through all additionally activated EIPs\n        for (const eip of this._eips) {\n            if (!(eip in _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs)) {\n                throw new Error(`${eip} not supported`);\n            }\n            this._mergeWithParamsCache(_eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip]);\n        }\n    }\n    _buildActivatedEIPsCache() {\n        this._activatedEIPsCache = [];\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            const hf = hfChanges[1];\n            if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n                this._activatedEIPsCache = this._activatedEIPsCache.concat(hf['eips']);\n            }\n        }\n        this._activatedEIPsCache = this._activatedEIPsCache.concat(this._eips);\n    }\n    /**\n     * Returns a parameter for the current chain setup\n     *\n     * If the parameter is present in an EIP, the EIP always takes precedence.\n     * Otherwise the parameter is taken from the latest applied HF with\n     * a change on the respective parameter.\n     *\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @returns The value requested or `BigInt(0)` if not found\n     */\n    param(topic, name) {\n        // TODO: consider the case that different active EIPs\n        // can change the same parameter\n        let value = null;\n        if (this._paramsCache[topic] !== undefined &&\n            this._paramsCache[topic][name] !== undefined) {\n            value = this._paramsCache[topic][name].v;\n        }\n        return BigInt(value ?? 0);\n    }\n    /**\n     * Returns the parameter corresponding to a hardfork\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param hardfork Hardfork name\n     * @returns The value requested or `BigInt(0)` if not found\n     */\n    paramByHardfork(topic, name, hardfork) {\n        let value = null;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            // EIP-referencing HF config (e.g. for berlin)\n            if ('eips' in hfChanges[1]) {\n                const hfEIPs = hfChanges[1]['eips'];\n                for (const eip of hfEIPs) {\n                    const valueEIP = this.paramByEIP(topic, name, eip);\n                    value = typeof valueEIP === 'bigint' ? valueEIP : value;\n                }\n                // Parameter-inlining HF config (e.g. for istanbul)\n            }\n            else {\n                if (hfChanges[1][topic] !== undefined &&\n                    hfChanges[1][topic][name] !== undefined) {\n                    value = hfChanges[1][topic][name].v;\n                }\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return BigInt(value ?? 0);\n    }\n    /**\n     * Returns a parameter corresponding to an EIP\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param eip Number of the EIP\n     * @returns The value requested or `undefined` if not found\n     */\n    paramByEIP(topic, name, eip) {\n        if (!(eip in _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs)) {\n            throw new Error(`${eip} not supported`);\n        }\n        const eipParams = _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip];\n        if (!(topic in eipParams)) {\n            return undefined;\n        }\n        if (eipParams[topic][name] === undefined) {\n            return undefined;\n        }\n        const value = eipParams[topic][name].v;\n        return BigInt(value);\n    }\n    /**\n     * Returns a parameter for the hardfork active on block number or\n     * optional provided total difficulty (Merge HF)\n     * @param topic Parameter topic\n     * @param name Parameter name\n     * @param blockNumber Block number\n     * @param td Total difficulty\n     *    * @returns The value requested or `BigInt(0)` if not found\n     */\n    paramByBlock(topic, name, blockNumber, td, timestamp) {\n        const hardfork = this.getHardforkBy({ blockNumber, td, timestamp });\n        return this.paramByHardfork(topic, name, hardfork);\n    }\n    /**\n     * Checks if an EIP is activated by either being included in the EIPs\n     * manually passed in with the {@link CommonOpts.eips} or in a\n     * hardfork currently being active\n     *\n     * Note: this method only works for EIPs being supported\n     * by the {@link CommonOpts.eips} constructor option\n     * @param eip\n     */\n    isActivatedEIP(eip) {\n        if (this._activatedEIPsCache.includes(eip)) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Checks if set or provided hardfork is active on block number\n     * @param hardfork Hardfork name or null (for HF set)\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */\n    hardforkIsActiveOnBlock(hardfork, blockNumber) {\n        blockNumber = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(blockNumber, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n        hardfork = hardfork ?? this._hardfork;\n        const hfBlock = this.hardforkBlock(hardfork);\n        if (typeof hfBlock === 'bigint' && hfBlock !== _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0 && blockNumber >= hfBlock) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */\n    activeOnBlock(blockNumber) {\n        return this.hardforkIsActiveOnBlock(null, blockNumber);\n    }\n    /**\n     * Sequence based check if given or set HF1 is greater than or equal HF2\n     * @param hardfork1 Hardfork name or null (if set)\n     * @param hardfork2 Hardfork name\n     * @param opts Hardfork options\n     * @returns True if HF1 gte HF2\n     */\n    hardforkGteHardfork(hardfork1, hardfork2) {\n        hardfork1 = hardfork1 ?? this._hardfork;\n        const hardforks = this.hardforks();\n        let posHf1 = -1, posHf2 = -1;\n        let index = 0;\n        for (const hf of hardforks) {\n            if (hf['name'] === hardfork1)\n                posHf1 = index;\n            if (hf['name'] === hardfork2)\n                posHf2 = index;\n            index += 1;\n        }\n        return posHf1 >= posHf2 && posHf2 !== -1;\n    }\n    /**\n     * Alias to hardforkGteHardfork when hardfork is set\n     * @param hardfork Hardfork name\n     * @returns True if hardfork set is greater than hardfork provided\n     */\n    gteHardfork(hardfork) {\n        return this.hardforkGteHardfork(null, hardfork);\n    }\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if unscheduled\n     */\n    hardforkBlock(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const block = this._getHardfork(hardfork)?.['block'];\n        if (block === undefined || block === null) {\n            return null;\n        }\n        return BigInt(block);\n    }\n    hardforkTimestamp(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const timestamp = this._getHardfork(hardfork)?.['timestamp'];\n        if (timestamp === undefined || timestamp === null) {\n            return null;\n        }\n        return BigInt(timestamp);\n    }\n    /**\n     * Returns the hardfork change block for eip\n     * @param eip EIP number\n     * @returns Block number or null if unscheduled\n     */\n    eipBlock(eip) {\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            const hf = hfChanges[1];\n            if ('eips' in hf) {\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                if (hf['eips'].includes(eip)) {\n                    return this.hardforkBlock(hfChanges[0]);\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the scheduled timestamp of the EIP (if scheduled and scheduled by timestamp)\n     * @param eip EIP number\n     * @returns Scheduled timestamp. If this EIP is unscheduled, or the EIP is scheduled by block number or ttd, then it returns `null`.\n     */\n    eipTimestamp(eip) {\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            const hf = hfChanges[1];\n            if ('eips' in hf) {\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                if (hf['eips'].includes(eip)) {\n                    return this.hardforkTimestamp(hfChanges[0]);\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Total difficulty or null if no set\n     */\n    hardforkTTD(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const ttd = this._getHardfork(hardfork)?.['ttd'];\n        if (ttd === undefined || ttd === null) {\n            return null;\n        }\n        return BigInt(ttd);\n    }\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block timestamp, number or null if not available\n     */\n    nextHardforkBlockOrTimestamp(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const hfs = this.hardforks();\n        let hfIndex = hfs.findIndex((hf) => hf.name === hardfork);\n        // If the current hardfork is merge, go one behind as merge hf is not part of these\n        // calcs even if the merge hf block is set\n        if (hardfork === _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Paris) {\n            hfIndex -= 1;\n        }\n        // Hardfork not found\n        if (hfIndex < 0) {\n            return null;\n        }\n        let currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block;\n        currHfTimeOrBlock =\n            currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined\n                ? Number(currHfTimeOrBlock)\n                : null;\n        const nextHf = hfs.slice(hfIndex + 1).find((hf) => {\n            let hfTimeOrBlock = hf.timestamp ?? hf.block;\n            hfTimeOrBlock =\n                hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) : null;\n            return (hf.name !== _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Paris &&\n                hfTimeOrBlock !== null &&\n                hfTimeOrBlock !== undefined &&\n                hfTimeOrBlock !== currHfTimeOrBlock);\n        });\n        // If no next hf found with valid block or timestamp return null\n        if (nextHf === undefined) {\n            return null;\n        }\n        const nextHfBlock = nextHf.timestamp ?? nextHf.block;\n        if (nextHfBlock === null || nextHfBlock === undefined) {\n            return null;\n        }\n        return BigInt(nextHfBlock);\n    }\n    /**\n     * Internal helper function to calculate a fork hash\n     * @param hardfork Hardfork name\n     * @param genesisHash Genesis block hash of the chain\n     * @returns Fork hash as hex string\n     */\n    _calcForkHash(hardfork, genesisHash) {\n        let hfBytes = new Uint8Array(0);\n        let prevBlockOrTime = 0;\n        for (const hf of this.hardforks()) {\n            const { block, timestamp, name } = hf;\n            // Timestamp to be used for timestamp based hfs even if we may bundle\n            // block number with them retrospectively\n            let blockOrTime = timestamp ?? block;\n            blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;\n            // Skip for chainstart (0), not applied HFs (null) and\n            // when already applied on same blockOrTime HFs\n            // and on the merge since forkhash doesn't change on merge hf\n            if (typeof blockOrTime === 'number' &&\n                blockOrTime !== 0 &&\n                blockOrTime !== prevBlockOrTime &&\n                name !== _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Paris) {\n                const hfBlockBytes = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(`0x${blockOrTime.toString(16).padStart(16, '0')}`);\n                hfBytes = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(hfBytes, hfBlockBytes);\n                prevBlockOrTime = blockOrTime;\n            }\n            if (hf.name === hardfork)\n                break;\n        }\n        const inputBytes = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(genesisHash, hfBytes);\n        // CRC32 delivers result as signed (negative) 32-bit integer,\n        // convert to hex string\n        const forkhash = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.intToBytes)((0,_crc_js__WEBPACK_IMPORTED_MODULE_3__.crc32)(inputBytes) >>> 0));\n        return forkhash;\n    }\n    /**\n     * Returns an eth/64 compliant fork hash (EIP-2124)\n     * @param hardfork Hardfork name, optional if HF set\n     * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n     */\n    forkHash(hardfork, genesisHash) {\n        hardfork = hardfork ?? this._hardfork;\n        const data = this._getHardfork(hardfork);\n        if (data === null ||\n            (data?.block === null && data?.timestamp === undefined && data?.ttd === undefined)) {\n            const msg = 'No fork hash calculation possible for future hardfork';\n            throw new Error(msg);\n        }\n        if (data?.forkHash !== null && data?.forkHash !== undefined) {\n            return data.forkHash;\n        }\n        if (!genesisHash)\n            throw new Error('genesisHash required for forkHash calculation');\n        return this._calcForkHash(hardfork, genesisHash);\n    }\n    /**\n     *\n     * @param forkHash Fork hash as a hex string\n     * @returns Array with hardfork data (name, block, forkHash)\n     */\n    hardforkForForkHash(forkHash) {\n        const resArray = this.hardforks().filter((hf) => {\n            return hf.forkHash === forkHash;\n        });\n        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n    }\n    /**\n     * Sets any missing forkHashes on the passed-in {@link Common} instance\n     * @param common The {@link Common} to set the forkHashes for\n     * @param genesisHash The genesis block hash\n     */\n    setForkHashes(genesisHash) {\n        for (const hf of this.hardforks()) {\n            const blockOrTime = hf.timestamp ?? hf.block;\n            if ((hf.forkHash === null || hf.forkHash === undefined) &&\n                ((blockOrTime !== null && blockOrTime !== undefined) || typeof hf.ttd !== 'undefined')) {\n                hf.forkHash = this.forkHash(hf.name, genesisHash);\n            }\n        }\n    }\n    /**\n     * Returns the Genesis parameters of the current chain\n     * @returns Genesis dictionary\n     */\n    genesis() {\n        return this._chainParams.genesis;\n    }\n    /**\n     * Returns the hardforks for current chain\n     * @returns {Array} Array with arrays of hardforks\n     */\n    hardforks() {\n        const hfs = this._chainParams.hardforks;\n        if (this._chainParams.customHardforks !== undefined) {\n            this._chainParams.customHardforks;\n        }\n        return hfs;\n    }\n    /**\n     * Returns bootstrap nodes for the current chain\n     * @returns {Dictionary} Dict with bootstrap nodes\n     */\n    bootstrapNodes() {\n        return this._chainParams.bootstrapNodes;\n    }\n    /**\n     * Returns DNS networks for the current chain\n     * @returns {String[]} Array of DNS ENR urls\n     */\n    dnsNetworks() {\n        return this._chainParams.dnsNetworks;\n    }\n    /**\n     * Returns the hardfork set\n     * @returns Hardfork name\n     */\n    hardfork() {\n        return this._hardfork;\n    }\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     */\n    chainId() {\n        return BigInt(this._chainParams.chainId);\n    }\n    /**\n     * Returns the name of current chain\n     * @returns chain name (lower case)\n     */\n    chainName() {\n        return this._chainParams.name;\n    }\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     */\n    networkId() {\n        return BigInt(this._chainParams.networkId);\n    }\n    /**\n     * Returns the additionally activated EIPs\n     * (by using the `eips` constructor option)\n     * @returns List of EIPs\n     */\n    eips() {\n        return this._eips;\n    }\n    /**\n     * Returns the consensus type of the network\n     * Possible values: \"pow\"|\"poa\"|\"pos\"\n     *\n     * Note: This value can update along a Hardfork.\n     */\n    consensusType() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if ('consensus' in hfChanges[1]) {\n                value = hfChanges[1]['consensus']['type'];\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return value ?? this._chainParams['consensus']['type'];\n    }\n    /**\n     * Returns the concrete consensus implementation\n     * algorithm or protocol for the network\n     * e.g. \"ethash\" for \"pow\" consensus type,\n     * \"clique\" for \"poa\" consensus type or\n     * \"casper\" for \"pos\" consensus type.\n     *\n     * Note: This value can update along a Hardfork.\n     */\n    consensusAlgorithm() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if ('consensus' in hfChanges[1]) {\n                value = hfChanges[1]['consensus']['algorithm'];\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return value ?? this._chainParams['consensus']['algorithm'];\n    }\n    /**\n     * Returns a dictionary with consensus configuration\n     * parameters based on the consensus algorithm\n     *\n     * Expected returns (parameters must be present in\n     * the respective chain json files):\n     *\n     * ethash: empty object\n     * clique: period, epoch\n     * casper: empty object\n     *\n     * Note: This value can update along a Hardfork.\n     */\n    consensusConfig() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if ('consensus' in hfChanges[1]) {\n                // The config parameter is named after the respective consensus algorithm\n                const config = hfChanges[1];\n                const algorithm = config['consensus']['algorithm'];\n                value = config['consensus'][algorithm];\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return (value ?? this._chainParams['consensus'][this.consensusAlgorithm()] ?? {});\n    }\n    /**\n     * Returns a deep copy of this {@link Common} instance.\n     */\n    copy() {\n        const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n        copy.events = new events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();\n        return copy;\n    }\n    static getInitializedChains(customChains) {\n        const names = {};\n        for (const [name, id] of Object.entries(_enums_js__WEBPACK_IMPORTED_MODULE_5__.Chain)) {\n            names[id] = name.toLowerCase();\n        }\n        const chains = { ..._chains_js__WEBPACK_IMPORTED_MODULE_2__.chains };\n        if (customChains) {\n            for (const chain of customChains) {\n                const { name } = chain;\n                names[chain.chainId.toString()] = name;\n                chains[name] = chain;\n            }\n        }\n        chains.names = names;\n        return chains;\n    }\n}\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vY29tbW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFrSDtBQUM1RTtBQUNjO0FBQ25CO0FBQ0E7QUFDeUI7QUFDRztBQUNmO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxQkFBcUI7QUFDakMsaUJBQWlCLGNBQWM7QUFDL0Isb0RBQW9ELCtCQUErQjtBQUNuRjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsZ0RBQVk7QUFDdEM7QUFDQTtBQUNBLHFFQUFxRSwrQ0FBUTtBQUM3RTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9EQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGNBQWM7QUFDaEM7QUFDQSx3QkFBd0IsYUFBYSxxQkFBcUIsaUJBQWlCO0FBQzNFLHNCQUFzQix5QkFBeUI7QUFDL0M7QUFDQTtBQUNBLHNCQUFzQixhQUFhO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLFFBQVEsb0JBQW9CLEtBQUssd0JBQXdCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGlDQUFpQyxZQUFZLGlDQUFpQztBQUNsSTtBQUNBLDhDQUE4QztBQUM5QztBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLHNDQUFzQyxrREFBVztBQUNqRDtBQUNBLDBCQUEwQixrREFBVztBQUNyQztBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0Esc0NBQXNDLGtEQUFXO0FBQ2pEO0FBQ0EsMEJBQTBCLGtEQUFXO0FBQ3JDO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxzQ0FBc0Msa0RBQVc7QUFDakQ7QUFDQSwwQkFBMEIsa0RBQVc7QUFDckM7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLHNDQUFzQyxrREFBVztBQUNqRDtBQUNBLDBCQUEwQixrREFBVztBQUNyQztBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0Esc0NBQXNDLGtEQUFXO0FBQ2pEO0FBQ0EsMEJBQTBCLGtEQUFXO0FBQ3JDO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxzQ0FBc0Msa0RBQVc7QUFDakQ7QUFDQSwwQkFBMEIsa0RBQVc7QUFDckM7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGtCQUFrQixVQUFVLCtDQUFRLGtCQUFrQjtBQUN0RDtBQUNBLDRDQUE0QyxtQkFBbUI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwyREFBMkQ7QUFDM0U7QUFDQTtBQUNBLDBDQUEwQyx3RUFBd0U7QUFDbEgsOEJBQThCLDJEQUFnQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGVBQWU7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLE9BQU87QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsT0FBTztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsTUFBTTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxnQkFBZ0I7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFVBQVU7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix3REFBTSxtQkFBbUIsd0RBQVU7QUFDL0QsbUJBQW1CLHdEQUFNLFVBQVUsd0RBQVU7QUFDN0MsMEJBQTBCLHdEQUFNLGlCQUFpQix3REFBVTtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwwQkFBMEI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsMENBQUk7QUFDN0IsbUNBQW1DLEtBQUs7QUFDeEM7QUFDQSwyQ0FBMkMsMENBQUk7QUFDL0M7QUFDQSxtQ0FBbUMsS0FBSyxrQ0FBa0MsZ0JBQWdCLHFCQUFxQixNQUFNO0FBQ3JIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwwQ0FBSTtBQUNwQixtQ0FBbUMsMENBQUk7QUFDdkM7QUFDQSwyQ0FBMkMsS0FBSyxlQUFlLEtBQUs7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDBDQUFJO0FBQ3JDLDJDQUEyQyxLQUFLO0FBQ2hEO0FBQ0EsK0NBQStDLDBDQUFJO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsMENBQUk7QUFDN0IsbUNBQW1DLEtBQUs7QUFDeEM7QUFDQSx1Q0FBdUMsMENBQUk7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiwwQ0FBSTtBQUN6QiwrQkFBK0IsS0FBSztBQUNwQztBQUNBLDBCQUEwQiwwQ0FBSTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyw0QkFBNEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsdUJBQXVCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBLGVBQWUsdUJBQXVCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix3REFBTSxjQUFjLHdEQUFVO0FBQ3BEO0FBQ0E7QUFDQSx1REFBdUQsc0RBQVE7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLCtDQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywrQ0FBUTtBQUN4QztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix5QkFBeUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsK0NBQVE7QUFDakMscUNBQXFDLDREQUFVLE1BQU0sMkNBQTJDO0FBQ2hHLDBCQUEwQiw2REFBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDZEQUFXO0FBQ3RDO0FBQ0E7QUFDQSx5QkFBeUIsNERBQVUsQ0FBQyw0REFBVSxDQUFDLDhDQUFLO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsY0FBYztBQUNuRSwwQkFBMEIsY0FBYztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsVUFBVTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RkFBd0Y7QUFDeEY7QUFDQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixnREFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCw0Q0FBSztBQUNyRDtBQUNBO0FBQ0EseUJBQXlCLEdBQUcsOENBQVc7QUFDdkM7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL2Rpc3QvZXNtL2NvbW1vbi5qcz83YzNiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJJR0lOVF8wLCBUeXBlT3V0cHV0LCBieXRlc1RvSGV4LCBjb25jYXRCeXRlcywgaGV4VG9CeXRlcywgaW50VG9CeXRlcywgdG9UeXBlLCB9IGZyb20gJ0BldGhlcmV1bWpzL3V0aWwnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IGNoYWlucyBhcyBDSEFJTl9TUEVDUyB9IGZyb20gJy4vY2hhaW5zLmpzJztcbmltcG9ydCB7IGNyYzMyIH0gZnJvbSAnLi9jcmMuanMnO1xuaW1wb3J0IHsgRUlQcyB9IGZyb20gJy4vZWlwcy5qcyc7XG5pbXBvcnQgeyBDaGFpbiwgQ3VzdG9tQ2hhaW4sIEhhcmRmb3JrIH0gZnJvbSAnLi9lbnVtcy5qcyc7XG5pbXBvcnQgeyBoYXJkZm9ya3MgYXMgSEFSREZPUktfU1BFQ1MgfSBmcm9tICcuL2hhcmRmb3Jrcy5qcyc7XG5pbXBvcnQgeyBwYXJzZUdldGhHZW5lc2lzIH0gZnJvbSAnLi91dGlscy5qcyc7XG4vKipcbiAqIENvbW1vbiBjbGFzcyB0byBhY2Nlc3MgY2hhaW4gYW5kIGhhcmRmb3JrIHBhcmFtZXRlcnMgYW5kIHRvIHByb3ZpZGVcbiAqIGEgdW5pZmllZCBhbmQgc2hhcmVkIHZpZXcgb24gdGhlIG5ldHdvcmsgYW5kIGhhcmRmb3JrIHN0YXRlLlxuICpcbiAqIFVzZSB0aGUge0BsaW5rIENvbW1vbi5jdXN0b219IHN0YXRpYyBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgc2ltcGxlXG4gKiBjdXN0b20gY2hhaW4ge0BsaW5rIENvbW1vbn0gb2JqZWN0cyAobW9yZSBjb21wbGV0ZSBjdXN0b20gY2hhaW4gc2V0dXBzXG4gKiBjYW4gYmUgY3JlYXRlZCB2aWEgdGhlIG1haW4gY29uc3RydWN0b3IgYW5kIHRoZSB7QGxpbmsgQ29tbW9uT3B0cy5jdXN0b21DaGFpbnN9IHBhcmFtZXRlcikuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21tb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgdGhpcy5fZWlwcyA9IFtdO1xuICAgICAgICB0aGlzLl9wYXJhbXNDYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZWRFSVBzQ2FjaGUgPSBbXTtcbiAgICAgICAgdGhpcy5ldmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMuX2N1c3RvbUNoYWlucyA9IG9wdHMuY3VzdG9tQ2hhaW5zID8/IFtdO1xuICAgICAgICB0aGlzLl9jaGFpblBhcmFtcyA9IHRoaXMuc2V0Q2hhaW4ob3B0cy5jaGFpbik7XG4gICAgICAgIHRoaXMuREVGQVVMVF9IQVJERk9SSyA9IHRoaXMuX2NoYWluUGFyYW1zLmRlZmF1bHRIYXJkZm9yayA/PyBIYXJkZm9yay5TaGFuZ2hhaTtcbiAgICAgICAgLy8gQXNzaWduIGhhcmRmb3JrIGNoYW5nZXMgaW4gdGhlIHNlcXVlbmNlIG9mIHRoZSBhcHBsaWVkIGhhcmRmb3Jrc1xuICAgICAgICB0aGlzLkhBUkRGT1JLX0NIQU5HRVMgPSB0aGlzLmhhcmRmb3JrcygpLm1hcCgoaGYpID0+IFtcbiAgICAgICAgICAgIGhmLm5hbWUsXG4gICAgICAgICAgICBIQVJERk9SS19TUEVDU1toZi5uYW1lXSA/P1xuICAgICAgICAgICAgICAgICh0aGlzLl9jaGFpblBhcmFtcy5jdXN0b21IYXJkZm9ya3MgJiYgdGhpcy5fY2hhaW5QYXJhbXMuY3VzdG9tSGFyZGZvcmtzW2hmLm5hbWVdKSxcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMuX2hhcmRmb3JrID0gdGhpcy5ERUZBVUxUX0hBUkRGT1JLO1xuICAgICAgICBpZiAob3B0cy5oYXJkZm9yayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldEhhcmRmb3JrKG9wdHMuaGFyZGZvcmspO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLmVpcHMpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RUlQcyhvcHRzLmVpcHMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VzdG9tQ3J5cHRvID0gb3B0cy5jdXN0b21DcnlwdG8gPz8ge307XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9wYXJhbXNDYWNoZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9idWlsZFBhcmFtc0NhY2hlKCk7XG4gICAgICAgICAgICB0aGlzLl9idWlsZEFjdGl2YXRlZEVJUHNDYWNoZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB7QGxpbmsgQ29tbW9ufSBvYmplY3QgZm9yIGEgY3VzdG9tIGNoYWluLCBiYXNlZCBvbiBhIHN0YW5kYXJkIG9uZS5cbiAgICAgKlxuICAgICAqIEl0IHVzZXMgYWxsIHRoZSB7QGxpbmsgQ2hhaW59IHBhcmFtZXRlcnMgZnJvbSB0aGUge0BsaW5rIGJhc2VDaGFpbn0gb3B0aW9uIGV4Y2VwdCB0aGUgb25lcyBvdmVycmlkZGVuXG4gICAgICogaW4gYSBwcm92aWRlZCB7QGxpbmsgY2hhaW5QYXJhbXNPck5hbWV9IGRpY3Rpb25hcnkuIFNvbWUgdXNhZ2UgZXhhbXBsZTpcbiAgICAgKlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiBDb21tb24uY3VzdG9tKHtjaGFpbklkOiAxMjN9KVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlcmUgYXJlIGFsc28gc2VsZWN0ZWQgc3VwcG9ydGVkIGN1c3RvbSBjaGFpbnMgd2hpY2ggY2FuIGJlIGluaXRpYWxpemVkIGJ5IHVzaW5nIG9uZSBvZiB0aGVcbiAgICAgKiB7QGxpbmsgQ3VzdG9tQ2hhaW5zfSBmb3Ige0BsaW5rIGNoYWluUGFyYW1zT3JOYW1lfSwgZS5nLjpcbiAgICAgKlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiBDb21tb24uY3VzdG9tKEN1c3RvbUNoYWlucy5NYXRpY011bWJhaSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB0aGVzZSBzdXBwb3J0ZWQgY3VzdG9tIGNoYWlucyBvbmx5IHByb3ZpZGUgc29tZSBiYXNlIHBhcmFtZXRlcnMgKHVzdWFsbHkgdGhlIGNoYWluIGFuZFxuICAgICAqIG5ldHdvcmsgSUQgYW5kIGEgbmFtZSkgYW5kIGNhbiBvbmx5IGJlIHVzZWQgZm9yIHNlbGVjdGVkIHVzZSBjYXNlcyAoZS5nLiBzZW5kaW5nIGEgdHggd2l0aFxuICAgICAqIHRoZSBgQGV0aGVyZXVtanMvdHhgIGxpYnJhcnkgdG8gYSBMYXllci0yIGNoYWluKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjaGFpblBhcmFtc09yTmFtZSBDdXN0b20gcGFyYW1ldGVyIGRpY3QgKGBuYW1lYCB3aWxsIGRlZmF1bHQgdG8gYGN1c3RvbS1jaGFpbmApIG9yIHN0cmluZyB3aXRoIG5hbWUgb2YgYSBzdXBwb3J0ZWQgY3VzdG9tIGNoYWluXG4gICAgICogQHBhcmFtIG9wdHMgQ3VzdG9tIGNoYWluIG9wdGlvbnMgdG8gc2V0IHRoZSB7QGxpbmsgQ3VzdG9tQ29tbW9uT3B0cy5iYXNlQ2hhaW59LCBzZWxlY3RlZCB7QGxpbmsgQ3VzdG9tQ29tbW9uT3B0cy5oYXJkZm9ya30gYW5kIG90aGVyc1xuICAgICAqL1xuICAgIHN0YXRpYyBjdXN0b20oY2hhaW5QYXJhbXNPck5hbWUsIG9wdHMgPSB7fSkge1xuICAgICAgICBjb25zdCBiYXNlQ2hhaW4gPSBvcHRzLmJhc2VDaGFpbiA/PyAnbWFpbm5ldCc7XG4gICAgICAgIGNvbnN0IHN0YW5kYXJkQ2hhaW5QYXJhbXMgPSB7IC4uLkNvbW1vbi5fZ2V0Q2hhaW5QYXJhbXMoYmFzZUNoYWluKSB9O1xuICAgICAgICBzdGFuZGFyZENoYWluUGFyYW1zWyduYW1lJ10gPSAnY3VzdG9tLWNoYWluJztcbiAgICAgICAgaWYgKHR5cGVvZiBjaGFpblBhcmFtc09yTmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tbW9uKHtcbiAgICAgICAgICAgICAgICBjaGFpbjoge1xuICAgICAgICAgICAgICAgICAgICAuLi5zdGFuZGFyZENoYWluUGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICAuLi5jaGFpblBhcmFtc09yTmFtZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjaGFpblBhcmFtc09yTmFtZSA9PT0gQ3VzdG9tQ2hhaW4uUG9seWdvbk1haW5uZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29tbW9uLmN1c3RvbSh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IEN1c3RvbUNoYWluLlBvbHlnb25NYWlubmV0LFxuICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiAxMzcsXG4gICAgICAgICAgICAgICAgICAgIG5ldHdvcmtJZDogMTM3LFxuICAgICAgICAgICAgICAgIH0sIG9wdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoYWluUGFyYW1zT3JOYW1lID09PSBDdXN0b21DaGFpbi5Qb2x5Z29uTXVtYmFpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbW1vbi5jdXN0b20oe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBDdXN0b21DaGFpbi5Qb2x5Z29uTXVtYmFpLFxuICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiA4MDAwMSxcbiAgICAgICAgICAgICAgICAgICAgbmV0d29ya0lkOiA4MDAwMSxcbiAgICAgICAgICAgICAgICB9LCBvcHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGFpblBhcmFtc09yTmFtZSA9PT0gQ3VzdG9tQ2hhaW4uQXJiaXRydW1PbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29tbW9uLmN1c3RvbSh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IEN1c3RvbUNoYWluLkFyYml0cnVtT25lLFxuICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiA0MjE2MSxcbiAgICAgICAgICAgICAgICAgICAgbmV0d29ya0lkOiA0MjE2MSxcbiAgICAgICAgICAgICAgICB9LCBvcHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGFpblBhcmFtc09yTmFtZSA9PT0gQ3VzdG9tQ2hhaW4ueERhaUNoYWluKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbW1vbi5jdXN0b20oe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBDdXN0b21DaGFpbi54RGFpQ2hhaW4sXG4gICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgbmV0d29ya0lkOiAxMDAsXG4gICAgICAgICAgICAgICAgfSwgb3B0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hhaW5QYXJhbXNPck5hbWUgPT09IEN1c3RvbUNoYWluLk9wdGltaXN0aWNLb3Zhbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBDb21tb24uY3VzdG9tKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogQ3VzdG9tQ2hhaW4uT3B0aW1pc3RpY0tvdmFuLFxuICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiA2OSxcbiAgICAgICAgICAgICAgICAgICAgbmV0d29ya0lkOiA2OSxcbiAgICAgICAgICAgICAgICB9LCBvcHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGFpblBhcmFtc09yTmFtZSA9PT0gQ3VzdG9tQ2hhaW4uT3B0aW1pc3RpY0V0aGVyZXVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbW1vbi5jdXN0b20oe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBDdXN0b21DaGFpbi5PcHRpbWlzdGljRXRoZXJldW0sXG4gICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IDEwLFxuICAgICAgICAgICAgICAgICAgICBuZXR3b3JrSWQ6IDEwLFxuICAgICAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgICAgIC8vIE9wdGltaXNtIGhhcyBub3QgaW1wbGVtZW50ZWQgdGhlIExvbmRvbiBoYXJkZm9yayB5ZXQgKHRhcmdldGluZyBRMS4yMilcbiAgICAgICAgICAgICAgICB7IGhhcmRmb3JrOiBIYXJkZm9yay5CZXJsaW4sIC4uLm9wdHMgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEN1c3RvbSBjaGFpbiAke2NoYWluUGFyYW1zT3JOYW1lfSBub3Qgc3VwcG9ydGVkYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhdGljIG1ldGhvZCB0byBsb2FkIGFuZCBzZXQgY29tbW9uIGZyb20gYSBnZXRoIGdlbmVzaXMganNvblxuICAgICAqIEBwYXJhbSBnZW5lc2lzSnNvbiBqc29uIG9mIGdldGggY29uZmlndXJhdGlvblxuICAgICAqIEBwYXJhbSB7IGNoYWluLCBlaXBzLCBnZW5lc2lzSGFzaCwgaGFyZGZvcmssIG1lcmdlRm9ya0lkUG9zdE1lcmdlIH0gdG8gZnVydGhlciBjb25maWd1cmUgdGhlIGNvbW1vbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm5zIENvbW1vblxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tR2V0aEdlbmVzaXMoZ2VuZXNpc0pzb24sIHsgY2hhaW4sIGVpcHMsIGdlbmVzaXNIYXNoLCBoYXJkZm9yaywgbWVyZ2VGb3JrSWRQb3N0TWVyZ2UsIGN1c3RvbUNyeXB0byB9KSB7XG4gICAgICAgIGNvbnN0IGdlbmVzaXNQYXJhbXMgPSBwYXJzZUdldGhHZW5lc2lzKGdlbmVzaXNKc29uLCBjaGFpbiwgbWVyZ2VGb3JrSWRQb3N0TWVyZ2UpO1xuICAgICAgICBjb25zdCBjb21tb24gPSBuZXcgQ29tbW9uKHtcbiAgICAgICAgICAgIGNoYWluOiBnZW5lc2lzUGFyYW1zLm5hbWUgPz8gJ2N1c3RvbScsXG4gICAgICAgICAgICBjdXN0b21DaGFpbnM6IFtnZW5lc2lzUGFyYW1zXSxcbiAgICAgICAgICAgIGVpcHMsXG4gICAgICAgICAgICBoYXJkZm9yazogaGFyZGZvcmsgPz8gZ2VuZXNpc1BhcmFtcy5oYXJkZm9yayxcbiAgICAgICAgICAgIGN1c3RvbUNyeXB0byxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChnZW5lc2lzSGFzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb21tb24uc2V0Rm9ya0hhc2hlcyhnZW5lc2lzSGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbW1vbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhdGljIG1ldGhvZCB0byBkZXRlcm1pbmUgaWYgYSB7QGxpbmsgY2hhaW5JZH0gaXMgc3VwcG9ydGVkIGFzIGEgc3RhbmRhcmQgY2hhaW5cbiAgICAgKiBAcGFyYW0gY2hhaW5JZCBiaWdpbnQgaWQgKGAxYCkgb2YgYSBzdGFuZGFyZCBjaGFpblxuICAgICAqIEByZXR1cm5zIGJvb2xlYW5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNTdXBwb3J0ZWRDaGFpbklkKGNoYWluSWQpIHtcbiAgICAgICAgY29uc3QgaW5pdGlhbGl6ZWRDaGFpbnMgPSB0aGlzLmdldEluaXRpYWxpemVkQ2hhaW5zKCk7XG4gICAgICAgIHJldHVybiBCb29sZWFuKGluaXRpYWxpemVkQ2hhaW5zWyduYW1lcyddW2NoYWluSWQudG9TdHJpbmcoKV0pO1xuICAgIH1cbiAgICBzdGF0aWMgX2dldENoYWluUGFyYW1zKGNoYWluLCBjdXN0b21DaGFpbnMpIHtcbiAgICAgICAgY29uc3QgaW5pdGlhbGl6ZWRDaGFpbnMgPSB0aGlzLmdldEluaXRpYWxpemVkQ2hhaW5zKGN1c3RvbUNoYWlucyk7XG4gICAgICAgIGlmICh0eXBlb2YgY2hhaW4gPT09ICdudW1iZXInIHx8IHR5cGVvZiBjaGFpbiA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgICAgIGNoYWluID0gY2hhaW4udG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGlmIChpbml0aWFsaXplZENoYWluc1snbmFtZXMnXVtjaGFpbl0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gaW5pdGlhbGl6ZWRDaGFpbnNbJ25hbWVzJ11bY2hhaW5dO1xuICAgICAgICAgICAgICAgIHJldHVybiBpbml0aWFsaXplZENoYWluc1tuYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2hhaW4gd2l0aCBJRCAke2NoYWlufSBub3Qgc3VwcG9ydGVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluaXRpYWxpemVkQ2hhaW5zW2NoYWluXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5pdGlhbGl6ZWRDaGFpbnNbY2hhaW5dO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2hhaW4gd2l0aCBuYW1lICR7Y2hhaW59IG5vdCBzdXBwb3J0ZWRgKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY2hhaW5cbiAgICAgKiBAcGFyYW0gY2hhaW4gU3RyaW5nICgnbWFpbm5ldCcpIG9yIE51bWJlciAoMSkgY2hhaW4gcmVwcmVzZW50YXRpb24uXG4gICAgICogICAgICAgICAgICAgIE9yLCBhIERpY3Rpb25hcnkgb2YgY2hhaW4gcGFyYW1ldGVycyBmb3IgYSBwcml2YXRlIG5ldHdvcmsuXG4gICAgICogQHJldHVybnMgVGhlIGRpY3Rpb25hcnkgd2l0aCBwYXJhbWV0ZXJzIHNldCBhcyBjaGFpblxuICAgICAqL1xuICAgIHNldENoYWluKGNoYWluKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2hhaW4gPT09ICdudW1iZXInIHx8IHR5cGVvZiBjaGFpbiA9PT0gJ2JpZ2ludCcgfHwgdHlwZW9mIGNoYWluID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy5fY2hhaW5QYXJhbXMgPSBDb21tb24uX2dldENoYWluUGFyYW1zKGNoYWluLCB0aGlzLl9jdXN0b21DaGFpbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjaGFpbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jdXN0b21DaGFpbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2hhaW4gbXVzdCBiZSBhIHN0cmluZywgbnVtYmVyLCBvciBiaWdpbnQgd2hlbiBpbml0aWFsaXplZCB3aXRoIGN1c3RvbUNoYWlucyBwYXNzZWQgaW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlcXVpcmVkID0gWyduZXR3b3JrSWQnLCAnZ2VuZXNpcycsICdoYXJkZm9ya3MnLCAnYm9vdHN0cmFwTm9kZXMnXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFyYW0gb2YgcmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShwYXJhbSBpbiBjaGFpbikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIHJlcXVpcmVkIGNoYWluIHBhcmFtZXRlcjogJHtwYXJhbX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9jaGFpblBhcmFtcyA9IGNoYWluO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXcm9uZyBpbnB1dCBmb3JtYXQnKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGhmIG9mIHRoaXMuaGFyZGZvcmtzKCkpIHtcbiAgICAgICAgICAgIGlmIChoZi5ibG9jayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIYXJkZm9yayBjYW5ub3QgaGF2ZSB1bmRlZmluZWQgYmxvY2sgbnVtYmVyYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoYWluUGFyYW1zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXJkZm9yayB0byBnZXQgcGFyYW1zIGZvclxuICAgICAqIEBwYXJhbSBoYXJkZm9yayBTdHJpbmcgaWRlbnRpZmllciAoZS5nLiAnYnl6YW50aXVtJykgb3Ige0BsaW5rIEhhcmRmb3JrfSBlbnVtXG4gICAgICovXG4gICAgc2V0SGFyZGZvcmsoaGFyZGZvcmspIHtcbiAgICAgICAgbGV0IGV4aXN0aW5nID0gZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3QgaGZDaGFuZ2VzIG9mIHRoaXMuSEFSREZPUktfQ0hBTkdFUykge1xuICAgICAgICAgICAgaWYgKGhmQ2hhbmdlc1swXSA9PT0gaGFyZGZvcmspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faGFyZGZvcmsgIT09IGhhcmRmb3JrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhcmRmb3JrID0gaGFyZGZvcms7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2J1aWxkUGFyYW1zQ2FjaGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYnVpbGRBY3RpdmF0ZWRFSVBzQ2FjaGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudHMuZW1pdCgnaGFyZGZvcmtDaGFuZ2VkJywgaGFyZGZvcmspO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBleGlzdGluZyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFleGlzdGluZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIYXJkZm9yayB3aXRoIG5hbWUgJHtoYXJkZm9ya30gbm90IHN1cHBvcnRlZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGhhcmRmb3JrIGVpdGhlciBiYXNlZCBvbiBibG9jayBudW1lciAob2xkZXIgSEZzKSBvclxuICAgICAqIHRpbWVzdGFtcCAoU2hhbmdoYWkgdXB3YXJkcykuXG4gICAgICpcbiAgICAgKiBBbiBvcHRpb25hbCBURCB0YWtlcyBwcmVjZWRlbmNlIGluIGNhc2UgdGhlIGNvcnJlc3BvbmRpbmcgSEYgYmxvY2tcbiAgICAgKiBpcyBzZXQgdG8gYG51bGxgIG9yIG90aGVyd2lzZSBuZWVkcyB0byBtYXRjaCAoaWYgbm90IGFuIGVycm9yXG4gICAgICogd2lsbCBiZSB0aHJvd24pLlxuICAgICAqXG4gICAgICogQHBhcmFtIE9wdHMgQmxvY2sgbnVtYmVyLCB0aW1lc3RhbXAgb3IgVEQgKGFsbCBvcHRpb25hbClcbiAgICAgKiBAcmV0dXJucyBUaGUgbmFtZSBvZiB0aGUgSEZcbiAgICAgKi9cbiAgICBnZXRIYXJkZm9ya0J5KG9wdHMpIHtcbiAgICAgICAgY29uc3QgYmxvY2tOdW1iZXIgPSB0b1R5cGUob3B0cy5ibG9ja051bWJlciwgVHlwZU91dHB1dC5CaWdJbnQpO1xuICAgICAgICBjb25zdCB0ZCA9IHRvVHlwZShvcHRzLnRkLCBUeXBlT3V0cHV0LkJpZ0ludCk7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IHRvVHlwZShvcHRzLnRpbWVzdGFtcCwgVHlwZU91dHB1dC5CaWdJbnQpO1xuICAgICAgICAvLyBGaWx0ZXIgb3V0IGhhcmRmb3JrcyB3aXRoIG5vIGJsb2NrIG51bWJlciwgbm8gdHRkIG9yIG5vIHRpbWVzdGFtcCAoaS5lLiB1bmFwcGxpZWQgaGFyZGZvcmtzKVxuICAgICAgICBjb25zdCBoZnMgPSB0aGlzLmhhcmRmb3JrcygpLmZpbHRlcigoaGYpID0+IGhmLmJsb2NrICE9PSBudWxsIHx8IChoZi50dGQgIT09IG51bGwgJiYgaGYudHRkICE9PSB1bmRlZmluZWQpIHx8IGhmLnRpbWVzdGFtcCAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgY29uc3QgbWVyZ2VJbmRleCA9IGhmcy5maW5kSW5kZXgoKGhmKSA9PiBoZi50dGQgIT09IG51bGwgJiYgaGYudHRkICE9PSB1bmRlZmluZWQpO1xuICAgICAgICBjb25zdCBkb3VibGVUVERIRiA9IGhmc1xuICAgICAgICAgICAgLnNsaWNlKG1lcmdlSW5kZXggKyAxKVxuICAgICAgICAgICAgLmZpbmRJbmRleCgoaGYpID0+IGhmLnR0ZCAhPT0gbnVsbCAmJiBoZi50dGQgIT09IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmIChkb3VibGVUVERIRiA+PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgTW9yZSB0aGFuIG9uZSBtZXJnZSBoYXJkZm9ya3MgZm91bmQgd2l0aCB0dGQgc3BlY2lmaWVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmluZCB0aGUgZmlyc3QgaGFyZGZvcmsgdGhhdCBoYXMgYSBibG9jayBudW1iZXIgZ3JlYXRlciB0aGFuIGBibG9ja051bWJlcmBcbiAgICAgICAgLy8gKHNraXBzIHRoZSBtZXJnZSBoYXJkZm9yayBzaW5jZSBpdCBjYW5ub3QgaGF2ZSBhIGJsb2NrIG51bWJlciBzcGVjaWZpZWQpLlxuICAgICAgICAvLyBJZiB0aW1lc3RhbXAgaXMgbm90IHByb3ZpZGVkLCBpdCBhbHNvIHNraXBzIHRpbWVzdGFtcHMgaGFyZGZvcmtzIHRvIGNvbnRpbnVlXG4gICAgICAgIC8vIGRpc2NvdmVyaW5nL2NoZWNraW5nIG51bWJlciBoYXJkZm9ya3MuXG4gICAgICAgIGxldCBoZkluZGV4ID0gaGZzLmZpbmRJbmRleCgoaGYpID0+IChibG9ja051bWJlciAhPT0gdW5kZWZpbmVkICYmIGhmLmJsb2NrICE9PSBudWxsICYmIEJpZ0ludChoZi5ibG9jaykgPiBibG9ja051bWJlcikgfHxcbiAgICAgICAgICAgICh0aW1lc3RhbXAgIT09IHVuZGVmaW5lZCAmJiBoZi50aW1lc3RhbXAgIT09IHVuZGVmaW5lZCAmJiBCaWdJbnQoaGYudGltZXN0YW1wKSA+IHRpbWVzdGFtcCkpO1xuICAgICAgICBpZiAoaGZJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIGFsbCBoYXJkZm9ya3MgYXBwbHksIHNldCBoZkluZGV4IHRvIHRoZSBsYXN0IG9uZSBhcyB0aGF0J3MgdGhlIGNhbmRpZGF0ZVxuICAgICAgICAgICAgaGZJbmRleCA9IGhmcy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGZJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gY2Fubm90IGhhdmUgYSBjYXNlIHdoZXJlIGEgYmxvY2sgbnVtYmVyIGlzIGJlZm9yZSBhbGwgYXBwbGllZCBoYXJkZm9ya3NcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBjaGFpbiBoYXMgdG8gc3RhcnQgd2l0aCBhIGhhcmRmb3JrXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignTXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBoYXJkZm9yayBhdCBibG9jayAwJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGltZXN0YW1wIGlzIG5vdCBwcm92aWRlZCwgd2UgbmVlZCB0byByb2xsYmFjayB0byB0aGUgbGFzdCBoZiB3aXRoIGJsb2NrIG9yIHR0ZFxuICAgICAgICBpZiAodGltZXN0YW1wID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0ZXBCYWNrID0gaGZzXG4gICAgICAgICAgICAgICAgLnNsaWNlKDAsIGhmSW5kZXgpXG4gICAgICAgICAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAgICAgICAgIC5maW5kSW5kZXgoKGhmKSA9PiBoZi5ibG9jayAhPT0gbnVsbCB8fCBoZi50dGQgIT09IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBoZkluZGV4ID0gaGZJbmRleCAtIHN0ZXBCYWNrO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1vdmUgaGZJbmRleCBvbmUgYmFjayB0byBhcnJpdmUgYXQgY2FuZGlkYXRlIGhhcmRmb3JrXG4gICAgICAgIGhmSW5kZXggPSBoZkluZGV4IC0gMTtcbiAgICAgICAgLy8gSWYgdGhlIHRpbWVzdGFtcCB3YXMgbm90IHByb3ZpZGVkLCB3ZSBjb3VsZCBoYXZlIHNraXBwZWQgdGltZXN0YW1wIGhhcmRmb3JrcyB0byBsb29rIGZvciBudW1iZXJcbiAgICAgICAgLy8gaGFyZGZvcmtzLiBzbyBpdCB3aWxsIG5vdyBiZSBuZWVkZWQgdG8gcm9sbGJhY2tcbiAgICAgICAgaWYgKGhmc1toZkluZGV4XS5ibG9jayA9PT0gbnVsbCAmJiBoZnNbaGZJbmRleF0udGltZXN0YW1wID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIFdlJ3JlIG9uIHRoZSBtZXJnZSBoYXJkZm9yay4gIExldCdzIGNoZWNrIHRoZSBUVERcbiAgICAgICAgICAgIGlmICh0ZCA9PT0gdW5kZWZpbmVkIHx8IHRkID09PSBudWxsIHx8IEJpZ0ludChoZnNbaGZJbmRleF0udHRkKSA+IHRkKSB7XG4gICAgICAgICAgICAgICAgLy8gTWVyZ2UgdHRkIGdyZWF0ZXIgdGhhbiBjdXJyZW50IHRkIHNvIHdlJ3JlIG9uIGhhcmRmb3JrIGJlZm9yZSBtZXJnZVxuICAgICAgICAgICAgICAgIGhmSW5kZXggLT0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChtZXJnZUluZGV4ID49IDAgJiYgdGQgIT09IHVuZGVmaW5lZCAmJiB0ZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChoZkluZGV4ID49IG1lcmdlSW5kZXggJiYgQmlnSW50KGhmc1ttZXJnZUluZGV4XS50dGQpID4gdGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ01heGltdW0gSEYgZGV0ZXJtaW5lZCBieSB0b3RhbCBkaWZmaWN1bHR5IGlzIGxvd2VyIHRoYW4gdGhlIGJsb2NrIG51bWJlciBIRicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChoZkluZGV4IDwgbWVyZ2VJbmRleCAmJiBCaWdJbnQoaGZzW21lcmdlSW5kZXhdLnR0ZCkgPCB0ZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignSEYgZGV0ZXJtaW5lZCBieSBibG9jayBudW1iZXIgaXMgbG93ZXIgdGhhbiB0aGUgbWluaW11bSB0b3RhbCBkaWZmaWN1bHR5IEhGJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhmU3RhcnRJbmRleCA9IGhmSW5kZXg7XG4gICAgICAgIC8vIE1vdmUgdGhlIGhmSW5kZXggdG8gdGhlIGVuZCBvZiB0aGUgaGFyZGZvcmtzIHRoYXQgbWlnaHQgYmUgc2NoZWR1bGVkIG9uIHRoZSBzYW1lIGJsb2NrL3RpbWVzdGFtcFxuICAgICAgICAvLyBUaGlzIHdvbid0IGFueXdheSBiZSB0aGUgY2FzZSB3aXRoIE1lcmdlIGhmc1xuICAgICAgICBmb3IgKDsgaGZJbmRleCA8IGhmcy5sZW5ndGggLSAxOyBoZkluZGV4KyspIHtcbiAgICAgICAgICAgIC8vIGJyZWFrIG91dCBpZiBoZkluZGV4ICsgMSBpcyBub3Qgc2NoZWR1bGVkIGF0IGhmSW5kZXhcbiAgICAgICAgICAgIGlmIChoZnNbaGZJbmRleF0uYmxvY2sgIT09IGhmc1toZkluZGV4ICsgMV0uYmxvY2sgfHxcbiAgICAgICAgICAgICAgICBoZnNbaGZJbmRleF0udGltZXN0YW1wICE9PSBoZnNbaGZJbmRleCArIDFdLnRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lc3RhbXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgbWluVGltZVN0YW1wID0gaGZzXG4gICAgICAgICAgICAgICAgLnNsaWNlKDAsIGhmU3RhcnRJbmRleClcbiAgICAgICAgICAgICAgICAucmVkdWNlKChhY2MsIGhmKSA9PiBNYXRoLm1heChOdW1iZXIoaGYudGltZXN0YW1wID8/ICcwJyksIGFjYyksIDApO1xuICAgICAgICAgICAgaWYgKG1pblRpbWVTdGFtcCA+IHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBNYXhpbXVtIEhGIGRldGVybWluZWQgYnkgdGltZXN0YW1wIGlzIGxvd2VyIHRoYW4gdGhlIGJsb2NrIG51bWJlci90dGQgSEZgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1heFRpbWVTdGFtcCA9IGhmc1xuICAgICAgICAgICAgICAgIC5zbGljZShoZkluZGV4ICsgMSlcbiAgICAgICAgICAgICAgICAucmVkdWNlKChhY2MsIGhmKSA9PiBNYXRoLm1pbihOdW1iZXIoaGYudGltZXN0YW1wID8/IHRpbWVzdGFtcCksIGFjYyksIE51bWJlcih0aW1lc3RhbXApKTtcbiAgICAgICAgICAgIGlmIChtYXhUaW1lU3RhbXAgPCB0aW1lc3RhbXApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgTWF4aW11bSBIRiBkZXRlcm1pbmVkIGJ5IGJsb2NrIG51bWJlci90dGQgaXMgbG93ZXIgdGhhbiB0aW1lc3RhbXAgSEZgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYXJkZm9yayA9IGhmc1toZkluZGV4XTtcbiAgICAgICAgcmV0dXJuIGhhcmRmb3JrLm5hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSBuZXcgaGFyZGZvcmsgZWl0aGVyIGJhc2VkIG9uIGJsb2NrIG51bWVyIChvbGRlciBIRnMpIG9yXG4gICAgICogdGltZXN0YW1wIChTaGFuZ2hhaSB1cHdhcmRzKS5cbiAgICAgKlxuICAgICAqIEFuIG9wdGlvbmFsIFREIHRha2VzIHByZWNlZGVuY2UgaW4gY2FzZSB0aGUgY29ycmVzcG9uZGluZyBIRiBibG9ja1xuICAgICAqIGlzIHNldCB0byBgbnVsbGAgb3Igb3RoZXJ3aXNlIG5lZWRzIHRvIG1hdGNoIChpZiBub3QgYW4gZXJyb3JcbiAgICAgKiB3aWxsIGJlIHRocm93bikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gT3B0cyBCbG9jayBudW1iZXIsIHRpbWVzdGFtcCBvciBURCAoYWxsIG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm5zIFRoZSBuYW1lIG9mIHRoZSBIRiBzZXRcbiAgICAgKi9cbiAgICBzZXRIYXJkZm9ya0J5KG9wdHMpIHtcbiAgICAgICAgY29uc3QgaGFyZGZvcmsgPSB0aGlzLmdldEhhcmRmb3JrQnkob3B0cyk7XG4gICAgICAgIHRoaXMuc2V0SGFyZGZvcmsoaGFyZGZvcmspO1xuICAgICAgICByZXR1cm4gaGFyZGZvcms7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGhlbHBlciBmdW5jdGlvbiwgcmV0dXJucyB0aGUgcGFyYW1zIGZvciB0aGUgZ2l2ZW4gaGFyZGZvcmsgZm9yIHRoZSBjaGFpbiBzZXRcbiAgICAgKiBAcGFyYW0gaGFyZGZvcmsgSGFyZGZvcmsgbmFtZVxuICAgICAqIEByZXR1cm5zIERpY3Rpb25hcnkgd2l0aCBoYXJkZm9yayBwYXJhbXMgb3IgbnVsbCBpZiBoYXJkZm9yayBub3Qgb24gY2hhaW5cbiAgICAgKi9cbiAgICBfZ2V0SGFyZGZvcmsoaGFyZGZvcmspIHtcbiAgICAgICAgY29uc3QgaGZzID0gdGhpcy5oYXJkZm9ya3MoKTtcbiAgICAgICAgZm9yIChjb25zdCBoZiBvZiBoZnMpIHtcbiAgICAgICAgICAgIGlmIChoZlsnbmFtZSddID09PSBoYXJkZm9yaylcbiAgICAgICAgICAgICAgICByZXR1cm4gaGY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGFjdGl2ZSBFSVBzXG4gICAgICogQHBhcmFtIGVpcHNcbiAgICAgKi9cbiAgICBzZXRFSVBzKGVpcHMgPSBbXSkge1xuICAgICAgICBmb3IgKGNvbnN0IGVpcCBvZiBlaXBzKSB7XG4gICAgICAgICAgICBpZiAoIShlaXAgaW4gRUlQcykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZWlwfSBub3Qgc3VwcG9ydGVkYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtaW5IRiA9IHRoaXMuZ3RlSGFyZGZvcmsoRUlQc1tlaXBdWydtaW5pbXVtSGFyZGZvcmsnXSk7XG4gICAgICAgICAgICBpZiAoIW1pbkhGKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2VpcH0gY2Fubm90IGJlIGFjdGl2YXRlZCBvbiBoYXJkZm9yayAke3RoaXMuaGFyZGZvcmsoKX0sIG1pbmltdW1IYXJkZm9yazogJHttaW5IRn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9laXBzID0gZWlwcztcbiAgICAgICAgdGhpcy5fYnVpbGRQYXJhbXNDYWNoZSgpO1xuICAgICAgICB0aGlzLl9idWlsZEFjdGl2YXRlZEVJUHNDYWNoZSgpO1xuICAgICAgICBmb3IgKGNvbnN0IGVpcCBvZiBlaXBzKSB7XG4gICAgICAgICAgICBpZiAoRUlQc1tlaXBdLnJlcXVpcmVkRUlQcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtIG9mIEVJUHNbZWlwXS5yZXF1aXJlZEVJUHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoZWlwcy5pbmNsdWRlcyhlbGVtKSB8fCB0aGlzLmlzQWN0aXZhdGVkRUlQKGVsZW0pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2VpcH0gcmVxdWlyZXMgRUlQICR7ZWxlbX0sIGJ1dCBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIEVJUCBsaXN0YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgaGVscGVyIGZvciBfYnVpbGRQYXJhbXNDYWNoZSgpXG4gICAgICovXG4gICAgX21lcmdlV2l0aFBhcmFtc0NhY2hlKHBhcmFtcykge1xuICAgICAgICB0aGlzLl9wYXJhbXNDYWNoZVsnZ2FzQ29uZmlnJ10gPSB7XG4gICAgICAgICAgICAuLi50aGlzLl9wYXJhbXNDYWNoZVsnZ2FzQ29uZmlnJ10sXG4gICAgICAgICAgICAuLi5wYXJhbXNbJ2dhc0NvbmZpZyddLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wYXJhbXNDYWNoZVsnZ2FzUHJpY2VzJ10gPSB7XG4gICAgICAgICAgICAuLi50aGlzLl9wYXJhbXNDYWNoZVsnZ2FzUHJpY2VzJ10sXG4gICAgICAgICAgICAuLi5wYXJhbXNbJ2dhc1ByaWNlcyddLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wYXJhbXNDYWNoZVsncG93J10gPSB7XG4gICAgICAgICAgICAuLi50aGlzLl9wYXJhbXNDYWNoZVsncG93J10sXG4gICAgICAgICAgICAuLi5wYXJhbXNbJ3BvdyddLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wYXJhbXNDYWNoZVsnc2hhcmRpbmcnXSA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuX3BhcmFtc0NhY2hlWydzaGFyZGluZyddLFxuICAgICAgICAgICAgLi4ucGFyYW1zWydzaGFyZGluZyddLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wYXJhbXNDYWNoZVsndm0nXSA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuX3BhcmFtc0NhY2hlWyd2bSddLFxuICAgICAgICAgICAgLi4ucGFyYW1zWyd2bSddLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCdWlsZCB1cCBhIGNhY2hlIGZvciBhbGwgcGFyYW1ldGVyIHZhbHVlcyBmb3IgdGhlIGN1cnJlbnQgSEYgYW5kIGFsbCBhY3RpdmF0ZWQgRUlQc1xuICAgICAqL1xuICAgIF9idWlsZFBhcmFtc0NhY2hlKCkge1xuICAgICAgICB0aGlzLl9wYXJhbXNDYWNoZSA9IHt9O1xuICAgICAgICAvLyBJdGVyYXRlIHRocm91Z2ggYWxsIGhhcmRmb3JrcyB1cCB0byBoYXJkZm9yayBzZXRcbiAgICAgICAgY29uc3QgaGFyZGZvcmsgPSB0aGlzLmhhcmRmb3JrKCk7XG4gICAgICAgIGZvciAoY29uc3QgaGZDaGFuZ2VzIG9mIHRoaXMuSEFSREZPUktfQ0hBTkdFUykge1xuICAgICAgICAgICAgLy8gRUlQLXJlZmVyZW5jaW5nIEhGIGNvbmZpZyAoZS5nLiBmb3IgYmVybGluKVxuICAgICAgICAgICAgaWYgKCdlaXBzJyBpbiBoZkNoYW5nZXNbMV0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoZkVJUHMgPSBoZkNoYW5nZXNbMV1bJ2VpcHMnXTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGVpcCBvZiBoZkVJUHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoZWlwIGluIEVJUHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZWlwfSBub3Qgc3VwcG9ydGVkYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVyZ2VXaXRoUGFyYW1zQ2FjaGUoRUlQc1tlaXBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUGFyYW1ldGVyLWlubGluaW5nIEhGIGNvbmZpZyAoZS5nLiBmb3IgaXN0YW5idWwpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tZXJnZVdpdGhQYXJhbXNDYWNoZShoZkNoYW5nZXNbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhmQ2hhbmdlc1swXSA9PT0gaGFyZGZvcmspXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGFsbCBhZGRpdGlvbmFsbHkgYWN0aXZhdGVkIEVJUHNcbiAgICAgICAgZm9yIChjb25zdCBlaXAgb2YgdGhpcy5fZWlwcykge1xuICAgICAgICAgICAgaWYgKCEoZWlwIGluIEVJUHMpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2VpcH0gbm90IHN1cHBvcnRlZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbWVyZ2VXaXRoUGFyYW1zQ2FjaGUoRUlQc1tlaXBdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfYnVpbGRBY3RpdmF0ZWRFSVBzQ2FjaGUoKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlZEVJUHNDYWNoZSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGhmQ2hhbmdlcyBvZiB0aGlzLkhBUkRGT1JLX0NIQU5HRVMpIHtcbiAgICAgICAgICAgIGNvbnN0IGhmID0gaGZDaGFuZ2VzWzFdO1xuICAgICAgICAgICAgaWYgKHRoaXMuZ3RlSGFyZGZvcmsoaGZbJ25hbWUnXSkgJiYgJ2VpcHMnIGluIGhmKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZhdGVkRUlQc0NhY2hlID0gdGhpcy5fYWN0aXZhdGVkRUlQc0NhY2hlLmNvbmNhdChoZlsnZWlwcyddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hY3RpdmF0ZWRFSVBzQ2FjaGUgPSB0aGlzLl9hY3RpdmF0ZWRFSVBzQ2FjaGUuY29uY2F0KHRoaXMuX2VpcHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcGFyYW1ldGVyIGZvciB0aGUgY3VycmVudCBjaGFpbiBzZXR1cFxuICAgICAqXG4gICAgICogSWYgdGhlIHBhcmFtZXRlciBpcyBwcmVzZW50IGluIGFuIEVJUCwgdGhlIEVJUCBhbHdheXMgdGFrZXMgcHJlY2VkZW5jZS5cbiAgICAgKiBPdGhlcndpc2UgdGhlIHBhcmFtZXRlciBpcyB0YWtlbiBmcm9tIHRoZSBsYXRlc3QgYXBwbGllZCBIRiB3aXRoXG4gICAgICogYSBjaGFuZ2Ugb24gdGhlIHJlc3BlY3RpdmUgcGFyYW1ldGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRvcGljIFBhcmFtZXRlciB0b3BpYyAoJ2dhc0NvbmZpZycsICdnYXNQcmljZXMnLCAndm0nLCAncG93JylcbiAgICAgKiBAcGFyYW0gbmFtZSBQYXJhbWV0ZXIgbmFtZSAoZS5nLiAnbWluR2FzTGltaXQnIGZvciAnZ2FzQ29uZmlnJyB0b3BpYylcbiAgICAgKiBAcmV0dXJucyBUaGUgdmFsdWUgcmVxdWVzdGVkIG9yIGBCaWdJbnQoMClgIGlmIG5vdCBmb3VuZFxuICAgICAqL1xuICAgIHBhcmFtKHRvcGljLCBuYW1lKSB7XG4gICAgICAgIC8vIFRPRE86IGNvbnNpZGVyIHRoZSBjYXNlIHRoYXQgZGlmZmVyZW50IGFjdGl2ZSBFSVBzXG4gICAgICAgIC8vIGNhbiBjaGFuZ2UgdGhlIHNhbWUgcGFyYW1ldGVyXG4gICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLl9wYXJhbXNDYWNoZVt0b3BpY10gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdGhpcy5fcGFyYW1zQ2FjaGVbdG9waWNdW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fcGFyYW1zQ2FjaGVbdG9waWNdW25hbWVdLnY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEJpZ0ludCh2YWx1ZSA/PyAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcGFyYW1ldGVyIGNvcnJlc3BvbmRpbmcgdG8gYSBoYXJkZm9ya1xuICAgICAqIEBwYXJhbSB0b3BpYyBQYXJhbWV0ZXIgdG9waWMgKCdnYXNDb25maWcnLCAnZ2FzUHJpY2VzJywgJ3ZtJywgJ3BvdycpXG4gICAgICogQHBhcmFtIG5hbWUgUGFyYW1ldGVyIG5hbWUgKGUuZy4gJ21pbkdhc0xpbWl0JyBmb3IgJ2dhc0NvbmZpZycgdG9waWMpXG4gICAgICogQHBhcmFtIGhhcmRmb3JrIEhhcmRmb3JrIG5hbWVcbiAgICAgKiBAcmV0dXJucyBUaGUgdmFsdWUgcmVxdWVzdGVkIG9yIGBCaWdJbnQoMClgIGlmIG5vdCBmb3VuZFxuICAgICAqL1xuICAgIHBhcmFtQnlIYXJkZm9yayh0b3BpYywgbmFtZSwgaGFyZGZvcmspIHtcbiAgICAgICAgbGV0IHZhbHVlID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBoZkNoYW5nZXMgb2YgdGhpcy5IQVJERk9SS19DSEFOR0VTKSB7XG4gICAgICAgICAgICAvLyBFSVAtcmVmZXJlbmNpbmcgSEYgY29uZmlnIChlLmcuIGZvciBiZXJsaW4pXG4gICAgICAgICAgICBpZiAoJ2VpcHMnIGluIGhmQ2hhbmdlc1sxXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhmRUlQcyA9IGhmQ2hhbmdlc1sxXVsnZWlwcyddO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWlwIG9mIGhmRUlQcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZUVJUCA9IHRoaXMucGFyYW1CeUVJUCh0b3BpYywgbmFtZSwgZWlwKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB0eXBlb2YgdmFsdWVFSVAgPT09ICdiaWdpbnQnID8gdmFsdWVFSVAgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUGFyYW1ldGVyLWlubGluaW5nIEhGIGNvbmZpZyAoZS5nLiBmb3IgaXN0YW5idWwpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaGZDaGFuZ2VzWzFdW3RvcGljXSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgIGhmQ2hhbmdlc1sxXVt0b3BpY11bbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGhmQ2hhbmdlc1sxXVt0b3BpY11bbmFtZV0udjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGZDaGFuZ2VzWzBdID09PSBoYXJkZm9yaylcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQmlnSW50KHZhbHVlID8/IDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcGFyYW1ldGVyIGNvcnJlc3BvbmRpbmcgdG8gYW4gRUlQXG4gICAgICogQHBhcmFtIHRvcGljIFBhcmFtZXRlciB0b3BpYyAoJ2dhc0NvbmZpZycsICdnYXNQcmljZXMnLCAndm0nLCAncG93JylcbiAgICAgKiBAcGFyYW0gbmFtZSBQYXJhbWV0ZXIgbmFtZSAoZS5nLiAnbWluR2FzTGltaXQnIGZvciAnZ2FzQ29uZmlnJyB0b3BpYylcbiAgICAgKiBAcGFyYW0gZWlwIE51bWJlciBvZiB0aGUgRUlQXG4gICAgICogQHJldHVybnMgVGhlIHZhbHVlIHJlcXVlc3RlZCBvciBgdW5kZWZpbmVkYCBpZiBub3QgZm91bmRcbiAgICAgKi9cbiAgICBwYXJhbUJ5RUlQKHRvcGljLCBuYW1lLCBlaXApIHtcbiAgICAgICAgaWYgKCEoZWlwIGluIEVJUHMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZWlwfSBub3Qgc3VwcG9ydGVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZWlwUGFyYW1zID0gRUlQc1tlaXBdO1xuICAgICAgICBpZiAoISh0b3BpYyBpbiBlaXBQYXJhbXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlaXBQYXJhbXNbdG9waWNdW25hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSBlaXBQYXJhbXNbdG9waWNdW25hbWVdLnY7XG4gICAgICAgIHJldHVybiBCaWdJbnQodmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcGFyYW1ldGVyIGZvciB0aGUgaGFyZGZvcmsgYWN0aXZlIG9uIGJsb2NrIG51bWJlciBvclxuICAgICAqIG9wdGlvbmFsIHByb3ZpZGVkIHRvdGFsIGRpZmZpY3VsdHkgKE1lcmdlIEhGKVxuICAgICAqIEBwYXJhbSB0b3BpYyBQYXJhbWV0ZXIgdG9waWNcbiAgICAgKiBAcGFyYW0gbmFtZSBQYXJhbWV0ZXIgbmFtZVxuICAgICAqIEBwYXJhbSBibG9ja051bWJlciBCbG9jayBudW1iZXJcbiAgICAgKiBAcGFyYW0gdGQgVG90YWwgZGlmZmljdWx0eVxuICAgICAqICAgICogQHJldHVybnMgVGhlIHZhbHVlIHJlcXVlc3RlZCBvciBgQmlnSW50KDApYCBpZiBub3QgZm91bmRcbiAgICAgKi9cbiAgICBwYXJhbUJ5QmxvY2sodG9waWMsIG5hbWUsIGJsb2NrTnVtYmVyLCB0ZCwgdGltZXN0YW1wKSB7XG4gICAgICAgIGNvbnN0IGhhcmRmb3JrID0gdGhpcy5nZXRIYXJkZm9ya0J5KHsgYmxvY2tOdW1iZXIsIHRkLCB0aW1lc3RhbXAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmFtQnlIYXJkZm9yayh0b3BpYywgbmFtZSwgaGFyZGZvcmspO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYW4gRUlQIGlzIGFjdGl2YXRlZCBieSBlaXRoZXIgYmVpbmcgaW5jbHVkZWQgaW4gdGhlIEVJUHNcbiAgICAgKiBtYW51YWxseSBwYXNzZWQgaW4gd2l0aCB0aGUge0BsaW5rIENvbW1vbk9wdHMuZWlwc30gb3IgaW4gYVxuICAgICAqIGhhcmRmb3JrIGN1cnJlbnRseSBiZWluZyBhY3RpdmVcbiAgICAgKlxuICAgICAqIE5vdGU6IHRoaXMgbWV0aG9kIG9ubHkgd29ya3MgZm9yIEVJUHMgYmVpbmcgc3VwcG9ydGVkXG4gICAgICogYnkgdGhlIHtAbGluayBDb21tb25PcHRzLmVpcHN9IGNvbnN0cnVjdG9yIG9wdGlvblxuICAgICAqIEBwYXJhbSBlaXBcbiAgICAgKi9cbiAgICBpc0FjdGl2YXRlZEVJUChlaXApIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2YXRlZEVJUHNDYWNoZS5pbmNsdWRlcyhlaXApKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBzZXQgb3IgcHJvdmlkZWQgaGFyZGZvcmsgaXMgYWN0aXZlIG9uIGJsb2NrIG51bWJlclxuICAgICAqIEBwYXJhbSBoYXJkZm9yayBIYXJkZm9yayBuYW1lIG9yIG51bGwgKGZvciBIRiBzZXQpXG4gICAgICogQHBhcmFtIGJsb2NrTnVtYmVyXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiBIRiBpcyBhY3RpdmUgb24gYmxvY2sgbnVtYmVyXG4gICAgICovXG4gICAgaGFyZGZvcmtJc0FjdGl2ZU9uQmxvY2soaGFyZGZvcmssIGJsb2NrTnVtYmVyKSB7XG4gICAgICAgIGJsb2NrTnVtYmVyID0gdG9UeXBlKGJsb2NrTnVtYmVyLCBUeXBlT3V0cHV0LkJpZ0ludCk7XG4gICAgICAgIGhhcmRmb3JrID0gaGFyZGZvcmsgPz8gdGhpcy5faGFyZGZvcms7XG4gICAgICAgIGNvbnN0IGhmQmxvY2sgPSB0aGlzLmhhcmRmb3JrQmxvY2soaGFyZGZvcmspO1xuICAgICAgICBpZiAodHlwZW9mIGhmQmxvY2sgPT09ICdiaWdpbnQnICYmIGhmQmxvY2sgIT09IEJJR0lOVF8wICYmIGJsb2NrTnVtYmVyID49IGhmQmxvY2spIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgdG8gaGFyZGZvcmtJc0FjdGl2ZU9uQmxvY2sgd2hlbiBoYXJkZm9yayBpcyBzZXRcbiAgICAgKiBAcGFyYW0gYmxvY2tOdW1iZXJcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIEhGIGlzIGFjdGl2ZSBvbiBibG9jayBudW1iZXJcbiAgICAgKi9cbiAgICBhY3RpdmVPbkJsb2NrKGJsb2NrTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhcmRmb3JrSXNBY3RpdmVPbkJsb2NrKG51bGwsIGJsb2NrTnVtYmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VxdWVuY2UgYmFzZWQgY2hlY2sgaWYgZ2l2ZW4gb3Igc2V0IEhGMSBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgSEYyXG4gICAgICogQHBhcmFtIGhhcmRmb3JrMSBIYXJkZm9yayBuYW1lIG9yIG51bGwgKGlmIHNldClcbiAgICAgKiBAcGFyYW0gaGFyZGZvcmsyIEhhcmRmb3JrIG5hbWVcbiAgICAgKiBAcGFyYW0gb3B0cyBIYXJkZm9yayBvcHRpb25zXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiBIRjEgZ3RlIEhGMlxuICAgICAqL1xuICAgIGhhcmRmb3JrR3RlSGFyZGZvcmsoaGFyZGZvcmsxLCBoYXJkZm9yazIpIHtcbiAgICAgICAgaGFyZGZvcmsxID0gaGFyZGZvcmsxID8/IHRoaXMuX2hhcmRmb3JrO1xuICAgICAgICBjb25zdCBoYXJkZm9ya3MgPSB0aGlzLmhhcmRmb3JrcygpO1xuICAgICAgICBsZXQgcG9zSGYxID0gLTEsIHBvc0hmMiA9IC0xO1xuICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGhmIG9mIGhhcmRmb3Jrcykge1xuICAgICAgICAgICAgaWYgKGhmWyduYW1lJ10gPT09IGhhcmRmb3JrMSlcbiAgICAgICAgICAgICAgICBwb3NIZjEgPSBpbmRleDtcbiAgICAgICAgICAgIGlmIChoZlsnbmFtZSddID09PSBoYXJkZm9yazIpXG4gICAgICAgICAgICAgICAgcG9zSGYyID0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3NIZjEgPj0gcG9zSGYyICYmIHBvc0hmMiAhPT0gLTE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzIHRvIGhhcmRmb3JrR3RlSGFyZGZvcmsgd2hlbiBoYXJkZm9yayBpcyBzZXRcbiAgICAgKiBAcGFyYW0gaGFyZGZvcmsgSGFyZGZvcmsgbmFtZVxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgaGFyZGZvcmsgc2V0IGlzIGdyZWF0ZXIgdGhhbiBoYXJkZm9yayBwcm92aWRlZFxuICAgICAqL1xuICAgIGd0ZUhhcmRmb3JrKGhhcmRmb3JrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhcmRmb3JrR3RlSGFyZGZvcmsobnVsbCwgaGFyZGZvcmspO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBoYXJkZm9yayBjaGFuZ2UgYmxvY2sgZm9yIGhhcmRmb3JrIHByb3ZpZGVkIG9yIHNldFxuICAgICAqIEBwYXJhbSBoYXJkZm9yayBIYXJkZm9yayBuYW1lLCBvcHRpb25hbCBpZiBIRiBzZXRcbiAgICAgKiBAcmV0dXJucyBCbG9jayBudW1iZXIgb3IgbnVsbCBpZiB1bnNjaGVkdWxlZFxuICAgICAqL1xuICAgIGhhcmRmb3JrQmxvY2soaGFyZGZvcmspIHtcbiAgICAgICAgaGFyZGZvcmsgPSBoYXJkZm9yayA/PyB0aGlzLl9oYXJkZm9yaztcbiAgICAgICAgY29uc3QgYmxvY2sgPSB0aGlzLl9nZXRIYXJkZm9yayhoYXJkZm9yayk/LlsnYmxvY2snXTtcbiAgICAgICAgaWYgKGJsb2NrID09PSB1bmRlZmluZWQgfHwgYmxvY2sgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCaWdJbnQoYmxvY2spO1xuICAgIH1cbiAgICBoYXJkZm9ya1RpbWVzdGFtcChoYXJkZm9yaykge1xuICAgICAgICBoYXJkZm9yayA9IGhhcmRmb3JrID8/IHRoaXMuX2hhcmRmb3JrO1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSB0aGlzLl9nZXRIYXJkZm9yayhoYXJkZm9yayk/LlsndGltZXN0YW1wJ107XG4gICAgICAgIGlmICh0aW1lc3RhbXAgPT09IHVuZGVmaW5lZCB8fCB0aW1lc3RhbXAgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCaWdJbnQodGltZXN0YW1wKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaGFyZGZvcmsgY2hhbmdlIGJsb2NrIGZvciBlaXBcbiAgICAgKiBAcGFyYW0gZWlwIEVJUCBudW1iZXJcbiAgICAgKiBAcmV0dXJucyBCbG9jayBudW1iZXIgb3IgbnVsbCBpZiB1bnNjaGVkdWxlZFxuICAgICAqL1xuICAgIGVpcEJsb2NrKGVpcCkge1xuICAgICAgICBmb3IgKGNvbnN0IGhmQ2hhbmdlcyBvZiB0aGlzLkhBUkRGT1JLX0NIQU5HRVMpIHtcbiAgICAgICAgICAgIGNvbnN0IGhmID0gaGZDaGFuZ2VzWzFdO1xuICAgICAgICAgICAgaWYgKCdlaXBzJyBpbiBoZikge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvc3RyaWN0LWJvb2xlYW4tZXhwcmVzc2lvbnNcbiAgICAgICAgICAgICAgICBpZiAoaGZbJ2VpcHMnXS5pbmNsdWRlcyhlaXApKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhhcmRmb3JrQmxvY2soaGZDaGFuZ2VzWzBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHNjaGVkdWxlZCB0aW1lc3RhbXAgb2YgdGhlIEVJUCAoaWYgc2NoZWR1bGVkIGFuZCBzY2hlZHVsZWQgYnkgdGltZXN0YW1wKVxuICAgICAqIEBwYXJhbSBlaXAgRUlQIG51bWJlclxuICAgICAqIEByZXR1cm5zIFNjaGVkdWxlZCB0aW1lc3RhbXAuIElmIHRoaXMgRUlQIGlzIHVuc2NoZWR1bGVkLCBvciB0aGUgRUlQIGlzIHNjaGVkdWxlZCBieSBibG9jayBudW1iZXIgb3IgdHRkLCB0aGVuIGl0IHJldHVybnMgYG51bGxgLlxuICAgICAqL1xuICAgIGVpcFRpbWVzdGFtcChlaXApIHtcbiAgICAgICAgZm9yIChjb25zdCBoZkNoYW5nZXMgb2YgdGhpcy5IQVJERk9SS19DSEFOR0VTKSB7XG4gICAgICAgICAgICBjb25zdCBoZiA9IGhmQ2hhbmdlc1sxXTtcbiAgICAgICAgICAgIGlmICgnZWlwcycgaW4gaGYpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3N0cmljdC1ib29sZWFuLWV4cHJlc3Npb25zXG4gICAgICAgICAgICAgICAgaWYgKGhmWydlaXBzJ10uaW5jbHVkZXMoZWlwKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5oYXJkZm9ya1RpbWVzdGFtcChoZkNoYW5nZXNbMF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaGFyZGZvcmsgY2hhbmdlIHRvdGFsIGRpZmZpY3VsdHkgKE1lcmdlIEhGKSBmb3IgaGFyZGZvcmsgcHJvdmlkZWQgb3Igc2V0XG4gICAgICogQHBhcmFtIGhhcmRmb3JrIEhhcmRmb3JrIG5hbWUsIG9wdGlvbmFsIGlmIEhGIHNldFxuICAgICAqIEByZXR1cm5zIFRvdGFsIGRpZmZpY3VsdHkgb3IgbnVsbCBpZiBubyBzZXRcbiAgICAgKi9cbiAgICBoYXJkZm9ya1RURChoYXJkZm9yaykge1xuICAgICAgICBoYXJkZm9yayA9IGhhcmRmb3JrID8/IHRoaXMuX2hhcmRmb3JrO1xuICAgICAgICBjb25zdCB0dGQgPSB0aGlzLl9nZXRIYXJkZm9yayhoYXJkZm9yayk/LlsndHRkJ107XG4gICAgICAgIGlmICh0dGQgPT09IHVuZGVmaW5lZCB8fCB0dGQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCaWdJbnQodHRkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY2hhbmdlIGJsb2NrIGZvciB0aGUgbmV4dCBoYXJkZm9yayBhZnRlciB0aGUgaGFyZGZvcmsgcHJvdmlkZWQgb3Igc2V0XG4gICAgICogQHBhcmFtIGhhcmRmb3JrIEhhcmRmb3JrIG5hbWUsIG9wdGlvbmFsIGlmIEhGIHNldFxuICAgICAqIEByZXR1cm5zIEJsb2NrIHRpbWVzdGFtcCwgbnVtYmVyIG9yIG51bGwgaWYgbm90IGF2YWlsYWJsZVxuICAgICAqL1xuICAgIG5leHRIYXJkZm9ya0Jsb2NrT3JUaW1lc3RhbXAoaGFyZGZvcmspIHtcbiAgICAgICAgaGFyZGZvcmsgPSBoYXJkZm9yayA/PyB0aGlzLl9oYXJkZm9yaztcbiAgICAgICAgY29uc3QgaGZzID0gdGhpcy5oYXJkZm9ya3MoKTtcbiAgICAgICAgbGV0IGhmSW5kZXggPSBoZnMuZmluZEluZGV4KChoZikgPT4gaGYubmFtZSA9PT0gaGFyZGZvcmspO1xuICAgICAgICAvLyBJZiB0aGUgY3VycmVudCBoYXJkZm9yayBpcyBtZXJnZSwgZ28gb25lIGJlaGluZCBhcyBtZXJnZSBoZiBpcyBub3QgcGFydCBvZiB0aGVzZVxuICAgICAgICAvLyBjYWxjcyBldmVuIGlmIHRoZSBtZXJnZSBoZiBibG9jayBpcyBzZXRcbiAgICAgICAgaWYgKGhhcmRmb3JrID09PSBIYXJkZm9yay5QYXJpcykge1xuICAgICAgICAgICAgaGZJbmRleCAtPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhhcmRmb3JrIG5vdCBmb3VuZFxuICAgICAgICBpZiAoaGZJbmRleCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjdXJySGZUaW1lT3JCbG9jayA9IGhmc1toZkluZGV4XS50aW1lc3RhbXAgPz8gaGZzW2hmSW5kZXhdLmJsb2NrO1xuICAgICAgICBjdXJySGZUaW1lT3JCbG9jayA9XG4gICAgICAgICAgICBjdXJySGZUaW1lT3JCbG9jayAhPT0gbnVsbCAmJiBjdXJySGZUaW1lT3JCbG9jayAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBOdW1iZXIoY3VyckhmVGltZU9yQmxvY2spXG4gICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICBjb25zdCBuZXh0SGYgPSBoZnMuc2xpY2UoaGZJbmRleCArIDEpLmZpbmQoKGhmKSA9PiB7XG4gICAgICAgICAgICBsZXQgaGZUaW1lT3JCbG9jayA9IGhmLnRpbWVzdGFtcCA/PyBoZi5ibG9jaztcbiAgICAgICAgICAgIGhmVGltZU9yQmxvY2sgPVxuICAgICAgICAgICAgICAgIGhmVGltZU9yQmxvY2sgIT09IG51bGwgJiYgaGZUaW1lT3JCbG9jayAhPT0gdW5kZWZpbmVkID8gTnVtYmVyKGhmVGltZU9yQmxvY2spIDogbnVsbDtcbiAgICAgICAgICAgIHJldHVybiAoaGYubmFtZSAhPT0gSGFyZGZvcmsuUGFyaXMgJiZcbiAgICAgICAgICAgICAgICBoZlRpbWVPckJsb2NrICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgaGZUaW1lT3JCbG9jayAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgaGZUaW1lT3JCbG9jayAhPT0gY3VyckhmVGltZU9yQmxvY2spO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gSWYgbm8gbmV4dCBoZiBmb3VuZCB3aXRoIHZhbGlkIGJsb2NrIG9yIHRpbWVzdGFtcCByZXR1cm4gbnVsbFxuICAgICAgICBpZiAobmV4dEhmID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5leHRIZkJsb2NrID0gbmV4dEhmLnRpbWVzdGFtcCA/PyBuZXh0SGYuYmxvY2s7XG4gICAgICAgIGlmIChuZXh0SGZCbG9jayA9PT0gbnVsbCB8fCBuZXh0SGZCbG9jayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQmlnSW50KG5leHRIZkJsb2NrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgaGVscGVyIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSBhIGZvcmsgaGFzaFxuICAgICAqIEBwYXJhbSBoYXJkZm9yayBIYXJkZm9yayBuYW1lXG4gICAgICogQHBhcmFtIGdlbmVzaXNIYXNoIEdlbmVzaXMgYmxvY2sgaGFzaCBvZiB0aGUgY2hhaW5cbiAgICAgKiBAcmV0dXJucyBGb3JrIGhhc2ggYXMgaGV4IHN0cmluZ1xuICAgICAqL1xuICAgIF9jYWxjRm9ya0hhc2goaGFyZGZvcmssIGdlbmVzaXNIYXNoKSB7XG4gICAgICAgIGxldCBoZkJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gICAgICAgIGxldCBwcmV2QmxvY2tPclRpbWUgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGhmIG9mIHRoaXMuaGFyZGZvcmtzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgYmxvY2ssIHRpbWVzdGFtcCwgbmFtZSB9ID0gaGY7XG4gICAgICAgICAgICAvLyBUaW1lc3RhbXAgdG8gYmUgdXNlZCBmb3IgdGltZXN0YW1wIGJhc2VkIGhmcyBldmVuIGlmIHdlIG1heSBidW5kbGVcbiAgICAgICAgICAgIC8vIGJsb2NrIG51bWJlciB3aXRoIHRoZW0gcmV0cm9zcGVjdGl2ZWx5XG4gICAgICAgICAgICBsZXQgYmxvY2tPclRpbWUgPSB0aW1lc3RhbXAgPz8gYmxvY2s7XG4gICAgICAgICAgICBibG9ja09yVGltZSA9IGJsb2NrT3JUaW1lICE9PSBudWxsID8gTnVtYmVyKGJsb2NrT3JUaW1lKSA6IG51bGw7XG4gICAgICAgICAgICAvLyBTa2lwIGZvciBjaGFpbnN0YXJ0ICgwKSwgbm90IGFwcGxpZWQgSEZzIChudWxsKSBhbmRcbiAgICAgICAgICAgIC8vIHdoZW4gYWxyZWFkeSBhcHBsaWVkIG9uIHNhbWUgYmxvY2tPclRpbWUgSEZzXG4gICAgICAgICAgICAvLyBhbmQgb24gdGhlIG1lcmdlIHNpbmNlIGZvcmtoYXNoIGRvZXNuJ3QgY2hhbmdlIG9uIG1lcmdlIGhmXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJsb2NrT3JUaW1lID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgICAgICAgIGJsb2NrT3JUaW1lICE9PSAwICYmXG4gICAgICAgICAgICAgICAgYmxvY2tPclRpbWUgIT09IHByZXZCbG9ja09yVGltZSAmJlxuICAgICAgICAgICAgICAgIG5hbWUgIT09IEhhcmRmb3JrLlBhcmlzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGZCbG9ja0J5dGVzID0gaGV4VG9CeXRlcyhgMHgke2Jsb2NrT3JUaW1lLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgxNiwgJzAnKX1gKTtcbiAgICAgICAgICAgICAgICBoZkJ5dGVzID0gY29uY2F0Qnl0ZXMoaGZCeXRlcywgaGZCbG9ja0J5dGVzKTtcbiAgICAgICAgICAgICAgICBwcmV2QmxvY2tPclRpbWUgPSBibG9ja09yVGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoZi5uYW1lID09PSBoYXJkZm9yaylcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnB1dEJ5dGVzID0gY29uY2F0Qnl0ZXMoZ2VuZXNpc0hhc2gsIGhmQnl0ZXMpO1xuICAgICAgICAvLyBDUkMzMiBkZWxpdmVycyByZXN1bHQgYXMgc2lnbmVkIChuZWdhdGl2ZSkgMzItYml0IGludGVnZXIsXG4gICAgICAgIC8vIGNvbnZlcnQgdG8gaGV4IHN0cmluZ1xuICAgICAgICBjb25zdCBmb3JraGFzaCA9IGJ5dGVzVG9IZXgoaW50VG9CeXRlcyhjcmMzMihpbnB1dEJ5dGVzKSA+Pj4gMCkpO1xuICAgICAgICByZXR1cm4gZm9ya2hhc2g7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gZXRoLzY0IGNvbXBsaWFudCBmb3JrIGhhc2ggKEVJUC0yMTI0KVxuICAgICAqIEBwYXJhbSBoYXJkZm9yayBIYXJkZm9yayBuYW1lLCBvcHRpb25hbCBpZiBIRiBzZXRcbiAgICAgKiBAcGFyYW0gZ2VuZXNpc0hhc2ggR2VuZXNpcyBibG9jayBoYXNoIG9mIHRoZSBjaGFpbiwgb3B0aW9uYWwgaWYgYWxyZWFkeSBkZWZpbmVkIGFuZCBub3QgbmVlZGVkIHRvIGJlIGNhbGN1bGF0ZWRcbiAgICAgKi9cbiAgICBmb3JrSGFzaChoYXJkZm9yaywgZ2VuZXNpc0hhc2gpIHtcbiAgICAgICAgaGFyZGZvcmsgPSBoYXJkZm9yayA/PyB0aGlzLl9oYXJkZm9yaztcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2dldEhhcmRmb3JrKGhhcmRmb3JrKTtcbiAgICAgICAgaWYgKGRhdGEgPT09IG51bGwgfHxcbiAgICAgICAgICAgIChkYXRhPy5ibG9jayA9PT0gbnVsbCAmJiBkYXRhPy50aW1lc3RhbXAgPT09IHVuZGVmaW5lZCAmJiBkYXRhPy50dGQgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9ICdObyBmb3JrIGhhc2ggY2FsY3VsYXRpb24gcG9zc2libGUgZm9yIGZ1dHVyZSBoYXJkZm9yayc7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YT8uZm9ya0hhc2ggIT09IG51bGwgJiYgZGF0YT8uZm9ya0hhc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEuZm9ya0hhc2g7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFnZW5lc2lzSGFzaClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZ2VuZXNpc0hhc2ggcmVxdWlyZWQgZm9yIGZvcmtIYXNoIGNhbGN1bGF0aW9uJyk7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWxjRm9ya0hhc2goaGFyZGZvcmssIGdlbmVzaXNIYXNoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZm9ya0hhc2ggRm9yayBoYXNoIGFzIGEgaGV4IHN0cmluZ1xuICAgICAqIEByZXR1cm5zIEFycmF5IHdpdGggaGFyZGZvcmsgZGF0YSAobmFtZSwgYmxvY2ssIGZvcmtIYXNoKVxuICAgICAqL1xuICAgIGhhcmRmb3JrRm9yRm9ya0hhc2goZm9ya0hhc2gpIHtcbiAgICAgICAgY29uc3QgcmVzQXJyYXkgPSB0aGlzLmhhcmRmb3JrcygpLmZpbHRlcigoaGYpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBoZi5mb3JrSGFzaCA9PT0gZm9ya0hhc2g7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzQXJyYXkubGVuZ3RoID49IDEgPyByZXNBcnJheVtyZXNBcnJheS5sZW5ndGggLSAxXSA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYW55IG1pc3NpbmcgZm9ya0hhc2hlcyBvbiB0aGUgcGFzc2VkLWluIHtAbGluayBDb21tb259IGluc3RhbmNlXG4gICAgICogQHBhcmFtIGNvbW1vbiBUaGUge0BsaW5rIENvbW1vbn0gdG8gc2V0IHRoZSBmb3JrSGFzaGVzIGZvclxuICAgICAqIEBwYXJhbSBnZW5lc2lzSGFzaCBUaGUgZ2VuZXNpcyBibG9jayBoYXNoXG4gICAgICovXG4gICAgc2V0Rm9ya0hhc2hlcyhnZW5lc2lzSGFzaCkge1xuICAgICAgICBmb3IgKGNvbnN0IGhmIG9mIHRoaXMuaGFyZGZvcmtzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrT3JUaW1lID0gaGYudGltZXN0YW1wID8/IGhmLmJsb2NrO1xuICAgICAgICAgICAgaWYgKChoZi5mb3JrSGFzaCA9PT0gbnVsbCB8fCBoZi5mb3JrSGFzaCA9PT0gdW5kZWZpbmVkKSAmJlxuICAgICAgICAgICAgICAgICgoYmxvY2tPclRpbWUgIT09IG51bGwgJiYgYmxvY2tPclRpbWUgIT09IHVuZGVmaW5lZCkgfHwgdHlwZW9mIGhmLnR0ZCAhPT0gJ3VuZGVmaW5lZCcpKSB7XG4gICAgICAgICAgICAgICAgaGYuZm9ya0hhc2ggPSB0aGlzLmZvcmtIYXNoKGhmLm5hbWUsIGdlbmVzaXNIYXNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBHZW5lc2lzIHBhcmFtZXRlcnMgb2YgdGhlIGN1cnJlbnQgY2hhaW5cbiAgICAgKiBAcmV0dXJucyBHZW5lc2lzIGRpY3Rpb25hcnlcbiAgICAgKi9cbiAgICBnZW5lc2lzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hhaW5QYXJhbXMuZ2VuZXNpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaGFyZGZvcmtzIGZvciBjdXJyZW50IGNoYWluXG4gICAgICogQHJldHVybnMge0FycmF5fSBBcnJheSB3aXRoIGFycmF5cyBvZiBoYXJkZm9ya3NcbiAgICAgKi9cbiAgICBoYXJkZm9ya3MoKSB7XG4gICAgICAgIGNvbnN0IGhmcyA9IHRoaXMuX2NoYWluUGFyYW1zLmhhcmRmb3JrcztcbiAgICAgICAgaWYgKHRoaXMuX2NoYWluUGFyYW1zLmN1c3RvbUhhcmRmb3JrcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGFpblBhcmFtcy5jdXN0b21IYXJkZm9ya3M7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhmcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBib290c3RyYXAgbm9kZXMgZm9yIHRoZSBjdXJyZW50IGNoYWluXG4gICAgICogQHJldHVybnMge0RpY3Rpb25hcnl9IERpY3Qgd2l0aCBib290c3RyYXAgbm9kZXNcbiAgICAgKi9cbiAgICBib290c3RyYXBOb2RlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoYWluUGFyYW1zLmJvb3RzdHJhcE5vZGVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIEROUyBuZXR3b3JrcyBmb3IgdGhlIGN1cnJlbnQgY2hhaW5cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nW119IEFycmF5IG9mIEROUyBFTlIgdXJsc1xuICAgICAqL1xuICAgIGRuc05ldHdvcmtzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hhaW5QYXJhbXMuZG5zTmV0d29ya3M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGhhcmRmb3JrIHNldFxuICAgICAqIEByZXR1cm5zIEhhcmRmb3JrIG5hbWVcbiAgICAgKi9cbiAgICBoYXJkZm9yaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhcmRmb3JrO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBJZCBvZiBjdXJyZW50IGNoYWluXG4gICAgICogQHJldHVybnMgY2hhaW4gSWRcbiAgICAgKi9cbiAgICBjaGFpbklkKCkge1xuICAgICAgICByZXR1cm4gQmlnSW50KHRoaXMuX2NoYWluUGFyYW1zLmNoYWluSWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuYW1lIG9mIGN1cnJlbnQgY2hhaW5cbiAgICAgKiBAcmV0dXJucyBjaGFpbiBuYW1lIChsb3dlciBjYXNlKVxuICAgICAqL1xuICAgIGNoYWluTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoYWluUGFyYW1zLm5hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIElkIG9mIGN1cnJlbnQgbmV0d29ya1xuICAgICAqIEByZXR1cm5zIG5ldHdvcmsgSWRcbiAgICAgKi9cbiAgICBuZXR3b3JrSWQoKSB7XG4gICAgICAgIHJldHVybiBCaWdJbnQodGhpcy5fY2hhaW5QYXJhbXMubmV0d29ya0lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWRkaXRpb25hbGx5IGFjdGl2YXRlZCBFSVBzXG4gICAgICogKGJ5IHVzaW5nIHRoZSBgZWlwc2AgY29uc3RydWN0b3Igb3B0aW9uKVxuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgRUlQc1xuICAgICAqL1xuICAgIGVpcHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9laXBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb25zZW5zdXMgdHlwZSBvZiB0aGUgbmV0d29ya1xuICAgICAqIFBvc3NpYmxlIHZhbHVlczogXCJwb3dcInxcInBvYVwifFwicG9zXCJcbiAgICAgKlxuICAgICAqIE5vdGU6IFRoaXMgdmFsdWUgY2FuIHVwZGF0ZSBhbG9uZyBhIEhhcmRmb3JrLlxuICAgICAqL1xuICAgIGNvbnNlbnN1c1R5cGUoKSB7XG4gICAgICAgIGNvbnN0IGhhcmRmb3JrID0gdGhpcy5oYXJkZm9yaygpO1xuICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgIGZvciAoY29uc3QgaGZDaGFuZ2VzIG9mIHRoaXMuSEFSREZPUktfQ0hBTkdFUykge1xuICAgICAgICAgICAgaWYgKCdjb25zZW5zdXMnIGluIGhmQ2hhbmdlc1sxXSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gaGZDaGFuZ2VzWzFdWydjb25zZW5zdXMnXVsndHlwZSddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhmQ2hhbmdlc1swXSA9PT0gaGFyZGZvcmspXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlID8/IHRoaXMuX2NoYWluUGFyYW1zWydjb25zZW5zdXMnXVsndHlwZSddO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb25jcmV0ZSBjb25zZW5zdXMgaW1wbGVtZW50YXRpb25cbiAgICAgKiBhbGdvcml0aG0gb3IgcHJvdG9jb2wgZm9yIHRoZSBuZXR3b3JrXG4gICAgICogZS5nLiBcImV0aGFzaFwiIGZvciBcInBvd1wiIGNvbnNlbnN1cyB0eXBlLFxuICAgICAqIFwiY2xpcXVlXCIgZm9yIFwicG9hXCIgY29uc2Vuc3VzIHR5cGUgb3JcbiAgICAgKiBcImNhc3BlclwiIGZvciBcInBvc1wiIGNvbnNlbnN1cyB0eXBlLlxuICAgICAqXG4gICAgICogTm90ZTogVGhpcyB2YWx1ZSBjYW4gdXBkYXRlIGFsb25nIGEgSGFyZGZvcmsuXG4gICAgICovXG4gICAgY29uc2Vuc3VzQWxnb3JpdGhtKCkge1xuICAgICAgICBjb25zdCBoYXJkZm9yayA9IHRoaXMuaGFyZGZvcmsoKTtcbiAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICBmb3IgKGNvbnN0IGhmQ2hhbmdlcyBvZiB0aGlzLkhBUkRGT1JLX0NIQU5HRVMpIHtcbiAgICAgICAgICAgIGlmICgnY29uc2Vuc3VzJyBpbiBoZkNoYW5nZXNbMV0pIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGhmQ2hhbmdlc1sxXVsnY29uc2Vuc3VzJ11bJ2FsZ29yaXRobSddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhmQ2hhbmdlc1swXSA9PT0gaGFyZGZvcmspXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlID8/IHRoaXMuX2NoYWluUGFyYW1zWydjb25zZW5zdXMnXVsnYWxnb3JpdGhtJ107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBkaWN0aW9uYXJ5IHdpdGggY29uc2Vuc3VzIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBwYXJhbWV0ZXJzIGJhc2VkIG9uIHRoZSBjb25zZW5zdXMgYWxnb3JpdGhtXG4gICAgICpcbiAgICAgKiBFeHBlY3RlZCByZXR1cm5zIChwYXJhbWV0ZXJzIG11c3QgYmUgcHJlc2VudCBpblxuICAgICAqIHRoZSByZXNwZWN0aXZlIGNoYWluIGpzb24gZmlsZXMpOlxuICAgICAqXG4gICAgICogZXRoYXNoOiBlbXB0eSBvYmplY3RcbiAgICAgKiBjbGlxdWU6IHBlcmlvZCwgZXBvY2hcbiAgICAgKiBjYXNwZXI6IGVtcHR5IG9iamVjdFxuICAgICAqXG4gICAgICogTm90ZTogVGhpcyB2YWx1ZSBjYW4gdXBkYXRlIGFsb25nIGEgSGFyZGZvcmsuXG4gICAgICovXG4gICAgY29uc2Vuc3VzQ29uZmlnKCkge1xuICAgICAgICBjb25zdCBoYXJkZm9yayA9IHRoaXMuaGFyZGZvcmsoKTtcbiAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICBmb3IgKGNvbnN0IGhmQ2hhbmdlcyBvZiB0aGlzLkhBUkRGT1JLX0NIQU5HRVMpIHtcbiAgICAgICAgICAgIGlmICgnY29uc2Vuc3VzJyBpbiBoZkNoYW5nZXNbMV0pIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgY29uZmlnIHBhcmFtZXRlciBpcyBuYW1lZCBhZnRlciB0aGUgcmVzcGVjdGl2ZSBjb25zZW5zdXMgYWxnb3JpdGhtXG4gICAgICAgICAgICAgICAgY29uc3QgY29uZmlnID0gaGZDaGFuZ2VzWzFdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFsZ29yaXRobSA9IGNvbmZpZ1snY29uc2Vuc3VzJ11bJ2FsZ29yaXRobSddO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gY29uZmlnWydjb25zZW5zdXMnXVthbGdvcml0aG1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhmQ2hhbmdlc1swXSA9PT0gaGFyZGZvcmspXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh2YWx1ZSA/PyB0aGlzLl9jaGFpblBhcmFtc1snY29uc2Vuc3VzJ11bdGhpcy5jb25zZW5zdXNBbGdvcml0aG0oKV0gPz8ge30pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgZGVlcCBjb3B5IG9mIHRoaXMge0BsaW5rIENvbW1vbn0gaW5zdGFuY2UuXG4gICAgICovXG4gICAgY29weSgpIHtcbiAgICAgICAgY29uc3QgY29weSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykpLCB0aGlzKTtcbiAgICAgICAgY29weS5ldmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0SW5pdGlhbGl6ZWRDaGFpbnMoY3VzdG9tQ2hhaW5zKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgW25hbWUsIGlkXSBvZiBPYmplY3QuZW50cmllcyhDaGFpbikpIHtcbiAgICAgICAgICAgIG5hbWVzW2lkXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFpbnMgPSB7IC4uLkNIQUlOX1NQRUNTIH07XG4gICAgICAgIGlmIChjdXN0b21DaGFpbnMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2hhaW4gb2YgY3VzdG9tQ2hhaW5zKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBjaGFpbjtcbiAgICAgICAgICAgICAgICBuYW1lc1tjaGFpbi5jaGFpbklkLnRvU3RyaW5nKCldID0gbmFtZTtcbiAgICAgICAgICAgICAgICBjaGFpbnNbbmFtZV0gPSBjaGFpbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjaGFpbnMubmFtZXMgPSBuYW1lcztcbiAgICAgICAgcmV0dXJuIGNoYWlucztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/common.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/crc.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ethereumjs/common/dist/esm/crc.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crc32: function() { return /* binding */ crc32; }\n/* harmony export */ });\n/**\n * This code was duplicated from https://github.com/alexgorbatchev/crc/ under MIT license.\n * The code below is copied largely unmodified from the below file\n * https://github.com/alexgorbatchev/crc/blob/31fc3853e417b5fb5ec83335428805842575f699/src/calculators/crc32.ts\n */\nlet TABLE = [\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\n    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\n    0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\n    0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\n    0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,\n    0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,\n    0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\n    0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,\n    0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\n    0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,\n    0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\n    0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\n    0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,\n    0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,\n    0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\n    0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,\n    0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\n    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crc = (current, previous) => {\n    let crc = previous === 0 ? 0 : ~~previous ^ -1;\n    for (let index = 0; index < current.length; index++) {\n        crc = TABLE[(crc ^ current[index]) & 0xff] ^ (crc >>> 8);\n    }\n    return crc ^ -1;\n};\nconst crc32 = (current, previous) => {\n    return crc(current, previous) >>> 0;\n};\n//# sourceMappingURL=crc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vY3JjLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vY3JjLmpzP2MzYmEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGNvZGUgd2FzIGR1cGxpY2F0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWxleGdvcmJhdGNoZXYvY3JjLyB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBjb2RlIGJlbG93IGlzIGNvcGllZCBsYXJnZWx5IHVubW9kaWZpZWQgZnJvbSB0aGUgYmVsb3cgZmlsZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2FsZXhnb3JiYXRjaGV2L2NyYy9ibG9iLzMxZmMzODUzZTQxN2I1ZmI1ZWM4MzMzNTQyODgwNTg0MjU3NWY2OTkvc3JjL2NhbGN1bGF0b3JzL2NyYzMyLnRzXG4gKi9cbmxldCBUQUJMRSA9IFtcbiAgICAweDAwMDAwMDAwLCAweDc3MDczMDk2LCAweGVlMGU2MTJjLCAweDk5MDk1MWJhLCAweDA3NmRjNDE5LCAweDcwNmFmNDhmLCAweGU5NjNhNTM1LCAweDllNjQ5NWEzLFxuICAgIDB4MGVkYjg4MzIsIDB4NzlkY2I4YTQsIDB4ZTBkNWU5MWUsIDB4OTdkMmQ5ODgsIDB4MDliNjRjMmIsIDB4N2ViMTdjYmQsIDB4ZTdiODJkMDcsIDB4OTBiZjFkOTEsXG4gICAgMHgxZGI3MTA2NCwgMHg2YWIwMjBmMiwgMHhmM2I5NzE0OCwgMHg4NGJlNDFkZSwgMHgxYWRhZDQ3ZCwgMHg2ZGRkZTRlYiwgMHhmNGQ0YjU1MSwgMHg4M2QzODVjNyxcbiAgICAweDEzNmM5ODU2LCAweDY0NmJhOGMwLCAweGZkNjJmOTdhLCAweDhhNjVjOWVjLCAweDE0MDE1YzRmLCAweDYzMDY2Y2Q5LCAweGZhMGYzZDYzLCAweDhkMDgwZGY1LFxuICAgIDB4M2I2ZTIwYzgsIDB4NGM2OTEwNWUsIDB4ZDU2MDQxZTQsIDB4YTI2NzcxNzIsIDB4M2MwM2U0ZDEsIDB4NGIwNGQ0NDcsIDB4ZDIwZDg1ZmQsIDB4YTUwYWI1NmIsXG4gICAgMHgzNWI1YThmYSwgMHg0MmIyOTg2YywgMHhkYmJiYzlkNiwgMHhhY2JjZjk0MCwgMHgzMmQ4NmNlMywgMHg0NWRmNWM3NSwgMHhkY2Q2MGRjZiwgMHhhYmQxM2Q1OSxcbiAgICAweDI2ZDkzMGFjLCAweDUxZGUwMDNhLCAweGM4ZDc1MTgwLCAweGJmZDA2MTE2LCAweDIxYjRmNGI1LCAweDU2YjNjNDIzLCAweGNmYmE5NTk5LCAweGI4YmRhNTBmLFxuICAgIDB4MjgwMmI4OWUsIDB4NWYwNTg4MDgsIDB4YzYwY2Q5YjIsIDB4YjEwYmU5MjQsIDB4MmY2ZjdjODcsIDB4NTg2ODRjMTEsIDB4YzE2MTFkYWIsIDB4YjY2NjJkM2QsXG4gICAgMHg3NmRjNDE5MCwgMHgwMWRiNzEwNiwgMHg5OGQyMjBiYywgMHhlZmQ1MTAyYSwgMHg3MWIxODU4OSwgMHgwNmI2YjUxZiwgMHg5ZmJmZTRhNSwgMHhlOGI4ZDQzMyxcbiAgICAweDc4MDdjOWEyLCAweDBmMDBmOTM0LCAweDk2MDlhODhlLCAweGUxMGU5ODE4LCAweDdmNmEwZGJiLCAweDA4NmQzZDJkLCAweDkxNjQ2Yzk3LCAweGU2NjM1YzAxLFxuICAgIDB4NmI2YjUxZjQsIDB4MWM2YzYxNjIsIDB4ODU2NTMwZDgsIDB4ZjI2MjAwNGUsIDB4NmMwNjk1ZWQsIDB4MWIwMWE1N2IsIDB4ODIwOGY0YzEsIDB4ZjUwZmM0NTcsXG4gICAgMHg2NWIwZDljNiwgMHgxMmI3ZTk1MCwgMHg4YmJlYjhlYSwgMHhmY2I5ODg3YywgMHg2MmRkMWRkZiwgMHgxNWRhMmQ0OSwgMHg4Y2QzN2NmMywgMHhmYmQ0NGM2NSxcbiAgICAweDRkYjI2MTU4LCAweDNhYjU1MWNlLCAweGEzYmMwMDc0LCAweGQ0YmIzMGUyLCAweDRhZGZhNTQxLCAweDNkZDg5NWQ3LCAweGE0ZDFjNDZkLCAweGQzZDZmNGZiLFxuICAgIDB4NDM2OWU5NmEsIDB4MzQ2ZWQ5ZmMsIDB4YWQ2Nzg4NDYsIDB4ZGE2MGI4ZDAsIDB4NDQwNDJkNzMsIDB4MzMwMzFkZTUsIDB4YWEwYTRjNWYsIDB4ZGQwZDdjYzksXG4gICAgMHg1MDA1NzEzYywgMHgyNzAyNDFhYSwgMHhiZTBiMTAxMCwgMHhjOTBjMjA4NiwgMHg1NzY4YjUyNSwgMHgyMDZmODViMywgMHhiOTY2ZDQwOSwgMHhjZTYxZTQ5ZixcbiAgICAweDVlZGVmOTBlLCAweDI5ZDljOTk4LCAweGIwZDA5ODIyLCAweGM3ZDdhOGI0LCAweDU5YjMzZDE3LCAweDJlYjQwZDgxLCAweGI3YmQ1YzNiLCAweGMwYmE2Y2FkLFxuICAgIDB4ZWRiODgzMjAsIDB4OWFiZmIzYjYsIDB4MDNiNmUyMGMsIDB4NzRiMWQyOWEsIDB4ZWFkNTQ3MzksIDB4OWRkMjc3YWYsIDB4MDRkYjI2MTUsIDB4NzNkYzE2ODMsXG4gICAgMHhlMzYzMGIxMiwgMHg5NDY0M2I4NCwgMHgwZDZkNmEzZSwgMHg3YTZhNWFhOCwgMHhlNDBlY2YwYiwgMHg5MzA5ZmY5ZCwgMHgwYTAwYWUyNywgMHg3ZDA3OWViMSxcbiAgICAweGYwMGY5MzQ0LCAweDg3MDhhM2QyLCAweDFlMDFmMjY4LCAweDY5MDZjMmZlLCAweGY3NjI1NzVkLCAweDgwNjU2N2NiLCAweDE5NmMzNjcxLCAweDZlNmIwNmU3LFxuICAgIDB4ZmVkNDFiNzYsIDB4ODlkMzJiZTAsIDB4MTBkYTdhNWEsIDB4NjdkZDRhY2MsIDB4ZjliOWRmNmYsIDB4OGViZWVmZjksIDB4MTdiN2JlNDMsIDB4NjBiMDhlZDUsXG4gICAgMHhkNmQ2YTNlOCwgMHhhMWQxOTM3ZSwgMHgzOGQ4YzJjNCwgMHg0ZmRmZjI1MiwgMHhkMWJiNjdmMSwgMHhhNmJjNTc2NywgMHgzZmI1MDZkZCwgMHg0OGIyMzY0YixcbiAgICAweGQ4MGQyYmRhLCAweGFmMGExYjRjLCAweDM2MDM0YWY2LCAweDQxMDQ3YTYwLCAweGRmNjBlZmMzLCAweGE4NjdkZjU1LCAweDMxNmU4ZWVmLCAweDQ2NjliZTc5LFxuICAgIDB4Y2I2MWIzOGMsIDB4YmM2NjgzMWEsIDB4MjU2ZmQyYTAsIDB4NTI2OGUyMzYsIDB4Y2MwYzc3OTUsIDB4YmIwYjQ3MDMsIDB4MjIwMjE2YjksIDB4NTUwNTI2MmYsXG4gICAgMHhjNWJhM2JiZSwgMHhiMmJkMGIyOCwgMHgyYmI0NWE5MiwgMHg1Y2IzNmEwNCwgMHhjMmQ3ZmZhNywgMHhiNWQwY2YzMSwgMHgyY2Q5OWU4YiwgMHg1YmRlYWUxZCxcbiAgICAweDliNjRjMmIwLCAweGVjNjNmMjI2LCAweDc1NmFhMzljLCAweDAyNmQ5MzBhLCAweDljMDkwNmE5LCAweGViMGUzNjNmLCAweDcyMDc2Nzg1LCAweDA1MDA1NzEzLFxuICAgIDB4OTViZjRhODIsIDB4ZTJiODdhMTQsIDB4N2JiMTJiYWUsIDB4MGNiNjFiMzgsIDB4OTJkMjhlOWIsIDB4ZTVkNWJlMGQsIDB4N2NkY2VmYjcsIDB4MGJkYmRmMjEsXG4gICAgMHg4NmQzZDJkNCwgMHhmMWQ0ZTI0MiwgMHg2OGRkYjNmOCwgMHgxZmRhODM2ZSwgMHg4MWJlMTZjZCwgMHhmNmI5MjY1YiwgMHg2ZmIwNzdlMSwgMHgxOGI3NDc3NyxcbiAgICAweDg4MDg1YWU2LCAweGZmMGY2YTcwLCAweDY2MDYzYmNhLCAweDExMDEwYjVjLCAweDhmNjU5ZWZmLCAweGY4NjJhZTY5LCAweDYxNmJmZmQzLCAweDE2NmNjZjQ1LFxuICAgIDB4YTAwYWUyNzgsIDB4ZDcwZGQyZWUsIDB4NGUwNDgzNTQsIDB4MzkwM2IzYzIsIDB4YTc2NzI2NjEsIDB4ZDA2MDE2ZjcsIDB4NDk2OTQ3NGQsIDB4M2U2ZTc3ZGIsXG4gICAgMHhhZWQxNmE0YSwgMHhkOWQ2NWFkYywgMHg0MGRmMGI2NiwgMHgzN2Q4M2JmMCwgMHhhOWJjYWU1MywgMHhkZWJiOWVjNSwgMHg0N2IyY2Y3ZiwgMHgzMGI1ZmZlOSxcbiAgICAweGJkYmRmMjFjLCAweGNhYmFjMjhhLCAweDUzYjM5MzMwLCAweDI0YjRhM2E2LCAweGJhZDAzNjA1LCAweGNkZDcwNjkzLCAweDU0ZGU1NzI5LCAweDIzZDk2N2JmLFxuICAgIDB4YjM2NjdhMmUsIDB4YzQ2MTRhYjgsIDB4NWQ2ODFiMDIsIDB4MmE2ZjJiOTQsIDB4YjQwYmJlMzcsIDB4YzMwYzhlYTEsIDB4NWEwNWRmMWIsIDB4MmQwMmVmOGQsXG5dO1xuaWYgKHR5cGVvZiBJbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgIFRBQkxFID0gbmV3IEludDMyQXJyYXkoVEFCTEUpO1xufVxuY29uc3QgY3JjID0gKGN1cnJlbnQsIHByZXZpb3VzKSA9PiB7XG4gICAgbGV0IGNyYyA9IHByZXZpb3VzID09PSAwID8gMCA6IH5+cHJldmlvdXMgXiAtMTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY3VycmVudC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY3JjID0gVEFCTEVbKGNyYyBeIGN1cnJlbnRbaW5kZXhdKSAmIDB4ZmZdIF4gKGNyYyA+Pj4gOCk7XG4gICAgfVxuICAgIHJldHVybiBjcmMgXiAtMTtcbn07XG5leHBvcnQgY29uc3QgY3JjMzIgPSAoY3VycmVudCwgcHJldmlvdXMpID0+IHtcbiAgICByZXR1cm4gY3JjKGN1cnJlbnQsIHByZXZpb3VzKSA+Pj4gMDtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/crc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/eips.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ethereumjs/common/dist/esm/eips.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EIPs: function() { return /* binding */ EIPs; }\n/* harmony export */ });\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/enums.js\");\n\nvar Status;\n(function (Status) {\n    Status[\"Stagnant\"] = \"stagnant\";\n    Status[\"Draft\"] = \"draft\";\n    Status[\"Review\"] = \"review\";\n    Status[\"Final\"] = \"final\";\n})(Status || (Status = {}));\nconst EIPs = {\n    1153: {\n        comment: 'Transient storage opcodes',\n        url: 'https://eips.ethereum.org/EIPS/eip-1153',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [],\n        gasPrices: {\n            tstore: {\n                v: 100,\n                d: 'Base fee of the TSTORE opcode',\n            },\n            tload: {\n                v: 100,\n                d: 'Base fee of the TLOAD opcode',\n            },\n        },\n    },\n    1559: {\n        comment: 'Fee market change for ETH 1.0 chain',\n        url: 'https://eips.ethereum.org/EIPS/eip-1559',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Berlin,\n        requiredEIPs: [2930],\n        gasConfig: {\n            baseFeeMaxChangeDenominator: {\n                v: 8,\n                d: 'Maximum base fee change denominator',\n            },\n            elasticityMultiplier: {\n                v: 2,\n                d: 'Maximum block gas target elasticity',\n            },\n            initialBaseFee: {\n                v: 1000000000,\n                d: 'Initial base fee on first EIP1559 block',\n            },\n        },\n    },\n    2565: {\n        comment: 'ModExp gas cost',\n        url: 'https://eips.ethereum.org/EIPS/eip-2565',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Byzantium,\n        requiredEIPs: [],\n        gasPrices: {\n            modexpGquaddivisor: {\n                v: 3,\n                d: 'Gquaddivisor from modexp precompile for gas calculation',\n            },\n        },\n    },\n    2537: {\n        comment: 'BLS12-381 precompiles',\n        url: 'https://eips.ethereum.org/EIPS/eip-2537',\n        status: 'Draft',\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [],\n        gasConfig: {},\n        gasPrices: {\n            Bls12381G1AddGas: {\n                v: 500,\n                d: 'Gas cost of a single BLS12-381 G1 addition precompile-call',\n            },\n            Bls12381G1MulGas: {\n                v: 12000,\n                d: 'Gas cost of a single BLS12-381 G1 multiplication precompile-call',\n            },\n            Bls12381G2AddGas: {\n                v: 800,\n                d: 'Gas cost of a single BLS12-381 G2 addition precompile-call',\n            },\n            Bls12381G2MulGas: {\n                v: 45000,\n                d: 'Gas cost of a single BLS12-381 G2 multiplication precompile-call',\n            },\n            Bls12381PairingBaseGas: {\n                v: 65000,\n                d: 'Base gas cost of BLS12-381 pairing check',\n            },\n            Bls12381PairingPerPairGas: {\n                v: 43000,\n                d: 'Per-pair gas cost of BLS12-381 pairing check',\n            },\n            Bls12381MapG1Gas: {\n                v: 5500,\n                d: 'Gas cost of BLS12-381 map field element to G1',\n            },\n            Bls12381MapG2Gas: {\n                v: 75000,\n                d: 'Gas cost of BLS12-381 map field element to G2',\n            },\n        },\n        vm: {},\n        pow: {},\n    },\n    2718: {\n        comment: 'Typed Transaction Envelope',\n        url: 'https://eips.ethereum.org/EIPS/eip-2718',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [],\n    },\n    2929: {\n        comment: 'Gas cost increases for state access opcodes',\n        url: 'https://eips.ethereum.org/EIPS/eip-2929',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [],\n        gasPrices: {\n            coldsload: {\n                v: 2100,\n                d: 'Gas cost of the first read of storage from a given location (per transaction)',\n            },\n            coldaccountaccess: {\n                v: 2600,\n                d: 'Gas cost of the first read of a given address (per transaction)',\n            },\n            warmstorageread: {\n                v: 100,\n                d: \"Gas cost of reading storage locations which have already loaded 'cold'\",\n            },\n            sstoreCleanGasEIP2200: {\n                v: 2900,\n                d: 'Once per SSTORE operation from clean non-zero to something else',\n            },\n            sstoreNoopGasEIP2200: {\n                v: 100,\n                d: \"Once per SSTORE operation if the value doesn't change\",\n            },\n            sstoreDirtyGasEIP2200: {\n                v: 100,\n                d: 'Once per SSTORE operation if a dirty value is changed',\n            },\n            sstoreInitRefundEIP2200: {\n                v: 19900,\n                d: 'Once per SSTORE operation for resetting to the original zero value',\n            },\n            sstoreCleanRefundEIP2200: {\n                v: 4900,\n                d: 'Once per SSTORE operation for resetting to the original non-zero value',\n            },\n            call: {\n                v: 0,\n                d: 'Base fee of the CALL opcode',\n            },\n            callcode: {\n                v: 0,\n                d: 'Base fee of the CALLCODE opcode',\n            },\n            delegatecall: {\n                v: 0,\n                d: 'Base fee of the DELEGATECALL opcode',\n            },\n            staticcall: {\n                v: 0,\n                d: 'Base fee of the STATICCALL opcode',\n            },\n            balance: {\n                v: 0,\n                d: 'Base fee of the BALANCE opcode',\n            },\n            extcodesize: {\n                v: 0,\n                d: 'Base fee of the EXTCODESIZE opcode',\n            },\n            extcodecopy: {\n                v: 0,\n                d: 'Base fee of the EXTCODECOPY opcode',\n            },\n            extcodehash: {\n                v: 0,\n                d: 'Base fee of the EXTCODEHASH opcode',\n            },\n            sload: {\n                v: 0,\n                d: 'Base fee of the SLOAD opcode',\n            },\n            sstore: {\n                v: 0,\n                d: 'Base fee of the SSTORE opcode',\n            },\n        },\n    },\n    2930: {\n        comment: 'Optional access lists',\n        url: 'https://eips.ethereum.org/EIPS/eip-2930',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Istanbul,\n        requiredEIPs: [2718, 2929],\n        gasPrices: {\n            accessListStorageKeyCost: {\n                v: 1900,\n                d: 'Gas cost per storage key in an Access List transaction',\n            },\n            accessListAddressCost: {\n                v: 2400,\n                d: 'Gas cost per storage key in an Access List transaction',\n            },\n        },\n    },\n    2935: {\n        comment: 'Save historical block hashes in state (Verkle related usage, UNSTABLE)',\n        url: 'https://github.com/gballet/EIPs/pull/3/commits/2e9ac09a142b0d9fb4db0b8d4609f92e5d9990c5',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [],\n        vm: {\n            historyStorageAddress: {\n                v: BigInt('0x0aae40965e6800cd9b1f4b05ff21581047e3f91e'),\n                d: 'The address where the historical blockhashes are stored',\n            },\n            historyServeWindow: {\n                v: BigInt(8192),\n                d: 'The amount of blocks to be served by the historical blockhash contract',\n            },\n        },\n    },\n    3074: {\n        comment: 'AUTH and AUTHCALL opcodes',\n        url: 'https://github.com/ethereum/EIPs/commit/eca4416ff3c025fcb6ec8cd4eac481e74e108481',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n        gasPrices: {\n            auth: {\n                v: 3100,\n                d: 'Gas cost of the AUTH opcode',\n            },\n            authcall: {\n                v: 0,\n                d: 'Gas cost of the AUTHCALL opcode',\n            },\n            authcallValueTransfer: {\n                v: 6700,\n                d: 'Paid for CALL when the value transfer is non-zero',\n            },\n        },\n    },\n    3198: {\n        comment: 'BASEFEE opcode',\n        url: 'https://eips.ethereum.org/EIPS/eip-3198',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n        gasPrices: {\n            basefee: {\n                v: 2,\n                d: 'Gas cost of the BASEFEE opcode',\n            },\n        },\n    },\n    3529: {\n        comment: 'Reduction in refunds',\n        url: 'https://eips.ethereum.org/EIPS/eip-3529',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Berlin,\n        requiredEIPs: [2929],\n        gasConfig: {\n            maxRefundQuotient: {\n                v: 5,\n                d: 'Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)',\n            },\n        },\n        gasPrices: {\n            selfdestructRefund: {\n                v: 0,\n                d: 'Refunded following a selfdestruct operation',\n            },\n            sstoreClearRefundEIP2200: {\n                v: 4800,\n                d: 'Once per SSTORE operation for clearing an originally existing storage slot',\n            },\n        },\n    },\n    3540: {\n        comment: 'EVM Object Format (EOF) v1',\n        url: 'https://eips.ethereum.org/EIPS/eip-3540',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [3541],\n    },\n    3541: {\n        comment: 'Reject new contracts starting with the 0xEF byte',\n        url: 'https://eips.ethereum.org/EIPS/eip-3541',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Berlin,\n        requiredEIPs: [],\n    },\n    3554: {\n        comment: 'Difficulty Bomb Delay to December 1st 2021',\n        url: 'https://eips.ethereum.org/EIPS/eip-3554',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.MuirGlacier,\n        requiredEIPs: [],\n        pow: {\n            difficultyBombDelay: {\n                v: 9500000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    3607: {\n        comment: 'Reject transactions from senders with deployed code',\n        url: 'https://eips.ethereum.org/EIPS/eip-3607',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [],\n    },\n    3651: {\n        comment: 'Warm COINBASE',\n        url: 'https://eips.ethereum.org/EIPS/eip-3651',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [2929],\n    },\n    3670: {\n        comment: 'EOF - Code Validation',\n        url: 'https://eips.ethereum.org/EIPS/eip-3670',\n        status: 'Review',\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [3540],\n        gasConfig: {},\n        gasPrices: {},\n        vm: {},\n        pow: {},\n    },\n    3675: {\n        comment: 'Upgrade consensus to Proof-of-Stake',\n        url: 'https://eips.ethereum.org/EIPS/eip-3675',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n    },\n    3855: {\n        comment: 'PUSH0 instruction',\n        url: 'https://eips.ethereum.org/EIPS/eip-3855',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [],\n        gasPrices: {\n            push0: {\n                v: 2,\n                d: 'Base fee of the PUSH0 opcode',\n            },\n        },\n    },\n    3860: {\n        comment: 'Limit and meter initcode',\n        url: 'https://eips.ethereum.org/EIPS/eip-3860',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.SpuriousDragon,\n        requiredEIPs: [],\n        gasPrices: {\n            initCodeWordCost: {\n                v: 2,\n                d: 'Gas to pay for each word (32 bytes) of initcode when creating a contract',\n            },\n        },\n        vm: {\n            maxInitCodeSize: {\n                v: 49152,\n                d: 'Maximum length of initialization code when creating a contract',\n            },\n        },\n    },\n    4345: {\n        comment: 'Difficulty Bomb Delay to June 2022',\n        url: 'https://eips.ethereum.org/EIPS/eip-4345',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n        pow: {\n            difficultyBombDelay: {\n                v: 10700000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    4399: {\n        comment: 'Supplant DIFFICULTY opcode with PREVRANDAO',\n        url: 'https://eips.ethereum.org/EIPS/eip-4399',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n        gasPrices: {\n            prevrandao: {\n                v: 2,\n                d: 'Base fee of the PREVRANDAO opcode (previously DIFFICULTY)',\n            },\n        },\n    },\n    4788: {\n        comment: 'Beacon block root in the EVM',\n        url: 'https://eips.ethereum.org/EIPS/eip-4788',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Cancun,\n        requiredEIPs: [],\n        gasPrices: {},\n        vm: {\n            historicalRootsLength: {\n                v: 8191,\n                d: 'The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile',\n            },\n        },\n    },\n    4844: {\n        comment: 'Shard Blob Transactions',\n        url: 'https://eips.ethereum.org/EIPS/eip-4844',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Paris,\n        requiredEIPs: [1559, 2718, 2930, 4895],\n        gasConfig: {\n            blobGasPerBlob: {\n                v: 131072,\n                d: 'The base fee for blob gas per blob',\n            },\n            targetBlobGasPerBlock: {\n                v: 393216,\n                d: 'The target blob gas consumed per block',\n            },\n            maxblobGasPerBlock: {\n                v: 786432,\n                d: 'The max blob gas allowable per block',\n            },\n            blobGasPriceUpdateFraction: {\n                v: 3338477,\n                d: 'The denominator used in the exponential when calculating a blob gas price',\n            },\n        },\n        gasPrices: {\n            simpleGasPerBlob: {\n                v: 12000,\n                d: 'The basic gas fee for each blob',\n            },\n            minBlobGasPrice: {\n                v: 1,\n                d: 'The minimum fee per blob gas',\n            },\n            kzgPointEvaluationGasPrecompilePrice: {\n                v: 50000,\n                d: 'The fee associated with the point evaluation precompile',\n            },\n            blobhash: {\n                v: 3,\n                d: 'Base fee of the BLOBHASH opcode',\n            },\n        },\n        sharding: {\n            blobCommitmentVersionKzg: {\n                v: 1,\n                d: 'The number indicated a versioned hash is a KZG commitment',\n            },\n            fieldElementsPerBlob: {\n                v: 4096,\n                d: 'The number of field elements allowed per blob',\n            },\n        },\n    },\n    4895: {\n        comment: 'Beacon chain push withdrawals as operations',\n        url: 'https://eips.ethereum.org/EIPS/eip-4895',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Paris,\n        requiredEIPs: [],\n    },\n    5133: {\n        comment: 'Delaying Difficulty Bomb to mid-September 2022',\n        url: 'https://eips.ethereum.org/EIPS/eip-5133',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.GrayGlacier,\n        requiredEIPs: [],\n        pow: {\n            difficultyBombDelay: {\n                v: 11400000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    5656: {\n        comment: 'MCOPY - Memory copying instruction',\n        url: 'https://eips.ethereum.org/EIPS/eip-5656',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Shanghai,\n        requiredEIPs: [],\n        gasPrices: {\n            mcopy: {\n                v: 3,\n                d: 'Base fee of the MCOPY opcode',\n            },\n        },\n    },\n    6110: {\n        comment: 'Supply validator deposits on chain',\n        url: 'https://eips.ethereum.org/EIPS/eip-6110',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Cancun,\n        requiredEIPs: [7685],\n    },\n    6780: {\n        comment: 'SELFDESTRUCT only in same transaction',\n        url: 'https://eips.ethereum.org/EIPS/eip-6780',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n    },\n    6800: {\n        comment: 'Ethereum state using a unified verkle tree (experimental)',\n        url: 'https://github.com/ethereum/EIPs/pull/6800',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n        gasPrices: {\n            create: {\n                v: 1000,\n                d: 'Base fee of the CREATE opcode',\n            },\n            coldsload: {\n                v: 0,\n                d: 'Gas cost of the first read of storage from a given location (per transaction)',\n            },\n        },\n        vm: {\n            // kaustinen 6 current uses this address, however this will be updated to correct address\n            // in next iteration\n            historyStorageAddress: {\n                v: BigInt('0xfffffffffffffffffffffffffffffffffffffffe'),\n                d: 'The address where the historical blockhashes are stored',\n            },\n        },\n    },\n    7002: {\n        comment: 'Execution layer triggerable withdrawals (experimental)',\n        url: 'https://github.com/ethereum/EIPs/blob/3b5fcad6b35782f8aaeba7d4ac26004e8fbd720f/EIPS/eip-7002.md',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Paris,\n        requiredEIPs: [7685],\n        vm: {\n            withdrawalRequestType: {\n                v: BigInt(0x01),\n                d: 'The withdrawal request type for EIP-7685',\n            },\n            excessWithdrawalsRequestStorageSlot: {\n                v: BigInt(0),\n                d: 'The storage slot of the excess withdrawals',\n            },\n            withdrawalsRequestCountStorage: {\n                v: BigInt(1),\n                d: 'The storage slot of the withdrawal request count',\n            },\n            withdrawalsRequestQueueHeadStorageSlot: {\n                v: BigInt(2),\n                d: 'The storage slot of the withdrawal request head of the queue',\n            },\n            withdrawalsRequestTailHeadStorageSlot: {\n                v: BigInt(3),\n                d: 'The storage slot of the withdrawal request tail of the queue',\n            },\n            withdrawalsRequestQueueStorageOffset: {\n                v: BigInt(4),\n                d: 'The storage slot of the withdrawal request queue offset',\n            },\n            maxWithdrawalRequestsPerBlock: {\n                v: BigInt(16),\n                d: 'The max withdrawal requests per block',\n            },\n            targetWithdrawalRequestsPerBlock: {\n                v: BigInt(2),\n                d: 'The target withdrawal requests per block',\n            },\n            minWithdrawalRequestFee: {\n                v: BigInt(1),\n                d: 'The minimum withdrawal request fee (in wei)',\n            },\n            withdrawalRequestFeeUpdateFraction: {\n                v: BigInt(17),\n                d: 'The withdrawal request fee update fraction (used in the fake exponential)',\n            },\n            systemAddress: {\n                v: BigInt('0xfffffffffffffffffffffffffffffffffffffffe'),\n                d: 'The system address to perform operations on the withdrawal requests predeploy address',\n            },\n            withdrawalRequestPredeployAddress: {\n                v: BigInt('0x00A3ca265EBcb825B45F985A16CEFB49958cE017'),\n                d: 'Address of the validator excess address',\n            },\n        },\n    },\n    7251: {\n        comment: 'Execution layer triggered consolidations (experimental)',\n        url: 'https://eips.ethereum.org/EIPS/eip-7251',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Paris,\n        requiredEIPs: [7685],\n        vm: {\n            consolidationRequestType: {\n                v: BigInt(0x02),\n                d: 'The withdrawal request type for EIP-7685',\n            },\n            systemAddress: {\n                v: BigInt('0xfffffffffffffffffffffffffffffffffffffffe'),\n                d: 'The system address to perform operations on the consolidation requests predeploy address',\n            },\n            consolidationRequestPredeployAddress: {\n                v: BigInt('0x00b42dbF2194e931E80326D950320f7d9Dbeac02'),\n                d: 'Address of the consolidations contract',\n            },\n        },\n    },\n    7516: {\n        comment: 'BLOBBASEFEE opcode',\n        url: 'https://eips.ethereum.org/EIPS/eip-7516',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Paris,\n        requiredEIPs: [4844],\n        gasPrices: {\n            blobbasefee: {\n                v: 2,\n                d: 'Gas cost of the BLOBBASEFEE opcode',\n            },\n        },\n    },\n    7685: {\n        comment: 'General purpose execution layer requests',\n        url: 'https://eips.ethereum.org/EIPS/eip-7685',\n        status: Status.Draft,\n        // TODO: Set correct minimum hardfork\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Cancun,\n        requiredEIPs: [3675],\n        gasPrices: {},\n    },\n    7702: {\n        comment: 'Set EOA account code for one transaction',\n        url: 'https://github.com/ethereum/EIPs/blob/62419ca3f45375db00b04a368ea37c0bfb05386a/EIPS/eip-7702.md',\n        status: Status.Review,\n        // TODO: Set correct minimum hardfork\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Cancun,\n        requiredEIPs: [2718, 2929, 2930],\n        gasPrices: {\n            perAuthBaseCost: {\n                v: 2500,\n                d: 'Gas cost of each authority item',\n            },\n        },\n    },\n    7709: {\n        comment: 'Use historical block hashes saved in state for BLOCKHASH',\n        url: 'https://eips.ethereum.org/EIPS/eip-7709',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [2935],\n    },\n};\n//# sourceMappingURL=eips.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/eips.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/enums.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ethereumjs/common/dist/esm/enums.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chain: function() { return /* binding */ Chain; },\n/* harmony export */   ChainGenesis: function() { return /* binding */ ChainGenesis; },\n/* harmony export */   ConsensusAlgorithm: function() { return /* binding */ ConsensusAlgorithm; },\n/* harmony export */   ConsensusType: function() { return /* binding */ ConsensusType; },\n/* harmony export */   CustomChain: function() { return /* binding */ CustomChain; },\n/* harmony export */   Hardfork: function() { return /* binding */ Hardfork; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/index.js\");\n\nvar Chain;\n(function (Chain) {\n    Chain[Chain[\"Mainnet\"] = 1] = \"Mainnet\";\n    Chain[Chain[\"Goerli\"] = 5] = \"Goerli\";\n    Chain[Chain[\"Sepolia\"] = 11155111] = \"Sepolia\";\n    Chain[Chain[\"Holesky\"] = 17000] = \"Holesky\";\n    Chain[Chain[\"Kaustinen6\"] = 69420] = \"Kaustinen6\";\n})(Chain || (Chain = {}));\n// Having this info as record will force typescript to make sure no chain is missed\n/**\n * GenesisState info about well known ethereum chains\n */\nconst ChainGenesis = {\n    [Chain.Mainnet]: {\n        name: 'mainnet',\n        blockNumber: _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0,\n        stateRoot: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)('0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544'),\n    },\n    [Chain.Goerli]: {\n        name: 'goerli',\n        blockNumber: _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0,\n        stateRoot: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)('0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008'),\n    },\n    [Chain.Sepolia]: {\n        name: 'sepolia',\n        blockNumber: _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0,\n        stateRoot: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)('0x5eb6e371a698b8d68f665192350ffcecbbbf322916f4b51bd79bb6887da3f494'),\n    },\n    [Chain.Holesky]: {\n        name: 'holesky',\n        blockNumber: _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0,\n        stateRoot: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)('0x69d8c9d72f6fa4ad42d4702b433707212f90db395eb54dc20bc85de253788783'),\n    },\n    [Chain.Kaustinen6]: {\n        name: 'kaustinen6',\n        blockNumber: _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0,\n        stateRoot: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)('0x1fbf85345a3cbba9a6d44f991b721e55620a22397c2a93ee8d5011136ac300ee'),\n    },\n};\nvar Hardfork;\n(function (Hardfork) {\n    Hardfork[\"Chainstart\"] = \"chainstart\";\n    Hardfork[\"Homestead\"] = \"homestead\";\n    Hardfork[\"Dao\"] = \"dao\";\n    Hardfork[\"TangerineWhistle\"] = \"tangerineWhistle\";\n    Hardfork[\"SpuriousDragon\"] = \"spuriousDragon\";\n    Hardfork[\"Byzantium\"] = \"byzantium\";\n    Hardfork[\"Constantinople\"] = \"constantinople\";\n    Hardfork[\"Petersburg\"] = \"petersburg\";\n    Hardfork[\"Istanbul\"] = \"istanbul\";\n    Hardfork[\"MuirGlacier\"] = \"muirGlacier\";\n    Hardfork[\"Berlin\"] = \"berlin\";\n    Hardfork[\"London\"] = \"london\";\n    Hardfork[\"ArrowGlacier\"] = \"arrowGlacier\";\n    Hardfork[\"GrayGlacier\"] = \"grayGlacier\";\n    Hardfork[\"MergeForkIdTransition\"] = \"mergeForkIdTransition\";\n    Hardfork[\"Paris\"] = \"paris\";\n    Hardfork[\"Shanghai\"] = \"shanghai\";\n    Hardfork[\"Cancun\"] = \"cancun\";\n    Hardfork[\"Prague\"] = \"prague\";\n    Hardfork[\"Osaka\"] = \"osaka\";\n})(Hardfork || (Hardfork = {}));\nvar ConsensusType;\n(function (ConsensusType) {\n    ConsensusType[\"ProofOfStake\"] = \"pos\";\n    ConsensusType[\"ProofOfWork\"] = \"pow\";\n    ConsensusType[\"ProofOfAuthority\"] = \"poa\";\n})(ConsensusType || (ConsensusType = {}));\nvar ConsensusAlgorithm;\n(function (ConsensusAlgorithm) {\n    ConsensusAlgorithm[\"Ethash\"] = \"ethash\";\n    ConsensusAlgorithm[\"Clique\"] = \"clique\";\n    ConsensusAlgorithm[\"Casper\"] = \"casper\";\n})(ConsensusAlgorithm || (ConsensusAlgorithm = {}));\nvar CustomChain;\n(function (CustomChain) {\n    /**\n     * Polygon (Matic) Mainnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMainnet\"] = \"polygon-mainnet\";\n    /**\n     * Polygon (Matic) Mumbai Testnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMumbai\"] = \"polygon-mumbai\";\n    /**\n     * Arbitrum One - mainnet for Arbitrum roll-up\n     *\n     * - [Documentation](https://developer.offchainlabs.com/public-chains)\n     */\n    CustomChain[\"ArbitrumOne\"] = \"arbitrum-one\";\n    /**\n     * xDai EVM sidechain with a native stable token\n     *\n     * - [Documentation](https://www.xdaichain.com/)\n     */\n    CustomChain[\"xDaiChain\"] = \"x-dai-chain\";\n    /**\n     * Optimistic Kovan - testnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */\n    CustomChain[\"OptimisticKovan\"] = \"optimistic-kovan\";\n    /**\n     * Optimistic Ethereum - mainnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */\n    CustomChain[\"OptimisticEthereum\"] = \"optimistic-ethereum\";\n})(CustomChain || (CustomChain = {}));\n//# sourceMappingURL=enums.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vZW51bXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF3RDtBQUNqRDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0JBQXNCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EscUJBQXFCLHNEQUFRO0FBQzdCLG1CQUFtQiw0REFBVTtBQUM3QixLQUFLO0FBQ0w7QUFDQTtBQUNBLHFCQUFxQixzREFBUTtBQUM3QixtQkFBbUIsNERBQVU7QUFDN0IsS0FBSztBQUNMO0FBQ0E7QUFDQSxxQkFBcUIsc0RBQVE7QUFDN0IsbUJBQW1CLDREQUFVO0FBQzdCLEtBQUs7QUFDTDtBQUNBO0FBQ0EscUJBQXFCLHNEQUFRO0FBQzdCLG1CQUFtQiw0REFBVTtBQUM3QixLQUFLO0FBQ0w7QUFDQTtBQUNBLHFCQUFxQixzREFBUTtBQUM3QixtQkFBbUIsNERBQVU7QUFDN0IsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRCQUE0QjtBQUN0QjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0M7QUFDaEM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0RBQWdEO0FBQzFDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGtDQUFrQztBQUNuQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL2Rpc3QvZXNtL2VudW1zLmpzPzc0YzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQklHSU5UXzAsIGhleFRvQnl0ZXMgfSBmcm9tICdAZXRoZXJldW1qcy91dGlsJztcbmV4cG9ydCB2YXIgQ2hhaW47XG4oZnVuY3Rpb24gKENoYWluKSB7XG4gICAgQ2hhaW5bQ2hhaW5bXCJNYWlubmV0XCJdID0gMV0gPSBcIk1haW5uZXRcIjtcbiAgICBDaGFpbltDaGFpbltcIkdvZXJsaVwiXSA9IDVdID0gXCJHb2VybGlcIjtcbiAgICBDaGFpbltDaGFpbltcIlNlcG9saWFcIl0gPSAxMTE1NTExMV0gPSBcIlNlcG9saWFcIjtcbiAgICBDaGFpbltDaGFpbltcIkhvbGVza3lcIl0gPSAxNzAwMF0gPSBcIkhvbGVza3lcIjtcbiAgICBDaGFpbltDaGFpbltcIkthdXN0aW5lbjZcIl0gPSA2OTQyMF0gPSBcIkthdXN0aW5lbjZcIjtcbn0pKENoYWluIHx8IChDaGFpbiA9IHt9KSk7XG4vLyBIYXZpbmcgdGhpcyBpbmZvIGFzIHJlY29yZCB3aWxsIGZvcmNlIHR5cGVzY3JpcHQgdG8gbWFrZSBzdXJlIG5vIGNoYWluIGlzIG1pc3NlZFxuLyoqXG4gKiBHZW5lc2lzU3RhdGUgaW5mbyBhYm91dCB3ZWxsIGtub3duIGV0aGVyZXVtIGNoYWluc1xuICovXG5leHBvcnQgY29uc3QgQ2hhaW5HZW5lc2lzID0ge1xuICAgIFtDaGFpbi5NYWlubmV0XToge1xuICAgICAgICBuYW1lOiAnbWFpbm5ldCcsXG4gICAgICAgIGJsb2NrTnVtYmVyOiBCSUdJTlRfMCxcbiAgICAgICAgc3RhdGVSb290OiBoZXhUb0J5dGVzKCcweGQ3Zjg5NzRmYjVhYzc4ZDlhYzA5OWI5YWQ1MDE4YmVkYzJjZTBhNzJkYWQxODI3YTE3MDlkYTMwNTgwZjA1NDQnKSxcbiAgICB9LFxuICAgIFtDaGFpbi5Hb2VybGldOiB7XG4gICAgICAgIG5hbWU6ICdnb2VybGknLFxuICAgICAgICBibG9ja051bWJlcjogQklHSU5UXzAsXG4gICAgICAgIHN0YXRlUm9vdDogaGV4VG9CeXRlcygnMHg1ZDZjZGVkNTg1ZTczYzRlMzIyYzMwYzJmNzgyYTMzNjMxNmYxN2RkODVhNDg2M2I5ZDgzOGQyZDRiOGIzMDA4JyksXG4gICAgfSxcbiAgICBbQ2hhaW4uU2Vwb2xpYV06IHtcbiAgICAgICAgbmFtZTogJ3NlcG9saWEnLFxuICAgICAgICBibG9ja051bWJlcjogQklHSU5UXzAsXG4gICAgICAgIHN0YXRlUm9vdDogaGV4VG9CeXRlcygnMHg1ZWI2ZTM3MWE2OThiOGQ2OGY2NjUxOTIzNTBmZmNlY2JiYmYzMjI5MTZmNGI1MWJkNzliYjY4ODdkYTNmNDk0JyksXG4gICAgfSxcbiAgICBbQ2hhaW4uSG9sZXNreV06IHtcbiAgICAgICAgbmFtZTogJ2hvbGVza3knLFxuICAgICAgICBibG9ja051bWJlcjogQklHSU5UXzAsXG4gICAgICAgIHN0YXRlUm9vdDogaGV4VG9CeXRlcygnMHg2OWQ4YzlkNzJmNmZhNGFkNDJkNDcwMmI0MzM3MDcyMTJmOTBkYjM5NWViNTRkYzIwYmM4NWRlMjUzNzg4NzgzJyksXG4gICAgfSxcbiAgICBbQ2hhaW4uS2F1c3RpbmVuNl06IHtcbiAgICAgICAgbmFtZTogJ2thdXN0aW5lbjYnLFxuICAgICAgICBibG9ja051bWJlcjogQklHSU5UXzAsXG4gICAgICAgIHN0YXRlUm9vdDogaGV4VG9CeXRlcygnMHgxZmJmODUzNDVhM2NiYmE5YTZkNDRmOTkxYjcyMWU1NTYyMGEyMjM5N2MyYTkzZWU4ZDUwMTExMzZhYzMwMGVlJyksXG4gICAgfSxcbn07XG5leHBvcnQgdmFyIEhhcmRmb3JrO1xuKGZ1bmN0aW9uIChIYXJkZm9yaykge1xuICAgIEhhcmRmb3JrW1wiQ2hhaW5zdGFydFwiXSA9IFwiY2hhaW5zdGFydFwiO1xuICAgIEhhcmRmb3JrW1wiSG9tZXN0ZWFkXCJdID0gXCJob21lc3RlYWRcIjtcbiAgICBIYXJkZm9ya1tcIkRhb1wiXSA9IFwiZGFvXCI7XG4gICAgSGFyZGZvcmtbXCJUYW5nZXJpbmVXaGlzdGxlXCJdID0gXCJ0YW5nZXJpbmVXaGlzdGxlXCI7XG4gICAgSGFyZGZvcmtbXCJTcHVyaW91c0RyYWdvblwiXSA9IFwic3B1cmlvdXNEcmFnb25cIjtcbiAgICBIYXJkZm9ya1tcIkJ5emFudGl1bVwiXSA9IFwiYnl6YW50aXVtXCI7XG4gICAgSGFyZGZvcmtbXCJDb25zdGFudGlub3BsZVwiXSA9IFwiY29uc3RhbnRpbm9wbGVcIjtcbiAgICBIYXJkZm9ya1tcIlBldGVyc2J1cmdcIl0gPSBcInBldGVyc2J1cmdcIjtcbiAgICBIYXJkZm9ya1tcIklzdGFuYnVsXCJdID0gXCJpc3RhbmJ1bFwiO1xuICAgIEhhcmRmb3JrW1wiTXVpckdsYWNpZXJcIl0gPSBcIm11aXJHbGFjaWVyXCI7XG4gICAgSGFyZGZvcmtbXCJCZXJsaW5cIl0gPSBcImJlcmxpblwiO1xuICAgIEhhcmRmb3JrW1wiTG9uZG9uXCJdID0gXCJsb25kb25cIjtcbiAgICBIYXJkZm9ya1tcIkFycm93R2xhY2llclwiXSA9IFwiYXJyb3dHbGFjaWVyXCI7XG4gICAgSGFyZGZvcmtbXCJHcmF5R2xhY2llclwiXSA9IFwiZ3JheUdsYWNpZXJcIjtcbiAgICBIYXJkZm9ya1tcIk1lcmdlRm9ya0lkVHJhbnNpdGlvblwiXSA9IFwibWVyZ2VGb3JrSWRUcmFuc2l0aW9uXCI7XG4gICAgSGFyZGZvcmtbXCJQYXJpc1wiXSA9IFwicGFyaXNcIjtcbiAgICBIYXJkZm9ya1tcIlNoYW5naGFpXCJdID0gXCJzaGFuZ2hhaVwiO1xuICAgIEhhcmRmb3JrW1wiQ2FuY3VuXCJdID0gXCJjYW5jdW5cIjtcbiAgICBIYXJkZm9ya1tcIlByYWd1ZVwiXSA9IFwicHJhZ3VlXCI7XG4gICAgSGFyZGZvcmtbXCJPc2FrYVwiXSA9IFwib3Nha2FcIjtcbn0pKEhhcmRmb3JrIHx8IChIYXJkZm9yayA9IHt9KSk7XG5leHBvcnQgdmFyIENvbnNlbnN1c1R5cGU7XG4oZnVuY3Rpb24gKENvbnNlbnN1c1R5cGUpIHtcbiAgICBDb25zZW5zdXNUeXBlW1wiUHJvb2ZPZlN0YWtlXCJdID0gXCJwb3NcIjtcbiAgICBDb25zZW5zdXNUeXBlW1wiUHJvb2ZPZldvcmtcIl0gPSBcInBvd1wiO1xuICAgIENvbnNlbnN1c1R5cGVbXCJQcm9vZk9mQXV0aG9yaXR5XCJdID0gXCJwb2FcIjtcbn0pKENvbnNlbnN1c1R5cGUgfHwgKENvbnNlbnN1c1R5cGUgPSB7fSkpO1xuZXhwb3J0IHZhciBDb25zZW5zdXNBbGdvcml0aG07XG4oZnVuY3Rpb24gKENvbnNlbnN1c0FsZ29yaXRobSkge1xuICAgIENvbnNlbnN1c0FsZ29yaXRobVtcIkV0aGFzaFwiXSA9IFwiZXRoYXNoXCI7XG4gICAgQ29uc2Vuc3VzQWxnb3JpdGhtW1wiQ2xpcXVlXCJdID0gXCJjbGlxdWVcIjtcbiAgICBDb25zZW5zdXNBbGdvcml0aG1bXCJDYXNwZXJcIl0gPSBcImNhc3BlclwiO1xufSkoQ29uc2Vuc3VzQWxnb3JpdGhtIHx8IChDb25zZW5zdXNBbGdvcml0aG0gPSB7fSkpO1xuZXhwb3J0IHZhciBDdXN0b21DaGFpbjtcbihmdW5jdGlvbiAoQ3VzdG9tQ2hhaW4pIHtcbiAgICAvKipcbiAgICAgKiBQb2x5Z29uIChNYXRpYykgTWFpbm5ldFxuICAgICAqXG4gICAgICogLSBbRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLm1hdGljLm5ldHdvcmsvZG9jcy9kZXZlbG9wL25ldHdvcmstZGV0YWlscy9uZXR3b3JrKVxuICAgICAqL1xuICAgIEN1c3RvbUNoYWluW1wiUG9seWdvbk1haW5uZXRcIl0gPSBcInBvbHlnb24tbWFpbm5ldFwiO1xuICAgIC8qKlxuICAgICAqIFBvbHlnb24gKE1hdGljKSBNdW1iYWkgVGVzdG5ldFxuICAgICAqXG4gICAgICogLSBbRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLm1hdGljLm5ldHdvcmsvZG9jcy9kZXZlbG9wL25ldHdvcmstZGV0YWlscy9uZXR3b3JrKVxuICAgICAqL1xuICAgIEN1c3RvbUNoYWluW1wiUG9seWdvbk11bWJhaVwiXSA9IFwicG9seWdvbi1tdW1iYWlcIjtcbiAgICAvKipcbiAgICAgKiBBcmJpdHJ1bSBPbmUgLSBtYWlubmV0IGZvciBBcmJpdHJ1bSByb2xsLXVwXG4gICAgICpcbiAgICAgKiAtIFtEb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5vZmZjaGFpbmxhYnMuY29tL3B1YmxpYy1jaGFpbnMpXG4gICAgICovXG4gICAgQ3VzdG9tQ2hhaW5bXCJBcmJpdHJ1bU9uZVwiXSA9IFwiYXJiaXRydW0tb25lXCI7XG4gICAgLyoqXG4gICAgICogeERhaSBFVk0gc2lkZWNoYWluIHdpdGggYSBuYXRpdmUgc3RhYmxlIHRva2VuXG4gICAgICpcbiAgICAgKiAtIFtEb2N1bWVudGF0aW9uXShodHRwczovL3d3dy54ZGFpY2hhaW4uY29tLylcbiAgICAgKi9cbiAgICBDdXN0b21DaGFpbltcInhEYWlDaGFpblwiXSA9IFwieC1kYWktY2hhaW5cIjtcbiAgICAvKipcbiAgICAgKiBPcHRpbWlzdGljIEtvdmFuIC0gdGVzdG5ldCBmb3IgT3B0aW1pc20gcm9sbC11cFxuICAgICAqXG4gICAgICogLSBbRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9jb21tdW5pdHkub3B0aW1pc20uaW8vZG9jcy9kZXZlbG9wZXJzL3R1dG9yaWFscy5odG1sKVxuICAgICAqL1xuICAgIEN1c3RvbUNoYWluW1wiT3B0aW1pc3RpY0tvdmFuXCJdID0gXCJvcHRpbWlzdGljLWtvdmFuXCI7XG4gICAgLyoqXG4gICAgICogT3B0aW1pc3RpYyBFdGhlcmV1bSAtIG1haW5uZXQgZm9yIE9wdGltaXNtIHJvbGwtdXBcbiAgICAgKlxuICAgICAqIC0gW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vY29tbXVuaXR5Lm9wdGltaXNtLmlvL2RvY3MvZGV2ZWxvcGVycy90dXRvcmlhbHMuaHRtbClcbiAgICAgKi9cbiAgICBDdXN0b21DaGFpbltcIk9wdGltaXN0aWNFdGhlcmV1bVwiXSA9IFwib3B0aW1pc3RpYy1ldGhlcmV1bVwiO1xufSkoQ3VzdG9tQ2hhaW4gfHwgKEN1c3RvbUNoYWluID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudW1zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/enums.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/hardforks.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/dist/esm/hardforks.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Status: function() { return /* binding */ Status; },\n/* harmony export */   hardforks: function() { return /* binding */ hardforks; }\n/* harmony export */ });\nvar Status;\n(function (Status) {\n    Status[\"Draft\"] = \"draft\";\n    Status[\"Review\"] = \"review\";\n    Status[\"Final\"] = \"final\";\n})(Status || (Status = {}));\nconst hardforks = {\n    chainstart: {\n        name: 'chainstart',\n        comment: 'Start of the Ethereum main chain',\n        url: '',\n        status: Status.Final,\n        gasConfig: {\n            minGasLimit: {\n                v: 5000,\n                d: 'Minimum the gas limit may ever be',\n            },\n            gasLimitBoundDivisor: {\n                v: 1024,\n                d: 'The bound divisor of the gas limit, used in update calculations',\n            },\n            maxRefundQuotient: {\n                v: 2,\n                d: 'Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)',\n            },\n        },\n        gasPrices: {\n            base: {\n                v: 2,\n                d: 'Gas base cost, used e.g. for ChainID opcode (Istanbul)',\n            },\n            exp: {\n                v: 10,\n                d: 'Base fee of the EXP opcode',\n            },\n            expByte: {\n                v: 10,\n                d: 'Times ceil(log256(exponent)) for the EXP instruction',\n            },\n            keccak256: {\n                v: 30,\n                d: 'Base fee of the SHA3 opcode',\n            },\n            keccak256Word: {\n                v: 6,\n                d: \"Once per word of the SHA3 operation's data\",\n            },\n            sload: {\n                v: 50,\n                d: 'Base fee of the SLOAD opcode',\n            },\n            sstoreSet: {\n                v: 20000,\n                d: 'Once per SSTORE operation if the zeroness changes from zero',\n            },\n            sstoreReset: {\n                v: 5000,\n                d: 'Once per SSTORE operation if the zeroness does not change from zero',\n            },\n            sstoreRefund: {\n                v: 15000,\n                d: 'Once per SSTORE operation if the zeroness changes to zero',\n            },\n            jumpdest: {\n                v: 1,\n                d: 'Base fee of the JUMPDEST opcode',\n            },\n            log: {\n                v: 375,\n                d: 'Base fee of the LOG opcode',\n            },\n            logData: {\n                v: 8,\n                d: \"Per byte in a LOG* operation's data\",\n            },\n            logTopic: {\n                v: 375,\n                d: 'Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas',\n            },\n            create: {\n                v: 32000,\n                d: 'Base fee of the CREATE opcode',\n            },\n            call: {\n                v: 40,\n                d: 'Base fee of the CALL opcode',\n            },\n            callStipend: {\n                v: 2300,\n                d: 'Free gas given at beginning of call',\n            },\n            callValueTransfer: {\n                v: 9000,\n                d: 'Paid for CALL when the value transfor is non-zero',\n            },\n            callNewAccount: {\n                v: 25000,\n                d: \"Paid for CALL when the destination address didn't exist prior\",\n            },\n            selfdestructRefund: {\n                v: 24000,\n                d: 'Refunded following a selfdestruct operation',\n            },\n            memory: {\n                v: 3,\n                d: 'Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL',\n            },\n            quadCoeffDiv: {\n                v: 512,\n                d: 'Divisor for the quadratic particle of the memory cost equation',\n            },\n            createData: {\n                v: 200,\n                d: '',\n            },\n            tx: {\n                v: 21000,\n                d: 'Per transaction. NOTE: Not payable on data of calls between transactions',\n            },\n            txCreation: {\n                v: 32000,\n                d: 'The cost of creating a contract via tx',\n            },\n            txDataZero: {\n                v: 4,\n                d: 'Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions',\n            },\n            txDataNonZero: {\n                v: 68,\n                d: 'Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions',\n            },\n            copy: {\n                v: 3,\n                d: 'Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added',\n            },\n            ecRecover: {\n                v: 3000,\n                d: '',\n            },\n            sha256: {\n                v: 60,\n                d: '',\n            },\n            sha256Word: {\n                v: 12,\n                d: '',\n            },\n            ripemd160: {\n                v: 600,\n                d: '',\n            },\n            ripemd160Word: {\n                v: 120,\n                d: '',\n            },\n            identity: {\n                v: 15,\n                d: '',\n            },\n            identityWord: {\n                v: 3,\n                d: '',\n            },\n            stop: {\n                v: 0,\n                d: 'Base fee of the STOP opcode',\n            },\n            add: {\n                v: 3,\n                d: 'Base fee of the ADD opcode',\n            },\n            mul: {\n                v: 5,\n                d: 'Base fee of the MUL opcode',\n            },\n            sub: {\n                v: 3,\n                d: 'Base fee of the SUB opcode',\n            },\n            div: {\n                v: 5,\n                d: 'Base fee of the DIV opcode',\n            },\n            sdiv: {\n                v: 5,\n                d: 'Base fee of the SDIV opcode',\n            },\n            mod: {\n                v: 5,\n                d: 'Base fee of the MOD opcode',\n            },\n            smod: {\n                v: 5,\n                d: 'Base fee of the SMOD opcode',\n            },\n            addmod: {\n                v: 8,\n                d: 'Base fee of the ADDMOD opcode',\n            },\n            mulmod: {\n                v: 8,\n                d: 'Base fee of the MULMOD opcode',\n            },\n            signextend: {\n                v: 5,\n                d: 'Base fee of the SIGNEXTEND opcode',\n            },\n            lt: {\n                v: 3,\n                d: 'Base fee of the LT opcode',\n            },\n            gt: {\n                v: 3,\n                d: 'Base fee of the GT opcode',\n            },\n            slt: {\n                v: 3,\n                d: 'Base fee of the SLT opcode',\n            },\n            sgt: {\n                v: 3,\n                d: 'Base fee of the SGT opcode',\n            },\n            eq: {\n                v: 3,\n                d: 'Base fee of the EQ opcode',\n            },\n            iszero: {\n                v: 3,\n                d: 'Base fee of the ISZERO opcode',\n            },\n            and: {\n                v: 3,\n                d: 'Base fee of the AND opcode',\n            },\n            or: {\n                v: 3,\n                d: 'Base fee of the OR opcode',\n            },\n            xor: {\n                v: 3,\n                d: 'Base fee of the XOR opcode',\n            },\n            not: {\n                v: 3,\n                d: 'Base fee of the NOT opcode',\n            },\n            byte: {\n                v: 3,\n                d: 'Base fee of the BYTE opcode',\n            },\n            address: {\n                v: 2,\n                d: 'Base fee of the ADDRESS opcode',\n            },\n            balance: {\n                v: 20,\n                d: 'Base fee of the BALANCE opcode',\n            },\n            origin: {\n                v: 2,\n                d: 'Base fee of the ORIGIN opcode',\n            },\n            caller: {\n                v: 2,\n                d: 'Base fee of the CALLER opcode',\n            },\n            callvalue: {\n                v: 2,\n                d: 'Base fee of the CALLVALUE opcode',\n            },\n            calldataload: {\n                v: 3,\n                d: 'Base fee of the CALLDATALOAD opcode',\n            },\n            calldatasize: {\n                v: 2,\n                d: 'Base fee of the CALLDATASIZE opcode',\n            },\n            calldatacopy: {\n                v: 3,\n                d: 'Base fee of the CALLDATACOPY opcode',\n            },\n            codesize: {\n                v: 2,\n                d: 'Base fee of the CODESIZE opcode',\n            },\n            codecopy: {\n                v: 3,\n                d: 'Base fee of the CODECOPY opcode',\n            },\n            gasprice: {\n                v: 2,\n                d: 'Base fee of the GASPRICE opcode',\n            },\n            extcodesize: {\n                v: 20,\n                d: 'Base fee of the EXTCODESIZE opcode',\n            },\n            extcodecopy: {\n                v: 20,\n                d: 'Base fee of the EXTCODECOPY opcode',\n            },\n            blockhash: {\n                v: 20,\n                d: 'Base fee of the BLOCKHASH opcode',\n            },\n            coinbase: {\n                v: 2,\n                d: 'Base fee of the COINBASE opcode',\n            },\n            timestamp: {\n                v: 2,\n                d: 'Base fee of the TIMESTAMP opcode',\n            },\n            number: {\n                v: 2,\n                d: 'Base fee of the NUMBER opcode',\n            },\n            difficulty: {\n                v: 2,\n                d: 'Base fee of the DIFFICULTY opcode',\n            },\n            gaslimit: {\n                v: 2,\n                d: 'Base fee of the GASLIMIT opcode',\n            },\n            pop: {\n                v: 2,\n                d: 'Base fee of the POP opcode',\n            },\n            mload: {\n                v: 3,\n                d: 'Base fee of the MLOAD opcode',\n            },\n            mstore: {\n                v: 3,\n                d: 'Base fee of the MSTORE opcode',\n            },\n            mstore8: {\n                v: 3,\n                d: 'Base fee of the MSTORE8 opcode',\n            },\n            sstore: {\n                v: 0,\n                d: 'Base fee of the SSTORE opcode',\n            },\n            jump: {\n                v: 8,\n                d: 'Base fee of the JUMP opcode',\n            },\n            jumpi: {\n                v: 10,\n                d: 'Base fee of the JUMPI opcode',\n            },\n            pc: {\n                v: 2,\n                d: 'Base fee of the PC opcode',\n            },\n            msize: {\n                v: 2,\n                d: 'Base fee of the MSIZE opcode',\n            },\n            gas: {\n                v: 2,\n                d: 'Base fee of the GAS opcode',\n            },\n            push: {\n                v: 3,\n                d: 'Base fee of the PUSH opcode',\n            },\n            dup: {\n                v: 3,\n                d: 'Base fee of the DUP opcode',\n            },\n            swap: {\n                v: 3,\n                d: 'Base fee of the SWAP opcode',\n            },\n            callcode: {\n                v: 40,\n                d: 'Base fee of the CALLCODE opcode',\n            },\n            return: {\n                v: 0,\n                d: 'Base fee of the RETURN opcode',\n            },\n            invalid: {\n                v: 0,\n                d: 'Base fee of the INVALID opcode',\n            },\n            selfdestruct: {\n                v: 0,\n                d: 'Base fee of the SELFDESTRUCT opcode',\n            },\n        },\n        vm: {\n            stackLimit: {\n                v: 1024,\n                d: 'Maximum size of VM stack allowed',\n            },\n            callCreateDepth: {\n                v: 1024,\n                d: 'Maximum depth of call/create stack',\n            },\n            maxExtraDataSize: {\n                v: 32,\n                d: 'Maximum size extra data may be after Genesis',\n            },\n        },\n        pow: {\n            minimumDifficulty: {\n                v: 131072,\n                d: 'The minimum that the difficulty may ever be',\n            },\n            difficultyBoundDivisor: {\n                v: 2048,\n                d: 'The bound divisor of the difficulty, used in the update calculations',\n            },\n            durationLimit: {\n                v: 13,\n                d: 'The decision boundary on the blocktime duration used to determine whether difficulty should go up or not',\n            },\n            epochDuration: {\n                v: 30000,\n                d: 'Duration between proof-of-work epochs',\n            },\n            timebombPeriod: {\n                v: 100000,\n                d: 'Exponential difficulty timebomb period',\n            },\n            minerReward: {\n                v: BigInt('5000000000000000000'),\n                d: 'the amount a miner get rewarded for mining a block',\n            },\n            difficultyBombDelay: {\n                v: 0,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    homestead: {\n        name: 'homestead',\n        comment: 'Homestead hardfork with protocol and network changes',\n        url: 'https://eips.ethereum.org/EIPS/eip-606',\n        status: Status.Final,\n        gasPrices: {\n            delegatecall: {\n                v: 40,\n                d: 'Base fee of the DELEGATECALL opcode',\n            },\n        },\n    },\n    dao: {\n        name: 'dao',\n        comment: 'DAO rescue hardfork',\n        url: 'https://eips.ethereum.org/EIPS/eip-779',\n        status: Status.Final,\n    },\n    tangerineWhistle: {\n        name: 'tangerineWhistle',\n        comment: 'Hardfork with gas cost changes for IO-heavy operations',\n        url: 'https://eips.ethereum.org/EIPS/eip-608',\n        status: Status.Final,\n        gasPrices: {\n            sload: {\n                v: 200,\n                d: 'Once per SLOAD operation',\n            },\n            call: {\n                v: 700,\n                d: 'Once per CALL operation & message call transaction',\n            },\n            extcodesize: {\n                v: 700,\n                d: 'Base fee of the EXTCODESIZE opcode',\n            },\n            extcodecopy: {\n                v: 700,\n                d: 'Base fee of the EXTCODECOPY opcode',\n            },\n            balance: {\n                v: 400,\n                d: 'Base fee of the BALANCE opcode',\n            },\n            delegatecall: {\n                v: 700,\n                d: 'Base fee of the DELEGATECALL opcode',\n            },\n            callcode: {\n                v: 700,\n                d: 'Base fee of the CALLCODE opcode',\n            },\n            selfdestruct: {\n                v: 5000,\n                d: 'Base fee of the SELFDESTRUCT opcode',\n            },\n        },\n    },\n    spuriousDragon: {\n        name: 'spuriousDragon',\n        comment: 'HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit',\n        url: 'https://eips.ethereum.org/EIPS/eip-607',\n        status: Status.Final,\n        gasPrices: {\n            expByte: {\n                v: 50,\n                d: 'Times ceil(log256(exponent)) for the EXP instruction',\n            },\n        },\n        vm: {\n            maxCodeSize: {\n                v: 24576,\n                d: 'Maximum length of contract code',\n            },\n        },\n    },\n    byzantium: {\n        name: 'byzantium',\n        comment: 'Hardfork with new precompiles, instructions and other protocol changes',\n        url: 'https://eips.ethereum.org/EIPS/eip-609',\n        status: Status.Final,\n        gasPrices: {\n            modexpGquaddivisor: {\n                v: 20,\n                d: 'Gquaddivisor from modexp precompile for gas calculation',\n            },\n            ecAdd: {\n                v: 500,\n                d: 'Gas costs for curve addition precompile',\n            },\n            ecMul: {\n                v: 40000,\n                d: 'Gas costs for curve multiplication precompile',\n            },\n            ecPairing: {\n                v: 100000,\n                d: 'Base gas costs for curve pairing precompile',\n            },\n            ecPairingWord: {\n                v: 80000,\n                d: 'Gas costs regarding curve pairing precompile input length',\n            },\n            revert: {\n                v: 0,\n                d: 'Base fee of the REVERT opcode',\n            },\n            staticcall: {\n                v: 700,\n                d: 'Base fee of the STATICCALL opcode',\n            },\n            returndatasize: {\n                v: 2,\n                d: 'Base fee of the RETURNDATASIZE opcode',\n            },\n            returndatacopy: {\n                v: 3,\n                d: 'Base fee of the RETURNDATACOPY opcode',\n            },\n        },\n        pow: {\n            minerReward: {\n                v: BigInt('3000000000000000000'),\n                d: 'the amount a miner get rewarded for mining a block',\n            },\n            difficultyBombDelay: {\n                v: 3000000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    constantinople: {\n        name: 'constantinople',\n        comment: 'Postponed hardfork including EIP-1283 (SSTORE gas metering changes)',\n        url: 'https://eips.ethereum.org/EIPS/eip-1013',\n        status: Status.Final,\n        gasPrices: {\n            netSstoreNoopGas: {\n                v: 200,\n                d: \"Once per SSTORE operation if the value doesn't change\",\n            },\n            netSstoreInitGas: {\n                v: 20000,\n                d: 'Once per SSTORE operation from clean zero',\n            },\n            netSstoreCleanGas: {\n                v: 5000,\n                d: 'Once per SSTORE operation from clean non-zero',\n            },\n            netSstoreDirtyGas: {\n                v: 200,\n                d: 'Once per SSTORE operation from dirty',\n            },\n            netSstoreClearRefund: {\n                v: 15000,\n                d: 'Once per SSTORE operation for clearing an originally existing storage slot',\n            },\n            netSstoreResetRefund: {\n                v: 4800,\n                d: 'Once per SSTORE operation for resetting to the original non-zero value',\n            },\n            netSstoreResetClearRefund: {\n                v: 19800,\n                d: 'Once per SSTORE operation for resetting to the original zero value',\n            },\n            shl: {\n                v: 3,\n                d: 'Base fee of the SHL opcode',\n            },\n            shr: {\n                v: 3,\n                d: 'Base fee of the SHR opcode',\n            },\n            sar: {\n                v: 3,\n                d: 'Base fee of the SAR opcode',\n            },\n            extcodehash: {\n                v: 400,\n                d: 'Base fee of the EXTCODEHASH opcode',\n            },\n            create2: {\n                v: 32000,\n                d: 'Base fee of the CREATE2 opcode',\n            },\n        },\n        pow: {\n            minerReward: {\n                v: BigInt('2000000000000000000'),\n                d: 'The amount a miner gets rewarded for mining a block',\n            },\n            difficultyBombDelay: {\n                v: 5000000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    petersburg: {\n        name: 'petersburg',\n        comment: 'Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople',\n        url: 'https://eips.ethereum.org/EIPS/eip-1716',\n        status: Status.Final,\n        gasPrices: {\n            netSstoreNoopGas: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreInitGas: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreCleanGas: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreDirtyGas: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreClearRefund: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreResetRefund: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreResetClearRefund: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n        },\n    },\n    istanbul: {\n        name: 'istanbul',\n        comment: 'HF targeted for December 2019 following the Constantinople/Petersburg HF',\n        url: 'https://eips.ethereum.org/EIPS/eip-1679',\n        status: Status.Final,\n        gasConfig: {},\n        gasPrices: {\n            blake2Round: {\n                v: 1,\n                d: 'Gas cost per round for the Blake2 F precompile',\n            },\n            ecAdd: {\n                v: 150,\n                d: 'Gas costs for curve addition precompile',\n            },\n            ecMul: {\n                v: 6000,\n                d: 'Gas costs for curve multiplication precompile',\n            },\n            ecPairing: {\n                v: 45000,\n                d: 'Base gas costs for curve pairing precompile',\n            },\n            ecPairingWord: {\n                v: 34000,\n                d: 'Gas costs regarding curve pairing precompile input length',\n            },\n            txDataNonZero: {\n                v: 16,\n                d: 'Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions',\n            },\n            sstoreSentryGasEIP2200: {\n                v: 2300,\n                d: 'Minimum gas required to be present for an SSTORE call, not consumed',\n            },\n            sstoreNoopGasEIP2200: {\n                v: 800,\n                d: \"Once per SSTORE operation if the value doesn't change\",\n            },\n            sstoreDirtyGasEIP2200: {\n                v: 800,\n                d: 'Once per SSTORE operation if a dirty value is changed',\n            },\n            sstoreInitGasEIP2200: {\n                v: 20000,\n                d: 'Once per SSTORE operation from clean zero to non-zero',\n            },\n            sstoreInitRefundEIP2200: {\n                v: 19200,\n                d: 'Once per SSTORE operation for resetting to the original zero value',\n            },\n            sstoreCleanGasEIP2200: {\n                v: 5000,\n                d: 'Once per SSTORE operation from clean non-zero to something else',\n            },\n            sstoreCleanRefundEIP2200: {\n                v: 4200,\n                d: 'Once per SSTORE operation for resetting to the original non-zero value',\n            },\n            sstoreClearRefundEIP2200: {\n                v: 15000,\n                d: 'Once per SSTORE operation for clearing an originally existing storage slot',\n            },\n            balance: {\n                v: 700,\n                d: 'Base fee of the BALANCE opcode',\n            },\n            extcodehash: {\n                v: 700,\n                d: 'Base fee of the EXTCODEHASH opcode',\n            },\n            chainid: {\n                v: 2,\n                d: 'Base fee of the CHAINID opcode',\n            },\n            selfbalance: {\n                v: 5,\n                d: 'Base fee of the SELFBALANCE opcode',\n            },\n            sload: {\n                v: 800,\n                d: 'Base fee of the SLOAD opcode',\n            },\n        },\n    },\n    muirGlacier: {\n        name: 'muirGlacier',\n        comment: 'HF to delay the difficulty bomb',\n        url: 'https://eips.ethereum.org/EIPS/eip-2384',\n        status: Status.Final,\n        pow: {\n            difficultyBombDelay: {\n                v: 9000000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    berlin: {\n        name: 'berlin',\n        comment: 'HF targeted for July 2020 following the Muir Glacier HF',\n        url: 'https://eips.ethereum.org/EIPS/eip-2070',\n        status: Status.Final,\n        eips: [2565, 2929, 2718, 2930],\n    },\n    london: {\n        name: 'london',\n        comment: 'HF targeted for July 2021 following the Berlin fork',\n        url: 'https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md',\n        status: Status.Final,\n        eips: [1559, 3198, 3529, 3541],\n    },\n    arrowGlacier: {\n        name: 'arrowGlacier',\n        comment: 'HF to delay the difficulty bomb',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md',\n        status: Status.Final,\n        eips: [4345],\n    },\n    grayGlacier: {\n        name: 'grayGlacier',\n        comment: 'Delaying the difficulty bomb to Mid September 2022',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md',\n        status: Status.Final,\n        eips: [5133],\n    },\n    paris: {\n        name: 'paris',\n        comment: 'Hardfork to upgrade the consensus mechanism to Proof-of-Stake',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md',\n        status: Status.Final,\n        consensus: {\n            type: 'pos',\n            algorithm: 'casper',\n            casper: {},\n        },\n        eips: [3675, 4399],\n    },\n    mergeForkIdTransition: {\n        name: 'mergeForkIdTransition',\n        comment: 'Pre-merge hardfork to fork off non-upgraded clients',\n        url: 'https://eips.ethereum.org/EIPS/eip-3675',\n        status: Status.Final,\n        eips: [],\n    },\n    shanghai: {\n        name: 'shanghai',\n        comment: 'Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md',\n        status: Status.Final,\n        eips: [3651, 3855, 3860, 4895],\n    },\n    cancun: {\n        name: 'cancun',\n        comment: 'Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md',\n        status: Status.Final,\n        eips: [1153, 4844, 4788, 5656, 6780, 7516],\n    },\n    prague: {\n        name: 'prague',\n        comment: 'Next feature hardfork after cancun, internally used for pectra testing/implementation (incomplete/experimental)',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/prague.md',\n        status: Status.Draft,\n        eips: [2537, 2935, 3074, 6110, 7002, 7251, 7685],\n    },\n    osaka: {\n        name: 'osaka',\n        comment: 'Next feature hardfork after prague, internally used for verkle testing/implementation (incomplete/experimental)',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/osaka.md',\n        status: Status.Draft,\n        eips: [2935, 6800],\n    },\n};\n//# sourceMappingURL=hardforks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/hardforks.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ethereumjs/common/dist/esm/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chain: function() { return /* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.Chain; },\n/* harmony export */   ChainGenesis: function() { return /* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.ChainGenesis; },\n/* harmony export */   Common: function() { return /* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_0__.Common; },\n/* harmony export */   ConsensusAlgorithm: function() { return /* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.ConsensusAlgorithm; },\n/* harmony export */   ConsensusType: function() { return /* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.ConsensusType; },\n/* harmony export */   CustomChain: function() { return /* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.CustomChain; },\n/* harmony export */   Hardfork: function() { return /* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork; },\n/* harmony export */   parseGethGenesis: function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_4__.parseGethGenesis; }\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/common.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enums.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/enums.js\");\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interfaces.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/interfaces.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/types.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/utils.js\");\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUE0QjtBQUNEO0FBQ0s7QUFDTDtBQUNBO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vaW5kZXguanM/YTM2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2NvbW1vbi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2VudW1zLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlcy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/interfaces.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/dist/esm/interfaces.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/**\n * External Interfaces for other EthereumJS libraries\n */\n\n//# sourceMappingURL=interfaces.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vaW50ZXJmYWNlcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ1U7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL2Rpc3QvZXNtL2ludGVyZmFjZXMuanM/MzExMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIEludGVyZmFjZXMgZm9yIG90aGVyIEV0aGVyZXVtSlMgbGlicmFyaWVzXG4gKi9cbmV4cG9ydCB7fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyZmFjZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/interfaces.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ethereumjs/common/dist/esm/types.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vdHlwZXMuanMiLCJtYXBwaW5ncyI6IjtBQUFVO0FBQ1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL2NvbW1vbi9kaXN0L2VzbS90eXBlcy5qcz9jMGU0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/types.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ethereumjs/common/dist/esm/utils.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseGethGenesis: function() { return /* binding */ parseGethGenesis; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enums.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/enums.js\");\n\n\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\nfunction formatNonce(nonce) {\n    if (!nonce || nonce === '0x0') {\n        return '0x0000000000000000';\n    }\n    if ((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.isHexString)(nonce)) {\n        return `0x${(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.stripHexPrefix)(nonce).padStart(16, '0')}`;\n    }\n    return `0x${nonce.padStart(16, '0')}`;\n}\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\nfunction parseGethParams(json, mergeForkIdPostMerge = true) {\n    const { name, config, difficulty, mixHash, gasLimit, coinbase, baseFeePerGas, excessBlobGas, extraData: unparsedExtraData, nonce: unparsedNonce, timestamp: unparsedTimestamp, } = json;\n    const genesisTimestamp = Number(unparsedTimestamp);\n    const { chainId, depositContractAddress, } = config;\n    // geth is not strictly putting empty fields with a 0x prefix\n    const extraData = unparsedExtraData === '' ? '0x' : unparsedExtraData;\n    // geth may use number for timestamp\n    const timestamp = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.isHexString)(unparsedTimestamp)\n        ? unparsedTimestamp\n        : (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.intToHex)(parseInt(unparsedTimestamp));\n    // geth may not give us a nonce strictly formatted to an 8 byte 0x-prefixed hex string\n    const nonce = unparsedNonce.length !== 18 ? formatNonce(unparsedNonce) : unparsedNonce;\n    // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n    // but have different configuration parameters in geth genesis parameters\n    if (config.eip155Block !== config.eip158Block) {\n        throw new Error('EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork');\n    }\n    const params = {\n        name,\n        chainId,\n        networkId: chainId,\n        depositContractAddress,\n        genesis: {\n            timestamp,\n            gasLimit,\n            difficulty,\n            nonce,\n            extraData,\n            mixHash,\n            coinbase,\n            baseFeePerGas,\n            excessBlobGas,\n        },\n        hardfork: undefined,\n        hardforks: [],\n        bootstrapNodes: [],\n        consensus: config.clique !== undefined\n            ? {\n                type: 'poa',\n                algorithm: 'clique',\n                clique: {\n                    // The recent geth genesis seems to be using blockperiodseconds\n                    // and epochlength for clique specification\n                    // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n                    period: config.clique.period ?? config.clique.blockperiodseconds,\n                    epoch: config.clique.epoch ?? config.clique.epochlength,\n                },\n            }\n            : {\n                type: 'pow',\n                algorithm: 'ethash',\n                ethash: {},\n            },\n    };\n    const forkMap = {\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Homestead]: { name: 'homesteadBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Dao]: { name: 'daoForkBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.TangerineWhistle]: { name: 'eip150Block' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.SpuriousDragon]: { name: 'eip155Block' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Byzantium]: { name: 'byzantiumBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Constantinople]: { name: 'constantinopleBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Petersburg]: { name: 'petersburgBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Istanbul]: { name: 'istanbulBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Berlin]: { name: 'berlinBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.London]: { name: 'londonBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.MergeForkIdTransition]: { name: 'mergeForkBlock', postMerge: mergeForkIdPostMerge },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Cancun]: { name: 'cancunTime', postMerge: true, isTimestamp: true },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Prague]: { name: 'pragueTime', postMerge: true, isTimestamp: true },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Osaka]: { name: 'osakaTime', postMerge: true, isTimestamp: true },\n    };\n    // forkMapRev is the map from config field name to Hardfork\n    const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {\n        acc[forkMap[elem].name] = elem;\n        return acc;\n    }, {});\n    const configHardforkNames = Object.keys(config).filter((key) => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);\n    params.hardforks = configHardforkNames\n        .map((nameBlock) => ({\n        name: forkMapRev[nameBlock],\n        block: forkMap[forkMapRev[nameBlock]].isTimestamp === true || typeof config[nameBlock] !== 'number'\n            ? null\n            : config[nameBlock],\n        timestamp: forkMap[forkMapRev[nameBlock]].isTimestamp === true && typeof config[nameBlock] === 'number'\n            ? config[nameBlock]\n            : undefined,\n    }))\n        .filter((fork) => fork.block !== null || fork.timestamp !== undefined);\n    params.hardforks.sort(function (a, b) {\n        return (a.block ?? Infinity) - (b.block ?? Infinity);\n    });\n    params.hardforks.sort(function (a, b) {\n        // non timestamp forks come before any timestamp forks\n        return (a.timestamp ?? 0) - (b.timestamp ?? 0);\n    });\n    // only set the genesis timestamp forks to zero post the above sort has happended\n    // to get the correct sorting\n    for (const hf of params.hardforks) {\n        if (hf.timestamp === genesisTimestamp) {\n            hf.timestamp = 0;\n        }\n    }\n    if (config.terminalTotalDifficulty !== undefined) {\n        // Following points need to be considered for placement of merge hf\n        // - Merge hardfork can't be placed at genesis\n        // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n        // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n        //   necessary for e.g. withdrawals\n        const mergeConfig = {\n            name: _enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Paris,\n            ttd: config.terminalTotalDifficulty,\n            block: null,\n        };\n        // Merge hardfork has to be placed before first hardfork that is dependent on merge\n        const postMergeIndex = params.hardforks.findIndex((hf) => forkMap[hf.name]?.postMerge === true);\n        if (postMergeIndex !== -1) {\n            params.hardforks.splice(postMergeIndex, 0, mergeConfig);\n        }\n        else {\n            params.hardforks.push(mergeConfig);\n        }\n    }\n    const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n    params.hardfork = latestHardfork?.name;\n    params.hardforks.unshift({ name: _enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Chainstart, block: 0 });\n    return params;\n}\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\nfunction parseGethGenesis(json, name, mergeForkIdPostMerge) {\n    try {\n        const required = ['config', 'difficulty', 'gasLimit', 'nonce', 'alloc'];\n        if (required.some((field) => !(field in json))) {\n            const missingField = required.filter((field) => !(field in json));\n            throw new Error(`Invalid format, expected geth genesis field \"${missingField}\" missing`);\n        }\n        // We copy the JSON object here because it's frozen in browser and properties can't be modified\n        const finalJson = { ...json };\n        if (name !== undefined) {\n            finalJson.name = name;\n        }\n        return parseGethParams(finalJson, mergeForkIdPostMerge);\n    }\n    catch (e) {\n        throw new Error(`Error parsing parameters file: ${e.message}`);\n    }\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/dist/esm/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/rlp/dist/esm/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/rlp/dist/esm/index.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RLP: function() { return /* binding */ RLP; },\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encode: function() { return /* binding */ encode; },\n/* harmony export */   utils: function() { return /* binding */ utils; }\n/* harmony export */ });\n/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        const output = [];\n        let outputLength = 0;\n        for (let i = 0; i < input.length; i++) {\n            const encoded = encode(input[i]);\n            output.push(encoded);\n            outputLength += encoded.length;\n        }\n        return concatBytes(encodeLength(outputLength, 192), ...output);\n    }\n    const inputBuf = toBytes(input);\n    if (inputBuf.length === 1 && inputBuf[0] < 128) {\n        return inputBuf;\n    }\n    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input, start, end) {\n    if (end > input.length) {\n        throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');\n    }\n    return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v) {\n    if (v[0] === 0) {\n        throw new Error('invalid RLP: extra zeros');\n    }\n    return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Uint8Array.from([len + offset]);\n    }\n    const hexLength = numberToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = numberToHex(offset + 55 + lLength);\n    return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nfunction decode(input, stream = false) {\n    if (typeof input === 'undefined' || input === null || input.length === 0) {\n        return Uint8Array.from([]);\n    }\n    const inputBytes = toBytes(input);\n    const decoded = _decode(inputBytes);\n    if (stream) {\n        return {\n            data: decoded.data,\n            remainder: decoded.remainder.slice(),\n        };\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error('invalid RLP: remainder must be zero');\n    }\n    return decoded.data;\n}\n/** Decode an input with RLP */\nfunction _decode(input) {\n    let length, llength, data, innerRemainder, d;\n    const decoded = [];\n    const firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.subarray(1),\n        };\n    }\n    else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Uint8Array.from([]);\n        }\n        else {\n            data = safeSlice(input, 1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');\n        }\n        return {\n            data,\n            remainder: input.subarray(length),\n        };\n    }\n    else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error('invalid RLP: not enough bytes for string length');\n        }\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length <= 55) {\n            throw new Error('invalid RLP: expected string length to be greater than 55');\n        }\n        data = safeSlice(input, llength, length + llength);\n        return {\n            data,\n            remainder: input.subarray(length + llength),\n        };\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between 0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = safeSlice(input, 1, length);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.subarray(length),\n        };\n    }\n    else {\n        // a list over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length < 56) {\n            throw new Error('invalid RLP: encoded list too short');\n        }\n        const totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error('invalid RLP: total length is larger than the data');\n        }\n        innerRemainder = safeSlice(input, llength, totalLength);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.subarray(totalLength),\n        };\n    }\n}\nconst cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    // Pre-caching chars with `cachedHexes` speeds this up 6x\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += cachedHexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte))\n        throw new Error('Invalid byte sequence');\n    return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes(...arrays) {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction utf8ToBytes(utf) {\n    return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer) {\n    if (integer < 0) {\n        throw new Error('Invalid integer as argument, must be unsigned!');\n    }\n    const hex = integer.toString(16);\n    return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n    return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n    return str.length >= 2 && str[0] === '0' && str[1] === 'x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */\nfunction toBytes(v) {\n    if (v instanceof Uint8Array) {\n        return v;\n    }\n    if (typeof v === 'string') {\n        if (isHexPrefixed(v)) {\n            return hexToBytes(padToEven(stripHexPrefix(v)));\n        }\n        return utf8ToBytes(v);\n    }\n    if (typeof v === 'number' || typeof v === 'bigint') {\n        if (!v) {\n            return Uint8Array.from([]);\n        }\n        return hexToBytes(numberToHex(v));\n    }\n    if (v === null || v === undefined) {\n        return Uint8Array.from([]);\n    }\n    throw new Error('toBytes: received unsupported type ' + typeof v);\n}\nconst utils = {\n    bytesToHex,\n    concatBytes,\n    hexToBytes,\n    utf8ToBytes,\n};\nconst RLP = { encode, decode };\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/rlp/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/account.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/account.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: function() { return /* binding */ Account; },\n/* harmony export */   accountBodyFromSlim: function() { return /* binding */ accountBodyFromSlim; },\n/* harmony export */   accountBodyToRLP: function() { return /* binding */ accountBodyToRLP; },\n/* harmony export */   accountBodyToSlim: function() { return /* binding */ accountBodyToSlim; },\n/* harmony export */   generateAddress: function() { return /* binding */ generateAddress; },\n/* harmony export */   generateAddress2: function() { return /* binding */ generateAddress2; },\n/* harmony export */   importPublic: function() { return /* binding */ importPublic; },\n/* harmony export */   isValidAddress: function() { return /* binding */ isValidAddress; },\n/* harmony export */   isValidChecksumAddress: function() { return /* binding */ isValidChecksumAddress; },\n/* harmony export */   isValidPrivate: function() { return /* binding */ isValidPrivate; },\n/* harmony export */   isValidPublic: function() { return /* binding */ isValidPublic; },\n/* harmony export */   isZeroAddress: function() { return /* binding */ isZeroAddress; },\n/* harmony export */   privateToAddress: function() { return /* binding */ privateToAddress; },\n/* harmony export */   privateToPublic: function() { return /* binding */ privateToPublic; },\n/* harmony export */   pubToAddress: function() { return /* binding */ pubToAddress; },\n/* harmony export */   publicToAddress: function() { return /* binding */ publicToAddress; },\n/* harmony export */   toChecksumAddress: function() { return /* binding */ toChecksumAddress; },\n/* harmony export */   zeroAddress: function() { return /* binding */ zeroAddress; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(app-pages-browser)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(app-pages-browser)/./node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n\n\n\n\n\n/**\n * Account class to load and maintain the  basic account objects.\n * Supports partial loading and access required for verkle with null\n * as the placeholder.\n *\n * Note: passing undefined in constructor is different from null\n * While undefined leads to default assignment, null is retained\n * to track the information not available/loaded because of partial\n * witness access\n */\nclass Account {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     * undefined get assigned with the defaults present, but null args are retained as is\n     */\n    constructor(nonce = _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0, balance = _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0, storageRoot = _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP, codeHash = _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL, codeSize = null, version = 0) {\n        this._nonce = null;\n        this._balance = null;\n        this._storageRoot = null;\n        this._codeHash = null;\n        // codeSize and version is separately stored in VKT\n        this._codeSize = null;\n        this._version = null;\n        this._nonce = nonce;\n        this._balance = balance;\n        this._storageRoot = storageRoot;\n        this._codeHash = codeHash;\n        if (codeSize === null && codeHash !== null && !this.isContract()) {\n            codeSize = 0;\n        }\n        this._codeSize = codeSize;\n        this._version = version;\n        this._validate();\n    }\n    get version() {\n        if (this._version !== null) {\n            return this._version;\n        }\n        else {\n            throw Error(`version=${this._version} not loaded`);\n        }\n    }\n    set version(_version) {\n        this._version = _version;\n    }\n    get nonce() {\n        if (this._nonce !== null) {\n            return this._nonce;\n        }\n        else {\n            throw Error(`nonce=${this._nonce} not loaded`);\n        }\n    }\n    set nonce(_nonce) {\n        this._nonce = _nonce;\n    }\n    get balance() {\n        if (this._balance !== null) {\n            return this._balance;\n        }\n        else {\n            throw Error(`balance=${this._balance} not loaded`);\n        }\n    }\n    set balance(_balance) {\n        this._balance = _balance;\n    }\n    get storageRoot() {\n        if (this._storageRoot !== null) {\n            return this._storageRoot;\n        }\n        else {\n            throw Error(`storageRoot=${this._storageRoot} not loaded`);\n        }\n    }\n    set storageRoot(_storageRoot) {\n        this._storageRoot = _storageRoot;\n    }\n    get codeHash() {\n        if (this._codeHash !== null) {\n            return this._codeHash;\n        }\n        else {\n            throw Error(`codeHash=${this._codeHash} not loaded`);\n        }\n    }\n    set codeHash(_codeHash) {\n        this._codeHash = _codeHash;\n    }\n    get codeSize() {\n        if (this._codeSize !== null) {\n            return this._codeSize;\n        }\n        else {\n            throw Error(`codeHash=${this._codeSize} not loaded`);\n        }\n    }\n    set codeSize(_codeSize) {\n        this._codeSize = _codeSize;\n    }\n    static fromAccountData(accountData) {\n        const { nonce, balance, storageRoot, codeHash } = accountData;\n        if (nonce === null || balance === null || storageRoot === null || codeHash === null) {\n            throw Error(`Partial fields not supported in fromAccountData`);\n        }\n        return new Account(nonce !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(nonce)) : undefined, balance !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(balance)) : undefined, storageRoot !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(storageRoot) : undefined, codeHash !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(codeHash) : undefined);\n    }\n    static fromPartialAccountData(partialAccountData) {\n        const { nonce, balance, storageRoot, codeHash, codeSize, version } = partialAccountData;\n        if (nonce === null &&\n            balance === null &&\n            storageRoot === null &&\n            codeHash === null &&\n            codeSize === null &&\n            version === null) {\n            throw Error(`All partial fields null`);\n        }\n        return new Account(nonce !== undefined && nonce !== null ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(nonce)) : nonce, balance !== undefined && balance !== null ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(balance)) : balance, storageRoot !== undefined && storageRoot !== null ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(storageRoot) : storageRoot, codeHash !== undefined && codeHash !== null ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(codeHash) : codeHash, codeSize !== undefined && codeSize !== null ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(codeSize)) : codeSize, version !== undefined && version !== null ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(version)) : version);\n    }\n    static fromRlpSerializedAccount(serialized) {\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized account input. Must be array');\n        }\n        return this.fromValuesArray(values);\n    }\n    static fromRlpSerializedPartialAccount(serialized) {\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized account input. Must be array');\n        }\n        let nonce = null;\n        if (!Array.isArray(values[0])) {\n            throw new Error('Invalid partial nonce encoding. Must be array');\n        }\n        else {\n            const isNotNullIndicator = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[0][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for nonce`);\n            }\n            if (isNotNullIndicator === 1) {\n                nonce = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(values[0][1]);\n            }\n        }\n        let balance = null;\n        if (!Array.isArray(values[1])) {\n            throw new Error('Invalid partial balance encoding. Must be array');\n        }\n        else {\n            const isNotNullIndicator = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[1][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for balance`);\n            }\n            if (isNotNullIndicator === 1) {\n                balance = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(values[1][1]);\n            }\n        }\n        let storageRoot = null;\n        if (!Array.isArray(values[2])) {\n            throw new Error('Invalid partial storageRoot encoding. Must be array');\n        }\n        else {\n            const isNotNullIndicator = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[2][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for storageRoot`);\n            }\n            if (isNotNullIndicator === 1) {\n                storageRoot = values[2][1];\n            }\n        }\n        let codeHash = null;\n        if (!Array.isArray(values[3])) {\n            throw new Error('Invalid partial codeHash encoding. Must be array');\n        }\n        else {\n            const isNotNullIndicator = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[3][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for codeHash`);\n            }\n            if (isNotNullIndicator === 1) {\n                codeHash = values[3][1];\n            }\n        }\n        let codeSize = null;\n        if (!Array.isArray(values[4])) {\n            throw new Error('Invalid partial codeSize encoding. Must be array');\n        }\n        else {\n            const isNotNullIndicator = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[4][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for codeSize`);\n            }\n            if (isNotNullIndicator === 1) {\n                codeSize = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[4][1]);\n            }\n        }\n        let version = null;\n        if (!Array.isArray(values[5])) {\n            throw new Error('Invalid partial version encoding. Must be array');\n        }\n        else {\n            const isNotNullIndicator = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[5][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for version`);\n            }\n            if (isNotNullIndicator === 1) {\n                version = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToInt)(values[5][1]);\n            }\n        }\n        return this.fromPartialAccountData({ balance, nonce, storageRoot, codeHash, codeSize, version });\n    }\n    static fromValuesArray(values) {\n        const [nonce, balance, storageRoot, codeHash] = values;\n        return new Account((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(nonce), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(balance), storageRoot, codeHash);\n    }\n    _validate() {\n        if (this._nonce !== null && this._nonce < _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n            throw new Error('nonce must be greater than zero');\n        }\n        if (this._balance !== null && this._balance < _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n            throw new Error('balance must be greater than zero');\n        }\n        if (this._storageRoot !== null && this._storageRoot.length !== 32) {\n            throw new Error('storageRoot must have a length of 32');\n        }\n        if (this._codeHash !== null && this._codeHash.length !== 32) {\n            throw new Error('codeHash must have a length of 32');\n        }\n        if (this._codeSize !== null && this._codeSize < _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n            throw new Error('codeSize must be greater than zero');\n        }\n    }\n    /**\n     * Returns an array of Uint8Arrays of the raw bytes for the account, in order.\n     */\n    raw() {\n        return [\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this.balance),\n            this.storageRoot,\n            this.codeHash,\n        ];\n    }\n    /**\n     * Returns the RLP serialization of the account as a `Uint8Array`.\n     */\n    serialize() {\n        return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(this.raw());\n    }\n    serializeWithPartialInfo() {\n        const partialData = [];\n        const zeroEncoded = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.intToUnpaddedBytes)(0);\n        const oneEncoded = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.intToUnpaddedBytes)(1);\n        if (this._nonce !== null) {\n            partialData.push([oneEncoded, (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this._nonce)]);\n        }\n        else {\n            partialData.push([zeroEncoded]);\n        }\n        if (this._balance !== null) {\n            partialData.push([oneEncoded, (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this._balance)]);\n        }\n        else {\n            partialData.push([zeroEncoded]);\n        }\n        if (this._storageRoot !== null) {\n            partialData.push([oneEncoded, this._storageRoot]);\n        }\n        else {\n            partialData.push([zeroEncoded]);\n        }\n        if (this._codeHash !== null) {\n            partialData.push([oneEncoded, this._codeHash]);\n        }\n        else {\n            partialData.push([zeroEncoded]);\n        }\n        if (this._codeSize !== null) {\n            partialData.push([oneEncoded, (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.intToUnpaddedBytes)(this._codeSize)]);\n        }\n        else {\n            partialData.push([zeroEncoded]);\n        }\n        if (this._version !== null) {\n            partialData.push([oneEncoded, (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.intToUnpaddedBytes)(this._version)]);\n        }\n        else {\n            partialData.push([zeroEncoded]);\n        }\n        return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(partialData);\n    }\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */\n    isContract() {\n        if (this._codeHash === null && this._codeSize === null) {\n            throw Error(`Insufficient data as codeHash=null and codeSize=null`);\n        }\n        return ((this._codeHash !== null && !(0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(this._codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL)) ||\n            (this._codeSize !== null && this._codeSize !== 0));\n    }\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */\n    isEmpty() {\n        // helpful for determination in partial accounts\n        if ((this._balance !== null && this.balance !== _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) ||\n            (this._nonce === null && this.nonce !== _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) ||\n            (this._codeHash !== null && !(0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(this.codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL))) {\n            return false;\n        }\n        return (this.balance === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0 &&\n            this.nonce === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0 &&\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(this.codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL));\n    }\n}\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nconst isValidAddress = function (hexAddress) {\n    try {\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nconst toChecksumAddress = function (hexAddress, eip1191ChainId) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsHexString)(hexAddress);\n    const address = (0,_internal_js__WEBPACK_IMPORTED_MODULE_6__.stripHexPrefix)(hexAddress).toLowerCase();\n    let prefix = '';\n    if (eip1191ChainId !== undefined) {\n        const chainId = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(eip1191ChainId));\n        prefix = chainId.toString() + '0x';\n    }\n    const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.utf8ToBytes)(prefix + address);\n    const hash = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)((0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(bytes)).slice(2);\n    let ret = '';\n    for (let i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        }\n        else {\n            ret += address[i];\n        }\n    }\n    return `0x${ret}`;\n};\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nconst isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n    return isValidAddress(hexAddress) && toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress;\n};\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nconst generateAddress = function (from, nonce) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(from);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(nonce);\n    if ((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(nonce) === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([from, Uint8Array.from([])])).subarray(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([from, nonce])).subarray(-20);\n};\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nconst generateAddress2 = function (from, salt, initCode) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(from);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(salt);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(initCode);\n    if (from.length !== 20) {\n        throw new Error('Expected from to be of length 20');\n    }\n    if (salt.length !== 32) {\n        throw new Error('Expected salt to be of length 32');\n    }\n    const address = (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)('0xff'), from, salt, (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(initCode)));\n    return address.subarray(-20);\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nconst isValidPrivate = function (privateKey) {\n    return ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.utils.isValidPrivateKey(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nconst isValidPublic = function (publicKey, sanitize = false) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        // Automatically checks whether point is on curve\n        try {\n            ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(Uint8Array.from([4]), publicKey));\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    if (!sanitize) {\n        return false;\n    }\n    try {\n        ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(publicKey);\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nconst pubToAddress = function (pubKey, sanitize = false) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);\n    }\n    if (pubKey.length !== 64) {\n        throw new Error('Expected pubKey to be of length 64');\n    }\n    // Only take the lower 160bits of the hash\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(pubKey).subarray(-20);\n};\nconst publicToAddress = pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nconst privateToPublic = function (privateKey) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(privateKey);\n    // skip the type flag and use the X, Y points\n    return ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1);\n};\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nconst privateToAddress = function (privateKey) {\n    return publicToAddress(privateToPublic(privateKey));\n};\n/**\n * Converts a public key to the Ethereum format.\n */\nconst importPublic = function (publicKey) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1);\n    }\n    return publicKey;\n};\n/**\n * Returns the zero address.\n */\nconst zeroAddress = function () {\n    const addressLength = 20;\n    const addr = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.zeros)(addressLength);\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(addr);\n};\n/**\n * Checks if a given address is the zero address.\n */\nconst isZeroAddress = function (hexAddress) {\n    try {\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    const zeroAddr = zeroAddress();\n    return zeroAddr === hexAddress;\n};\nfunction accountBodyFromSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        storageRoot.length === 0 ? _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP : storageRoot,\n        codeHash.length === 0 ? _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL : codeHash,\n    ];\n}\nconst emptyUint8Arr = new Uint8Array(0);\nfunction accountBodyToSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(storageRoot, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP) ? emptyUint8Arr : storageRoot,\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL) ? emptyUint8Arr : codeHash,\n    ];\n}\n/**\n * Converts a slim account (per snap protocol spec) to the RLP encoded version of the account\n * @param body Array of 4 Uint8Array-like items to represent the account\n * @returns RLP encoded version of the account\n */\nfunction accountBodyToRLP(body, couldBeSlim = true) {\n    const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;\n    return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(accountBody);\n}\n//# sourceMappingURL=account.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/account.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/address.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/address.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Address: function() { return /* binding */ Address; }\n/* harmony export */ });\n/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./account.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/account.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n\n\n\n/**\n * Handling and generating Ethereum addresses\n */\nclass Address {\n    constructor(bytes) {\n        if (bytes.length !== 20) {\n            throw new Error('Invalid address length');\n        }\n        this.bytes = bytes;\n    }\n    /**\n     * Returns the zero address.\n     */\n    static zero() {\n        return new Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.zeros)(20));\n    }\n    /**\n     * Returns an Address object from a hex-encoded string.\n     * @param str - Hex-encoded address\n     */\n    static fromString(str) {\n        if (!(0,_account_js__WEBPACK_IMPORTED_MODULE_0__.isValidAddress)(str)) {\n            throw new Error(`Invalid address input=${str}`);\n        }\n        return new Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(str));\n    }\n    /**\n     * Returns an address for a given public key.\n     * @param pubKey The two points of an uncompressed key\n     */\n    static fromPublicKey(pubKey) {\n        if (!(pubKey instanceof Uint8Array)) {\n            throw new Error('Public key should be Uint8Array');\n        }\n        const bytes = (0,_account_js__WEBPACK_IMPORTED_MODULE_0__.pubToAddress)(pubKey);\n        return new Address(bytes);\n    }\n    /**\n     * Returns an address for a given private key.\n     * @param privateKey A private key must be 256 bits wide\n     */\n    static fromPrivateKey(privateKey) {\n        if (!(privateKey instanceof Uint8Array)) {\n            throw new Error('Private key should be Uint8Array');\n        }\n        const bytes = (0,_account_js__WEBPACK_IMPORTED_MODULE_0__.privateToAddress)(privateKey);\n        return new Address(bytes);\n    }\n    /**\n     * Generates an address for a newly created contract.\n     * @param from The address which is creating this new address\n     * @param nonce The nonce of the from account\n     */\n    static generate(from, nonce) {\n        if (typeof nonce !== 'bigint') {\n            throw new Error('Expected nonce to be a bigint');\n        }\n        return new Address((0,_account_js__WEBPACK_IMPORTED_MODULE_0__.generateAddress)(from.bytes, (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(nonce)));\n    }\n    /**\n     * Generates an address for a contract created using CREATE2.\n     * @param from The address which is creating this new address\n     * @param salt A salt\n     * @param initCode The init code of the contract being created\n     */\n    static generate2(from, salt, initCode) {\n        if (!(salt instanceof Uint8Array)) {\n            throw new Error('Expected salt to be a Uint8Array');\n        }\n        if (!(initCode instanceof Uint8Array)) {\n            throw new Error('Expected initCode to be a Uint8Array');\n        }\n        return new Address((0,_account_js__WEBPACK_IMPORTED_MODULE_0__.generateAddress2)(from.bytes, salt, initCode));\n    }\n    /**\n     * Is address equal to another.\n     */\n    equals(address) {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(this.bytes, address.bytes);\n    }\n    /**\n     * Is address zero.\n     */\n    isZero() {\n        return this.equals(Address.zero());\n    }\n    /**\n     * True if address is in the address range defined\n     * by EIP-1352\n     */\n    isPrecompileOrSystemAddress() {\n        const address = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(this.bytes);\n        const rangeMin = _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0;\n        const rangeMax = BigInt('0xffff');\n        return address >= rangeMin && address <= rangeMax;\n    }\n    /**\n     * Returns hex encoding of address.\n     */\n    toString() {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.bytes);\n    }\n    /**\n     * Returns a new Uint8Array representation of address.\n     */\n    toBytes() {\n        return new Uint8Array(this.bytes);\n    }\n}\n//# sourceMappingURL=address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vYWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtIO0FBQ1g7QUFDN0Q7QUFDMUM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixnREFBSztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDJEQUFjO0FBQzNCLHFEQUFxRCxJQUFJO0FBQ3pEO0FBQ0EsMkJBQTJCLHFEQUFVO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix5REFBWTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw2REFBZ0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw0REFBZSxhQUFhLHdEQUFhO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsNkRBQWdCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHNEQUFXO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3REFBYTtBQUNyQyx5QkFBeUIsbURBQVE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHFEQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2FkZHJlc3MuanM/YWE2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5lcmF0ZUFkZHJlc3MsIGdlbmVyYXRlQWRkcmVzczIsIGlzVmFsaWRBZGRyZXNzLCBwcml2YXRlVG9BZGRyZXNzLCBwdWJUb0FkZHJlc3MsIH0gZnJvbSAnLi9hY2NvdW50LmpzJztcbmltcG9ydCB7IGJpZ0ludFRvQnl0ZXMsIGJ5dGVzVG9CaWdJbnQsIGJ5dGVzVG9IZXgsIGVxdWFsc0J5dGVzLCBoZXhUb0J5dGVzLCB6ZXJvcywgfSBmcm9tICcuL2J5dGVzLmpzJztcbmltcG9ydCB7IEJJR0lOVF8wIH0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuLyoqXG4gKiBIYW5kbGluZyBhbmQgZ2VuZXJhdGluZyBFdGhlcmV1bSBhZGRyZXNzZXNcbiAqL1xuZXhwb3J0IGNsYXNzIEFkZHJlc3Mge1xuICAgIGNvbnN0cnVjdG9yKGJ5dGVzKSB7XG4gICAgICAgIGlmIChieXRlcy5sZW5ndGggIT09IDIwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYWRkcmVzcyBsZW5ndGgnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ5dGVzID0gYnl0ZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHplcm8gYWRkcmVzcy5cbiAgICAgKi9cbiAgICBzdGF0aWMgemVybygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBZGRyZXNzKHplcm9zKDIwKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gQWRkcmVzcyBvYmplY3QgZnJvbSBhIGhleC1lbmNvZGVkIHN0cmluZy5cbiAgICAgKiBAcGFyYW0gc3RyIC0gSGV4LWVuY29kZWQgYWRkcmVzc1xuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tU3RyaW5nKHN0cikge1xuICAgICAgICBpZiAoIWlzVmFsaWRBZGRyZXNzKHN0cikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhZGRyZXNzIGlucHV0PSR7c3RyfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcyhoZXhUb0J5dGVzKHN0cikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFkZHJlc3MgZm9yIGEgZ2l2ZW4gcHVibGljIGtleS5cbiAgICAgKiBAcGFyYW0gcHViS2V5IFRoZSB0d28gcG9pbnRzIG9mIGFuIHVuY29tcHJlc3NlZCBrZXlcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVB1YmxpY0tleShwdWJLZXkpIHtcbiAgICAgICAgaWYgKCEocHViS2V5IGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUHVibGljIGtleSBzaG91bGQgYmUgVWludDhBcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gcHViVG9BZGRyZXNzKHB1YktleSk7XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcyhieXRlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYWRkcmVzcyBmb3IgYSBnaXZlbiBwcml2YXRlIGtleS5cbiAgICAgKiBAcGFyYW0gcHJpdmF0ZUtleSBBIHByaXZhdGUga2V5IG11c3QgYmUgMjU2IGJpdHMgd2lkZVxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tUHJpdmF0ZUtleShwcml2YXRlS2V5KSB7XG4gICAgICAgIGlmICghKHByaXZhdGVLZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQcml2YXRlIGtleSBzaG91bGQgYmUgVWludDhBcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gcHJpdmF0ZVRvQWRkcmVzcyhwcml2YXRlS2V5KTtcbiAgICAgICAgcmV0dXJuIG5ldyBBZGRyZXNzKGJ5dGVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGFuIGFkZHJlc3MgZm9yIGEgbmV3bHkgY3JlYXRlZCBjb250cmFjdC5cbiAgICAgKiBAcGFyYW0gZnJvbSBUaGUgYWRkcmVzcyB3aGljaCBpcyBjcmVhdGluZyB0aGlzIG5ldyBhZGRyZXNzXG4gICAgICogQHBhcmFtIG5vbmNlIFRoZSBub25jZSBvZiB0aGUgZnJvbSBhY2NvdW50XG4gICAgICovXG4gICAgc3RhdGljIGdlbmVyYXRlKGZyb20sIG5vbmNlKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygbm9uY2UgIT09ICdiaWdpbnQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIG5vbmNlIHRvIGJlIGEgYmlnaW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBBZGRyZXNzKGdlbmVyYXRlQWRkcmVzcyhmcm9tLmJ5dGVzLCBiaWdJbnRUb0J5dGVzKG5vbmNlKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYW4gYWRkcmVzcyBmb3IgYSBjb250cmFjdCBjcmVhdGVkIHVzaW5nIENSRUFURTIuXG4gICAgICogQHBhcmFtIGZyb20gVGhlIGFkZHJlc3Mgd2hpY2ggaXMgY3JlYXRpbmcgdGhpcyBuZXcgYWRkcmVzc1xuICAgICAqIEBwYXJhbSBzYWx0IEEgc2FsdFxuICAgICAqIEBwYXJhbSBpbml0Q29kZSBUaGUgaW5pdCBjb2RlIG9mIHRoZSBjb250cmFjdCBiZWluZyBjcmVhdGVkXG4gICAgICovXG4gICAgc3RhdGljIGdlbmVyYXRlMihmcm9tLCBzYWx0LCBpbml0Q29kZSkge1xuICAgICAgICBpZiAoIShzYWx0IGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgc2FsdCB0byBiZSBhIFVpbnQ4QXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShpbml0Q29kZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGluaXRDb2RlIHRvIGJlIGEgVWludDhBcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcyhnZW5lcmF0ZUFkZHJlc3MyKGZyb20uYnl0ZXMsIHNhbHQsIGluaXRDb2RlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElzIGFkZHJlc3MgZXF1YWwgdG8gYW5vdGhlci5cbiAgICAgKi9cbiAgICBlcXVhbHMoYWRkcmVzcykge1xuICAgICAgICByZXR1cm4gZXF1YWxzQnl0ZXModGhpcy5ieXRlcywgYWRkcmVzcy5ieXRlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElzIGFkZHJlc3MgemVyby5cbiAgICAgKi9cbiAgICBpc1plcm8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVxdWFscyhBZGRyZXNzLnplcm8oKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRydWUgaWYgYWRkcmVzcyBpcyBpbiB0aGUgYWRkcmVzcyByYW5nZSBkZWZpbmVkXG4gICAgICogYnkgRUlQLTEzNTJcbiAgICAgKi9cbiAgICBpc1ByZWNvbXBpbGVPclN5c3RlbUFkZHJlc3MoKSB7XG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSBieXRlc1RvQmlnSW50KHRoaXMuYnl0ZXMpO1xuICAgICAgICBjb25zdCByYW5nZU1pbiA9IEJJR0lOVF8wO1xuICAgICAgICBjb25zdCByYW5nZU1heCA9IEJpZ0ludCgnMHhmZmZmJyk7XG4gICAgICAgIHJldHVybiBhZGRyZXNzID49IHJhbmdlTWluICYmIGFkZHJlc3MgPD0gcmFuZ2VNYXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaGV4IGVuY29kaW5nIG9mIGFkZHJlc3MuXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBieXRlc1RvSGV4KHRoaXMuYnl0ZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFVpbnQ4QXJyYXkgcmVwcmVzZW50YXRpb24gb2YgYWRkcmVzcy5cbiAgICAgKi9cbiAgICB0b0J5dGVzKCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkodGhpcy5ieXRlcyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/address.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncEventEmitter: function() { return /* binding */ AsyncEventEmitter; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/**\n * Ported to Typescript from original implementation below:\n * https://github.com/ahultgren/async-eventemitter -- MIT licensed\n *\n * Type Definitions based on work by: patarapolw <https://github.com/patarapolw> -- MIT licensed\n * that was contributed to Definitely Typed below:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/async-eventemitter\n */\n\nasync function runInSeries(context, tasks, data) {\n    let error;\n    for await (const task of tasks) {\n        try {\n            if (task.length < 2) {\n                //sync\n                task.call(context, data);\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    task.call(context, data, (error) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            resolve();\n                        }\n                    });\n                });\n            }\n        }\n        catch (e) {\n            error = e;\n        }\n    }\n    if (error) {\n        throw error;\n    }\n}\nclass AsyncEventEmitter extends events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n    emit(event, ...args) {\n        let [data, callback] = args;\n        const self = this;\n        let listeners = self._events[event] ?? [];\n        // Optional data argument\n        if (callback === undefined && typeof data === 'function') {\n            callback = data;\n            data = undefined;\n        }\n        // Special treatment of internal newListener and removeListener events\n        if (event === 'newListener' || event === 'removeListener') {\n            data = {\n                event: data,\n                fn: callback,\n            };\n            callback = undefined;\n        }\n        // A single listener is just a function not an array...\n        listeners = Array.isArray(listeners) ? listeners : [listeners];\n        runInSeries(self, listeners.slice(), data).then(callback).catch(callback);\n        return self.listenerCount(event) > 0;\n    }\n    once(event, listener) {\n        const self = this;\n        let g;\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        // Hack to support set arity\n        if (listener.length >= 2) {\n            g = function (e, next) {\n                self.removeListener(event, g);\n                void listener(e, next);\n            };\n        }\n        else {\n            g = function (e) {\n                self.removeListener(event, g);\n                void listener(e, g);\n            };\n        }\n        self.on(event, g);\n        return self;\n    }\n    first(event, listener) {\n        let listeners = this._events[event] ?? [];\n        // Contract\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [listeners];\n        }\n        listeners.unshift(listener);\n        return this;\n    }\n    before(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener);\n    }\n    after(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener, 'after');\n    }\n    beforeOrAfter(event, target, listener, beforeOrAfter) {\n        let listeners = this._events[event] ?? [];\n        let i;\n        let index;\n        const add = beforeOrAfter === 'after' ? 1 : 0;\n        // Contract\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        if (typeof target !== 'function') {\n            throw new TypeError('target must be a function');\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [listeners];\n        }\n        index = listeners.length;\n        for (i = listeners.length; i--;) {\n            if (listeners[i] === target) {\n                index = i + add;\n                break;\n            }\n        }\n        listeners.splice(index, 0, listener);\n        return this;\n    }\n    on(event, listener) {\n        return super.on(event, listener);\n    }\n    addListener(event, listener) {\n        return super.addListener(event, listener);\n    }\n    prependListener(event, listener) {\n        return super.prependListener(event, listener);\n    }\n    prependOnceListener(event, listener) {\n        return super.prependOnceListener(event, listener);\n    }\n    removeAllListeners(event) {\n        return super.removeAllListeners(event);\n    }\n    removeListener(event, listener) {\n        return super.removeListener(event, listener);\n    }\n    eventNames() {\n        return super.eventNames();\n    }\n    listeners(event) {\n        return super.listeners(event);\n    }\n    listenerCount(event) {\n        return super.listenerCount(event);\n    }\n    getMaxListeners() {\n        return super.getMaxListeners();\n    }\n    setMaxListeners(maxListeners) {\n        return super.setMaxListeners(maxListeners);\n    }\n}\n//# sourceMappingURL=asyncEventEmitter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/blobs.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/blobs.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blobsToCommitments: function() { return /* binding */ blobsToCommitments; },\n/* harmony export */   blobsToProofs: function() { return /* binding */ blobsToProofs; },\n/* harmony export */   commitmentsToVersionedHashes: function() { return /* binding */ commitmentsToVersionedHashes; },\n/* harmony export */   computeVersionedHash: function() { return /* binding */ computeVersionedHash; },\n/* harmony export */   getBlobs: function() { return /* binding */ getBlobs; }\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_sha256_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/sha256.js */ \"(app-pages-browser)/./node_modules/ethereum-cryptography/esm/sha256.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\n\n/**\n * These utilities for constructing blobs are borrowed from https://github.com/Inphi/eip4844-interop.git\n */\nconst BYTES_PER_FIELD_ELEMENT = 32;\nconst FIELD_ELEMENTS_PER_BLOB = 4096;\nconst USEFUL_BYTES_PER_BLOB = 32 * FIELD_ELEMENTS_PER_BLOB;\nconst MAX_BLOBS_PER_TX = 2;\nconst MAX_USEFUL_BYTES_PER_TX = USEFUL_BYTES_PER_BLOB * MAX_BLOBS_PER_TX - 1;\nconst BLOB_SIZE = BYTES_PER_FIELD_ELEMENT * FIELD_ELEMENTS_PER_BLOB;\nfunction get_padded(data, blobs_len) {\n    const pdata = new Uint8Array(blobs_len * USEFUL_BYTES_PER_BLOB).fill(0);\n    pdata.set(data);\n    pdata[data.byteLength] = 0x80;\n    return pdata;\n}\nfunction get_blob(data) {\n    const blob = new Uint8Array(BLOB_SIZE);\n    for (let i = 0; i < FIELD_ELEMENTS_PER_BLOB; i++) {\n        const chunk = new Uint8Array(32);\n        chunk.set(data.subarray(i * 31, (i + 1) * 31), 0);\n        blob.set(chunk, i * 32);\n    }\n    return blob;\n}\nconst getBlobs = (input) => {\n    const data = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes)(input);\n    const len = data.byteLength;\n    if (len === 0) {\n        throw Error('invalid blob data');\n    }\n    if (len > MAX_USEFUL_BYTES_PER_TX) {\n        throw Error('blob data is too large');\n    }\n    const blobs_len = Math.ceil(len / USEFUL_BYTES_PER_BLOB);\n    const pdata = get_padded(data, blobs_len);\n    const blobs = [];\n    for (let i = 0; i < blobs_len; i++) {\n        const chunk = pdata.subarray(i * USEFUL_BYTES_PER_BLOB, (i + 1) * USEFUL_BYTES_PER_BLOB);\n        const blob = get_blob(chunk);\n        blobs.push(blob);\n    }\n    return blobs;\n};\nconst blobsToCommitments = (kzg, blobs) => {\n    const commitments = [];\n    for (const blob of blobs) {\n        commitments.push(kzg.blobToKzgCommitment(blob));\n    }\n    return commitments;\n};\nconst blobsToProofs = (kzg, blobs, commitments) => {\n    const proofs = blobs.map((blob, ctx) => kzg.computeBlobKzgProof(blob, commitments[ctx]));\n    return proofs;\n};\n/**\n * Converts a vector commitment for a given data blob to its versioned hash.  For 4844, this version\n * number will be 0x01 for KZG vector commitments but could be different if future vector commitment\n * types are introduced\n * @param commitment a vector commitment to a blob\n * @param blobCommitmentVersion the version number corresponding to the type of vector commitment\n * @returns a versioned hash corresponding to a given blob vector commitment\n */\nconst computeVersionedHash = (commitment, blobCommitmentVersion) => {\n    const computedVersionedHash = new Uint8Array(32);\n    computedVersionedHash.set([blobCommitmentVersion], 0);\n    computedVersionedHash.set((0,ethereum_cryptography_sha256_js__WEBPACK_IMPORTED_MODULE_0__.sha256)(commitment).subarray(1), 1);\n    return computedVersionedHash;\n};\n/**\n * Generate an array of versioned hashes from corresponding kzg commitments\n * @param commitments array of kzg commitments\n * @returns array of versioned hashes\n * Note: assumes KZG commitments (version 1 version hashes)\n */\nconst commitmentsToVersionedHashes = (commitments) => {\n    const hashes = [];\n    for (const commitment of commitments) {\n        hashes.push(computeVersionedHash(commitment, 0x01));\n    }\n    return hashes;\n};\n//# sourceMappingURL=blobs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vYmxvYnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF5RDtBQUNoQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDZCQUE2QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGlCQUFpQixzREFBVztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixlQUFlO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsOEJBQThCLHVFQUFNO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vYmxvYnMuanM/ZDllMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzaGEyNTYgfSBmcm9tICdldGhlcmV1bS1jcnlwdG9ncmFwaHkvc2hhMjU2LmpzJztcbmltcG9ydCB7IHV0ZjhUb0J5dGVzIH0gZnJvbSAnLi9ieXRlcy5qcyc7XG4vKipcbiAqIFRoZXNlIHV0aWxpdGllcyBmb3IgY29uc3RydWN0aW5nIGJsb2JzIGFyZSBib3Jyb3dlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9JbnBoaS9laXA0ODQ0LWludGVyb3AuZ2l0XG4gKi9cbmNvbnN0IEJZVEVTX1BFUl9GSUVMRF9FTEVNRU5UID0gMzI7XG5jb25zdCBGSUVMRF9FTEVNRU5UU19QRVJfQkxPQiA9IDQwOTY7XG5jb25zdCBVU0VGVUxfQllURVNfUEVSX0JMT0IgPSAzMiAqIEZJRUxEX0VMRU1FTlRTX1BFUl9CTE9CO1xuY29uc3QgTUFYX0JMT0JTX1BFUl9UWCA9IDI7XG5jb25zdCBNQVhfVVNFRlVMX0JZVEVTX1BFUl9UWCA9IFVTRUZVTF9CWVRFU19QRVJfQkxPQiAqIE1BWF9CTE9CU19QRVJfVFggLSAxO1xuY29uc3QgQkxPQl9TSVpFID0gQllURVNfUEVSX0ZJRUxEX0VMRU1FTlQgKiBGSUVMRF9FTEVNRU5UU19QRVJfQkxPQjtcbmZ1bmN0aW9uIGdldF9wYWRkZWQoZGF0YSwgYmxvYnNfbGVuKSB7XG4gICAgY29uc3QgcGRhdGEgPSBuZXcgVWludDhBcnJheShibG9ic19sZW4gKiBVU0VGVUxfQllURVNfUEVSX0JMT0IpLmZpbGwoMCk7XG4gICAgcGRhdGEuc2V0KGRhdGEpO1xuICAgIHBkYXRhW2RhdGEuYnl0ZUxlbmd0aF0gPSAweDgwO1xuICAgIHJldHVybiBwZGF0YTtcbn1cbmZ1bmN0aW9uIGdldF9ibG9iKGRhdGEpIHtcbiAgICBjb25zdCBibG9iID0gbmV3IFVpbnQ4QXJyYXkoQkxPQl9TSVpFKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IEZJRUxEX0VMRU1FTlRTX1BFUl9CTE9COyBpKyspIHtcbiAgICAgICAgY29uc3QgY2h1bmsgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgICAgIGNodW5rLnNldChkYXRhLnN1YmFycmF5KGkgKiAzMSwgKGkgKyAxKSAqIDMxKSwgMCk7XG4gICAgICAgIGJsb2Iuc2V0KGNodW5rLCBpICogMzIpO1xuICAgIH1cbiAgICByZXR1cm4gYmxvYjtcbn1cbmV4cG9ydCBjb25zdCBnZXRCbG9icyA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSB1dGY4VG9CeXRlcyhpbnB1dCk7XG4gICAgY29uc3QgbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ2ludmFsaWQgYmxvYiBkYXRhJyk7XG4gICAgfVxuICAgIGlmIChsZW4gPiBNQVhfVVNFRlVMX0JZVEVTX1BFUl9UWCkge1xuICAgICAgICB0aHJvdyBFcnJvcignYmxvYiBkYXRhIGlzIHRvbyBsYXJnZScpO1xuICAgIH1cbiAgICBjb25zdCBibG9ic19sZW4gPSBNYXRoLmNlaWwobGVuIC8gVVNFRlVMX0JZVEVTX1BFUl9CTE9CKTtcbiAgICBjb25zdCBwZGF0YSA9IGdldF9wYWRkZWQoZGF0YSwgYmxvYnNfbGVuKTtcbiAgICBjb25zdCBibG9icyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvYnNfbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2h1bmsgPSBwZGF0YS5zdWJhcnJheShpICogVVNFRlVMX0JZVEVTX1BFUl9CTE9CLCAoaSArIDEpICogVVNFRlVMX0JZVEVTX1BFUl9CTE9CKTtcbiAgICAgICAgY29uc3QgYmxvYiA9IGdldF9ibG9iKGNodW5rKTtcbiAgICAgICAgYmxvYnMucHVzaChibG9iKTtcbiAgICB9XG4gICAgcmV0dXJuIGJsb2JzO1xufTtcbmV4cG9ydCBjb25zdCBibG9ic1RvQ29tbWl0bWVudHMgPSAoa3pnLCBibG9icykgPT4ge1xuICAgIGNvbnN0IGNvbW1pdG1lbnRzID0gW107XG4gICAgZm9yIChjb25zdCBibG9iIG9mIGJsb2JzKSB7XG4gICAgICAgIGNvbW1pdG1lbnRzLnB1c2goa3pnLmJsb2JUb0t6Z0NvbW1pdG1lbnQoYmxvYikpO1xuICAgIH1cbiAgICByZXR1cm4gY29tbWl0bWVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGJsb2JzVG9Qcm9vZnMgPSAoa3pnLCBibG9icywgY29tbWl0bWVudHMpID0+IHtcbiAgICBjb25zdCBwcm9vZnMgPSBibG9icy5tYXAoKGJsb2IsIGN0eCkgPT4ga3pnLmNvbXB1dGVCbG9iS3pnUHJvb2YoYmxvYiwgY29tbWl0bWVudHNbY3R4XSkpO1xuICAgIHJldHVybiBwcm9vZnM7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhIHZlY3RvciBjb21taXRtZW50IGZvciBhIGdpdmVuIGRhdGEgYmxvYiB0byBpdHMgdmVyc2lvbmVkIGhhc2guICBGb3IgNDg0NCwgdGhpcyB2ZXJzaW9uXG4gKiBudW1iZXIgd2lsbCBiZSAweDAxIGZvciBLWkcgdmVjdG9yIGNvbW1pdG1lbnRzIGJ1dCBjb3VsZCBiZSBkaWZmZXJlbnQgaWYgZnV0dXJlIHZlY3RvciBjb21taXRtZW50XG4gKiB0eXBlcyBhcmUgaW50cm9kdWNlZFxuICogQHBhcmFtIGNvbW1pdG1lbnQgYSB2ZWN0b3IgY29tbWl0bWVudCB0byBhIGJsb2JcbiAqIEBwYXJhbSBibG9iQ29tbWl0bWVudFZlcnNpb24gdGhlIHZlcnNpb24gbnVtYmVyIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHR5cGUgb2YgdmVjdG9yIGNvbW1pdG1lbnRcbiAqIEByZXR1cm5zIGEgdmVyc2lvbmVkIGhhc2ggY29ycmVzcG9uZGluZyB0byBhIGdpdmVuIGJsb2IgdmVjdG9yIGNvbW1pdG1lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbXB1dGVWZXJzaW9uZWRIYXNoID0gKGNvbW1pdG1lbnQsIGJsb2JDb21taXRtZW50VmVyc2lvbikgPT4ge1xuICAgIGNvbnN0IGNvbXB1dGVkVmVyc2lvbmVkSGFzaCA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgICBjb21wdXRlZFZlcnNpb25lZEhhc2guc2V0KFtibG9iQ29tbWl0bWVudFZlcnNpb25dLCAwKTtcbiAgICBjb21wdXRlZFZlcnNpb25lZEhhc2guc2V0KHNoYTI1Nihjb21taXRtZW50KS5zdWJhcnJheSgxKSwgMSk7XG4gICAgcmV0dXJuIGNvbXB1dGVkVmVyc2lvbmVkSGFzaDtcbn07XG4vKipcbiAqIEdlbmVyYXRlIGFuIGFycmF5IG9mIHZlcnNpb25lZCBoYXNoZXMgZnJvbSBjb3JyZXNwb25kaW5nIGt6ZyBjb21taXRtZW50c1xuICogQHBhcmFtIGNvbW1pdG1lbnRzIGFycmF5IG9mIGt6ZyBjb21taXRtZW50c1xuICogQHJldHVybnMgYXJyYXkgb2YgdmVyc2lvbmVkIGhhc2hlc1xuICogTm90ZTogYXNzdW1lcyBLWkcgY29tbWl0bWVudHMgKHZlcnNpb24gMSB2ZXJzaW9uIGhhc2hlcylcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbW1pdG1lbnRzVG9WZXJzaW9uZWRIYXNoZXMgPSAoY29tbWl0bWVudHMpID0+IHtcbiAgICBjb25zdCBoYXNoZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGNvbW1pdG1lbnQgb2YgY29tbWl0bWVudHMpIHtcbiAgICAgICAgaGFzaGVzLnB1c2goY29tcHV0ZVZlcnNpb25lZEhhc2goY29tbWl0bWVudCwgMHgwMSkpO1xuICAgIH1cbiAgICByZXR1cm4gaGFzaGVzO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJsb2JzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/blobs.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHexPrefix: function() { return /* binding */ addHexPrefix; },\n/* harmony export */   bigInt64ToBytes: function() { return /* binding */ bigInt64ToBytes; },\n/* harmony export */   bigIntMax: function() { return /* binding */ bigIntMax; },\n/* harmony export */   bigIntMin: function() { return /* binding */ bigIntMin; },\n/* harmony export */   bigIntToAddressBytes: function() { return /* binding */ bigIntToAddressBytes; },\n/* harmony export */   bigIntToBytes: function() { return /* binding */ bigIntToBytes; },\n/* harmony export */   bigIntToHex: function() { return /* binding */ bigIntToHex; },\n/* harmony export */   bigIntToUnpaddedBytes: function() { return /* binding */ bigIntToUnpaddedBytes; },\n/* harmony export */   bytesToBigInt: function() { return /* binding */ bytesToBigInt; },\n/* harmony export */   bytesToBigInt64: function() { return /* binding */ bytesToBigInt64; },\n/* harmony export */   bytesToHex: function() { return /* binding */ bytesToHex; },\n/* harmony export */   bytesToInt: function() { return /* binding */ bytesToInt; },\n/* harmony export */   bytesToInt32: function() { return /* binding */ bytesToInt32; },\n/* harmony export */   bytesToUnprefixedHex: function() { return /* binding */ bytesToUnprefixedHex; },\n/* harmony export */   bytesToUtf8: function() { return /* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToUtf8; },\n/* harmony export */   compareBytes: function() { return /* binding */ compareBytes; },\n/* harmony export */   concatBytes: function() { return /* binding */ concatBytes; },\n/* harmony export */   equalsBytes: function() { return /* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.equalsBytes; },\n/* harmony export */   fromSigned: function() { return /* binding */ fromSigned; },\n/* harmony export */   hexToBigInt: function() { return /* binding */ hexToBigInt; },\n/* harmony export */   hexToBytes: function() { return /* binding */ hexToBytes; },\n/* harmony export */   int32ToBytes: function() { return /* binding */ int32ToBytes; },\n/* harmony export */   intToBytes: function() { return /* binding */ intToBytes; },\n/* harmony export */   intToHex: function() { return /* binding */ intToHex; },\n/* harmony export */   intToUnpaddedBytes: function() { return /* binding */ intToUnpaddedBytes; },\n/* harmony export */   randomBytes: function() { return /* binding */ randomBytes; },\n/* harmony export */   setLengthLeft: function() { return /* binding */ setLengthLeft; },\n/* harmony export */   setLengthRight: function() { return /* binding */ setLengthRight; },\n/* harmony export */   short: function() { return /* binding */ short; },\n/* harmony export */   toBytes: function() { return /* binding */ toBytes; },\n/* harmony export */   toUnsigned: function() { return /* binding */ toUnsigned; },\n/* harmony export */   unpadArray: function() { return /* binding */ unpadArray; },\n/* harmony export */   unpadBytes: function() { return /* binding */ unpadBytes; },\n/* harmony export */   unpadHex: function() { return /* binding */ unpadHex; },\n/* harmony export */   unprefixedHexToBytes: function() { return /* binding */ unprefixedHexToBytes; },\n/* harmony export */   utf8ToBytes: function() { return /* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes; },\n/* harmony export */   validateNoLeadingZeroes: function() { return /* binding */ validateNoLeadingZeroes; },\n/* harmony export */   zeros: function() { return /* binding */ zeros; }\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_random_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/random.js */ \"(app-pages-browser)/./node_modules/ethereum-cryptography/esm/random.js\");\n/* harmony import */ var ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/utils.js */ \"(app-pages-browser)/./node_modules/ethereum-cryptography/esm/utils.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n// eslint-disable-next-line no-restricted-imports\n\n\n\nconst BIGINT_0 = BigInt(0);\n/**\n * @deprecated\n */\nconst bytesToUnprefixedHex = ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex;\n// hexToBytes cache\nconst hexToBytesMapFirstKey = {};\nconst hexToBytesMapSecondKey = {};\nfor (let i = 0; i < 16; i++) {\n    const vSecondKey = i;\n    const vFirstKey = i * 16;\n    const key = i.toString(16).toLowerCase();\n    hexToBytesMapSecondKey[key] = vSecondKey;\n    hexToBytesMapSecondKey[key.toUpperCase()] = vSecondKey;\n    hexToBytesMapFirstKey[key] = vFirstKey;\n    hexToBytesMapFirstKey[key.toUpperCase()] = vFirstKey;\n}\n/**\n * NOTE: only use this function if the string is even, and only consists of hex characters\n * If this is not the case, this function could return weird results\n * @deprecated\n */\nfunction _unprefixedHexToBytes(hex) {\n    const byteLen = hex.length;\n    const bytes = new Uint8Array(byteLen / 2);\n    for (let i = 0; i < byteLen; i += 2) {\n        bytes[i / 2] = hexToBytesMapFirstKey[hex[i]] + hexToBytesMapSecondKey[hex[i + 1]];\n    }\n    return bytes;\n}\n/**\n * @deprecated\n */\nconst unprefixedHexToBytes = (inp) => {\n    if (inp.slice(0, 2) === '0x') {\n        throw new Error('hex string is prefixed with 0x, should be unprefixed');\n    }\n    else {\n        return _unprefixedHexToBytes((0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(inp));\n    }\n};\n/****************  Borrowed from @chainsafe/ssz */\n// Caching this info costs about ~1000 bytes and speeds up toHexString() by x6\nconst hexByByte = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nconst bytesToHex = (bytes) => {\n    let hex = `0x`;\n    if (bytes === undefined || bytes.length === 0)\n        return hex;\n    for (const byte of bytes) {\n        hex = `${hex}${hexByByte[byte]}`;\n    }\n    return hex;\n};\n// BigInt cache for the numbers 0 - 256*256-1 (two-byte bytes)\nconst BIGINT_CACHE = [];\nfor (let i = 0; i <= 256 * 256 - 1; i++) {\n    BIGINT_CACHE[i] = BigInt(i);\n}\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n * @param {Uint8Array} bytes the bytes to convert\n * @returns {bigint}\n */\nconst bytesToBigInt = (bytes, littleEndian = false) => {\n    if (littleEndian) {\n        bytes.reverse();\n    }\n    const hex = bytesToHex(bytes);\n    if (hex === '0x') {\n        return BIGINT_0;\n    }\n    if (hex.length === 4) {\n        // If the byte length is 1 (this is faster than checking `bytes.length === 1`)\n        return BIGINT_CACHE[bytes[0]];\n    }\n    if (hex.length === 6) {\n        return BIGINT_CACHE[bytes[0] * 256 + bytes[1]];\n    }\n    return BigInt(hex);\n};\n/**\n * Converts a {@link Uint8Array} to a {@link number}.\n * @param {Uint8Array} bytes the bytes to convert\n * @return  {number}\n * @throws If the input number exceeds 53 bits.\n */\nconst bytesToInt = (bytes) => {\n    const res = Number(bytesToBigInt(bytes));\n    if (!Number.isSafeInteger(res))\n        throw new Error('Number exceeds 53 bits');\n    return res;\n};\n// TODO: Restrict the input type to only PrefixedHexString\n/**\n * Converts a {@link PrefixedHexString} to a {@link Uint8Array}\n * @param {PrefixedHexString | string} hex The 0x-prefixed hex string to convert\n * @returns {Uint8Array} The converted bytes\n * @throws If the input is not a valid 0x-prefixed hex string\n */\nconst hexToBytes = (hex) => {\n    if (typeof hex !== 'string') {\n        throw new Error(`hex argument type ${typeof hex} must be of type string`);\n    }\n    if (!/^0x[0-9a-fA-F]*$/.test(hex)) {\n        throw new Error(`Input must be a 0x-prefixed hexadecimal string, got ${hex}`);\n    }\n    const unprefixedHex = hex.slice(2);\n    return _unprefixedHexToBytes(unprefixedHex.length % 2 === 0 ? unprefixedHex : (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(unprefixedHex));\n};\n/******************************************/\n/**\n * Converts a {@link number} into a {@link PrefixedHexString}\n * @param {number} i\n * @return {PrefixedHexString}\n */\nconst intToHex = (i) => {\n    if (!Number.isSafeInteger(i) || i < 0) {\n        throw new Error(`Received an invalid integer type: ${i}`);\n    }\n    return `0x${i.toString(16)}`;\n};\n/**\n * Converts an {@link number} to a {@link Uint8Array}\n * @param {Number} i\n * @return {Uint8Array}\n */\nconst intToBytes = (i) => {\n    const hex = intToHex(i);\n    return hexToBytes(hex);\n};\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n *  * @param {bigint} num the bigint to convert\n * @returns {Uint8Array}\n */\nconst bigIntToBytes = (num, littleEndian = false) => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    const bytes = toBytes(`0x${(0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(num.toString(16))}`);\n    return littleEndian ? bytes.reverse() : bytes;\n};\n/**\n * Returns a Uint8Array filled with 0s.\n * @param {number} bytes the number of bytes of the Uint8Array\n * @return {Uint8Array}\n */\nconst zeros = (bytes) => {\n    return new Uint8Array(bytes);\n};\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @param {boolean} right whether to start padding form the left or right\n * @return {Uint8Array}\n */\nconst setLength = (msg, length, right) => {\n    if (right) {\n        if (msg.length < length) {\n            return new Uint8Array([...msg, ...zeros(length - msg.length)]);\n        }\n        return msg.subarray(0, length);\n    }\n    else {\n        if (msg.length < length) {\n            return new Uint8Array([...zeros(length - msg.length), ...msg]);\n        }\n        return msg.subarray(-length);\n    }\n};\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */\nconst setLengthLeft = (msg, length) => {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(msg);\n    return setLength(msg, length, false);\n};\n/**\n * Right Pads a `Uint8Array` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */\nconst setLengthRight = (msg, length) => {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(msg);\n    return setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Uint8Array`, `number[]` or `string`.\n * @param {Uint8Array|number[]|string} a\n * @return {Uint8Array|number[]|string}\n */\nconst stripZeros = (a) => {\n    let first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param {Uint8Array} a\n * @return {Uint8Array}\n */\nconst unpadBytes = (a) => {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param  {number[]} a\n * @return {number[]}\n */\nconst unpadArray = (a) => {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsArray)(a);\n    return stripZeros(a);\n};\n// TODO: Restrict the input type to only PrefixedHexString\n/**\n * Trims leading zeros from a `PrefixedHexString`.\n * @param {PrefixedHexString | string} a\n * @return {PrefixedHexString}\n */\nconst unpadHex = (a) => {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsHexString)(a);\n    return `0x${stripZeros((0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(a))}`;\n};\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Buffer`, `Uint8Array`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBytes()` method.\n * @param {ToBytesInputTypes} v the value\n * @return {Uint8Array}\n */\nconst toBytes = (v) => {\n    if (v === null || v === undefined) {\n        return new Uint8Array();\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Uint8Array.from(v);\n    }\n    if (typeof v === 'string') {\n        if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.isHexString)(v)) {\n            throw new Error(`Cannot convert string to Uint8Array. toBytes only supports 0x-prefixed hex strings and this string was given: ${v}`);\n        }\n        return hexToBytes(v);\n    }\n    if (typeof v === 'number') {\n        return intToBytes(v);\n    }\n    if (typeof v === 'bigint') {\n        if (v < BIGINT_0) {\n            throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n        }\n        let n = v.toString(16);\n        if (n.length % 2)\n            n = '0' + n;\n        return unprefixedHexToBytes(n);\n    }\n    if (v.toBytes !== undefined) {\n        // converts a `TransformableToBytes` object to a Uint8Array\n        return v.toBytes();\n    }\n    throw new Error('invalid type');\n};\n/**\n * Interprets a `Uint8Array` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param {Uint8Array} num Signed integer value\n * @returns {bigint}\n */\nconst fromSigned = (num) => {\n    return BigInt.asIntN(256, bytesToBigInt(num));\n};\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Uint8Array`. Assumes 256-bit numbers.\n * @param {bigint} num\n * @returns {Uint8Array}\n */\nconst toUnsigned = (num) => {\n    return bigIntToBytes(BigInt.asUintN(256, num));\n};\n/**\n * Adds \"0x\" to a given `string` if it does not already start with \"0x\".\n * @param {string} str\n * @return {PrefixedHexString}\n */\nconst addHexPrefix = (str) => {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.isHexString)(str) ? str : `0x${str}`;\n};\n/**\n * Shortens a string  or Uint8Array's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n * @param {Uint8Array | string} bytes\n * @param {number} maxLength\n * @return {string}\n */\nconst short = (bytes, maxLength = 50) => {\n    const byteStr = bytes instanceof Uint8Array ? bytesToHex(bytes) : bytes;\n    const len = byteStr.slice(0, 2) === '0x' ? maxLength + 2 : maxLength;\n    if (byteStr.length <= len) {\n        return byteStr;\n    }\n    return byteStr.slice(0, len) + '…';\n};\n/**\n * Checks provided Uint8Array for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Uint8Array values\n * @throws if any provided value is found to have leading zero bytes\n */\nconst validateNoLeadingZeroes = (values) => {\n    for (const [k, v] of Object.entries(values)) {\n        if (v !== undefined && v.length > 0 && v[0] === 0) {\n            throw new Error(`${k} cannot have leading zeroes, received: ${bytesToHex(v)}`);\n        }\n    }\n};\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n * @param {bigint} num the bigint to convert\n * @returns {PrefixedHexString}\n */\nconst bigIntToHex = (num) => {\n    return `0x${num.toString(16)}`;\n};\n/**\n * Calculates max bigint from an array of bigints\n * @param args array of bigints\n */\nconst bigIntMax = (...args) => args.reduce((m, e) => (e > m ? e : m));\n/**\n * Calculates min BigInt from an array of BigInts\n * @param args array of bigints\n */\nconst bigIntMin = (...args) => args.reduce((m, e) => (e < m ? e : m));\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {bigint} value the bigint to convert\n * @returns {Uint8Array}\n */\nconst bigIntToUnpaddedBytes = (value) => {\n    return unpadBytes(bigIntToBytes(value));\n};\nconst bigIntToAddressBytes = (value, strict = true) => {\n    const addressBytes = bigIntToBytes(value);\n    if (strict && addressBytes.length > 20) {\n        throw Error(`Invalid address bytes length=${addressBytes.length} strict=${strict}`);\n    }\n    // setLength already slices if more than requisite length\n    return setLengthLeft(addressBytes, 20);\n};\n/**\n * Convert value from number to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {number} value the bigint to convert\n * @returns {Uint8Array}\n */\nconst intToUnpaddedBytes = (value) => {\n    return unpadBytes(intToBytes(value));\n};\n/**\n * Compares two Uint8Arrays and returns a number indicating their order in a sorted array.\n *\n * @param {Uint8Array} value1 - The first Uint8Array to compare.\n * @param {Uint8Array} value2 - The second Uint8Array to compare.\n * @returns {number} A positive number if value1 is larger than value2,\n *                   A negative number if value1 is smaller than value2,\n *                   or 0 if value1 and value2 are equal.\n */\nconst compareBytes = (value1, value2) => {\n    const bigIntValue1 = bytesToBigInt(value1);\n    const bigIntValue2 = bytesToBigInt(value2);\n    return bigIntValue1 > bigIntValue2 ? 1 : bigIntValue1 < bigIntValue2 ? -1 : 0;\n};\n/**\n * Generates a Uint8Array of random bytes of specified length.\n *\n * @param {number} length - The length of the Uint8Array.\n * @returns {Uint8Array} A Uint8Array of random bytes of specified length.\n */\nconst randomBytes = (length) => {\n    return (0,ethereum_cryptography_random_js__WEBPACK_IMPORTED_MODULE_0__.getRandomBytesSync)(length);\n};\n/**\n * This mirrors the functionality of the `ethereum-cryptography` export except\n * it skips the check to validate that every element of `arrays` is indead a `uint8Array`\n * Can give small performance gains on large arrays\n * @param {Uint8Array[]} arrays an array of Uint8Arrays\n * @returns {Uint8Array} one Uint8Array with all the elements of the original set\n * works like `Buffer.concat`\n */\nconst concatBytes = (...arrays) => {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n};\n/**\n * @notice Convert a Uint8Array to a 32-bit integer\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 32-bit integer.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {number} The 32-bit integer read from the input Uint8Array.\n */\nfunction bytesToInt32(bytes, littleEndian = false) {\n    if (bytes.length < 4) {\n        bytes = setLength(bytes, 4, littleEndian);\n    }\n    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    return dataView.getUint32(0, littleEndian);\n}\n/**\n * @notice Convert a Uint8Array to a 64-bit bigint\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 64-bit bigint.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {bigint} The 64-bit bigint read from the input Uint8Array.\n */\nfunction bytesToBigInt64(bytes, littleEndian = false) {\n    if (bytes.length < 8) {\n        bytes = setLength(bytes, 8, littleEndian);\n    }\n    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    return dataView.getBigUint64(0, littleEndian);\n}\n/**\n * @notice Convert a 32-bit integer to a Uint8Array.\n * @param {number} value The 32-bit integer to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 4 containing the integer.\n */\nfunction int32ToBytes(value, littleEndian = false) {\n    const buffer = new ArrayBuffer(4);\n    const dataView = new DataView(buffer);\n    dataView.setUint32(0, value, littleEndian);\n    return new Uint8Array(buffer);\n}\n/**\n * @notice Convert a 64-bit bigint to a Uint8Array.\n * @param {bigint} value The 64-bit bigint to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 8 containing the bigint.\n */\nfunction bigInt64ToBytes(value, littleEndian = false) {\n    const buffer = new ArrayBuffer(8);\n    const dataView = new DataView(buffer);\n    dataView.setBigUint64(0, value, littleEndian);\n    return new Uint8Array(buffer);\n}\n// eslint-disable-next-line no-restricted-imports\n\n// TODO: Restrict the input type to only PrefixedHexString\nfunction hexToBigInt(input) {\n    return bytesToBigInt(hexToBytes((0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.isHexString)(input) ? input : `0x${input}`));\n}\n//# sourceMappingURL=bytes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/constants.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/constants.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BIGINT_0: function() { return /* binding */ BIGINT_0; },\n/* harmony export */   BIGINT_1: function() { return /* binding */ BIGINT_1; },\n/* harmony export */   BIGINT_100: function() { return /* binding */ BIGINT_100; },\n/* harmony export */   BIGINT_128: function() { return /* binding */ BIGINT_128; },\n/* harmony export */   BIGINT_160: function() { return /* binding */ BIGINT_160; },\n/* harmony export */   BIGINT_2: function() { return /* binding */ BIGINT_2; },\n/* harmony export */   BIGINT_224: function() { return /* binding */ BIGINT_224; },\n/* harmony export */   BIGINT_255: function() { return /* binding */ BIGINT_255; },\n/* harmony export */   BIGINT_256: function() { return /* binding */ BIGINT_256; },\n/* harmony export */   BIGINT_27: function() { return /* binding */ BIGINT_27; },\n/* harmony export */   BIGINT_28: function() { return /* binding */ BIGINT_28; },\n/* harmony export */   BIGINT_2EXP160: function() { return /* binding */ BIGINT_2EXP160; },\n/* harmony export */   BIGINT_2EXP224: function() { return /* binding */ BIGINT_2EXP224; },\n/* harmony export */   BIGINT_2EXP256: function() { return /* binding */ BIGINT_2EXP256; },\n/* harmony export */   BIGINT_2EXP96: function() { return /* binding */ BIGINT_2EXP96; },\n/* harmony export */   BIGINT_3: function() { return /* binding */ BIGINT_3; },\n/* harmony export */   BIGINT_31: function() { return /* binding */ BIGINT_31; },\n/* harmony export */   BIGINT_32: function() { return /* binding */ BIGINT_32; },\n/* harmony export */   BIGINT_64: function() { return /* binding */ BIGINT_64; },\n/* harmony export */   BIGINT_7: function() { return /* binding */ BIGINT_7; },\n/* harmony export */   BIGINT_8: function() { return /* binding */ BIGINT_8; },\n/* harmony export */   BIGINT_96: function() { return /* binding */ BIGINT_96; },\n/* harmony export */   BIGINT_NEG1: function() { return /* binding */ BIGINT_NEG1; },\n/* harmony export */   KECCAK256_NULL: function() { return /* binding */ KECCAK256_NULL; },\n/* harmony export */   KECCAK256_NULL_S: function() { return /* binding */ KECCAK256_NULL_S; },\n/* harmony export */   KECCAK256_RLP: function() { return /* binding */ KECCAK256_RLP; },\n/* harmony export */   KECCAK256_RLP_ARRAY: function() { return /* binding */ KECCAK256_RLP_ARRAY; },\n/* harmony export */   KECCAK256_RLP_ARRAY_S: function() { return /* binding */ KECCAK256_RLP_ARRAY_S; },\n/* harmony export */   KECCAK256_RLP_S: function() { return /* binding */ KECCAK256_RLP_S; },\n/* harmony export */   MAX_INTEGER: function() { return /* binding */ MAX_INTEGER; },\n/* harmony export */   MAX_INTEGER_BIGINT: function() { return /* binding */ MAX_INTEGER_BIGINT; },\n/* harmony export */   MAX_UINT64: function() { return /* binding */ MAX_UINT64; },\n/* harmony export */   MAX_WITHDRAWALS_PER_PAYLOAD: function() { return /* binding */ MAX_WITHDRAWALS_PER_PAYLOAD; },\n/* harmony export */   RIPEMD160_ADDRESS_STRING: function() { return /* binding */ RIPEMD160_ADDRESS_STRING; },\n/* harmony export */   RLP_EMPTY_STRING: function() { return /* binding */ RLP_EMPTY_STRING; },\n/* harmony export */   SECP256K1_ORDER: function() { return /* binding */ SECP256K1_ORDER; },\n/* harmony export */   SECP256K1_ORDER_DIV_2: function() { return /* binding */ SECP256K1_ORDER_DIV_2; },\n/* harmony export */   TWO_POW256: function() { return /* binding */ TWO_POW256; }\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(app-pages-browser)/./node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\n\n/**\n * 2^64-1\n */\nconst MAX_UINT64 = BigInt('0xffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1)\n */\nconst MAX_INTEGER = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */\nconst MAX_INTEGER_BIGINT = BigInt('115792089237316195423570985008687907853269984665640564039457584007913129639935');\nconst SECP256K1_ORDER = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__.secp256k1.CURVE.n;\nconst SECP256K1_ORDER_DIV_2 = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__.secp256k1.CURVE.n / BigInt(2);\n/**\n * 2^256\n */\nconst TWO_POW256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\n/**\n * Keccak-256 hash of null\n */\nconst KECCAK256_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * Keccak-256 hash of null\n */\nconst KECCAK256_NULL = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_NULL_S);\n/**\n * Keccak-256 of an RLP of an empty array\n */\nconst KECCAK256_RLP_ARRAY_S = '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\n/**\n * Keccak-256 of an RLP of an empty array\n */\nconst KECCAK256_RLP_ARRAY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_RLP_ARRAY_S);\n/**\n * Keccak-256 hash of the RLP of null\n */\nconst KECCAK256_RLP_S = '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\n/**\n * Keccak-256 hash of the RLP of null\n */\nconst KECCAK256_RLP = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_RLP_S);\n/**\n *  RLP encoded empty string\n */\nconst RLP_EMPTY_STRING = Uint8Array.from([0x80]);\nconst MAX_WITHDRAWALS_PER_PAYLOAD = 16;\nconst RIPEMD160_ADDRESS_STRING = '0000000000000000000000000000000000000003';\n/**\n * BigInt constants\n */\nconst BIGINT_NEG1 = BigInt(-1);\nconst BIGINT_0 = BigInt(0);\nconst BIGINT_1 = BigInt(1);\nconst BIGINT_2 = BigInt(2);\nconst BIGINT_3 = BigInt(3);\nconst BIGINT_7 = BigInt(7);\nconst BIGINT_8 = BigInt(8);\nconst BIGINT_27 = BigInt(27);\nconst BIGINT_28 = BigInt(28);\nconst BIGINT_31 = BigInt(31);\nconst BIGINT_32 = BigInt(32);\nconst BIGINT_64 = BigInt(64);\nconst BIGINT_128 = BigInt(128);\nconst BIGINT_255 = BigInt(255);\nconst BIGINT_256 = BigInt(256);\nconst BIGINT_96 = BigInt(96);\nconst BIGINT_100 = BigInt(100);\nconst BIGINT_160 = BigInt(160);\nconst BIGINT_224 = BigInt(224);\nconst BIGINT_2EXP96 = BigInt(79228162514264337593543950336);\nconst BIGINT_2EXP160 = BigInt(1461501637330902918203684832716283019655932542976);\nconst BIGINT_2EXP224 = BigInt(26959946667150639794667015087019630673637144422540572481103610249216);\nconst BIGINT_2EXP256 = BIGINT_2 ** BIGINT_256;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0Q7QUFDdkI7QUFDeEM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNBLHdCQUF3Qix5RUFBUztBQUNqQyw4QkFBOEIseUVBQVM7QUFDOUM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPLHVCQUF1QixxREFBVTtBQUN4QztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPLDRCQUE0QixxREFBVTtBQUM3QztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPLHNCQUFzQixxREFBVTtBQUN2QztBQUNBO0FBQ0E7QUFDTztBQUNBO0FBQ0E7QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL2NvbW1vbi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9jb25zdGFudHMuanM/NTgxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZWNwMjU2azEgfSBmcm9tICdldGhlcmV1bS1jcnlwdG9ncmFwaHkvc2VjcDI1NmsxLmpzJztcbmltcG9ydCB7IGhleFRvQnl0ZXMgfSBmcm9tICcuL2J5dGVzLmpzJztcbi8qKlxuICogMl42NC0xXG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfVUlOVDY0ID0gQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKTtcbi8qKlxuICogVGhlIG1heCBpbnRlZ2VyIHRoYXQgdGhlIGV2bSBjYW4gaGFuZGxlICgyXjI1Ni0xKVxuICovXG5leHBvcnQgY29uc3QgTUFYX0lOVEVHRVIgPSBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZicpO1xuLyoqXG4gKiBUaGUgbWF4IGludGVnZXIgdGhhdCB0aGUgZXZtIGNhbiBoYW5kbGUgKDJeMjU2LTEpIGFzIGEgYmlnaW50XG4gKiAyXjI1Ni0xIGVxdWFscyB0byAzNDAyODIzNjY5MjA5Mzg0NjM0NjMzNzQ2MDc0MzE3NjgyMTE0NTVcbiAqIFdlIHVzZSBsaXRlcmFsIHZhbHVlIGluc3RlYWQgb2YgY2FsY3VsYXRlZCB2YWx1ZSBmb3IgY29tcGF0aWJpbGl0eSBpc3N1ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9JTlRFR0VSX0JJR0lOVCA9IEJpZ0ludCgnMTE1NzkyMDg5MjM3MzE2MTk1NDIzNTcwOTg1MDA4Njg3OTA3ODUzMjY5OTg0NjY1NjQwNTY0MDM5NDU3NTg0MDA3OTEzMTI5NjM5OTM1Jyk7XG5leHBvcnQgY29uc3QgU0VDUDI1NksxX09SREVSID0gc2VjcDI1NmsxLkNVUlZFLm47XG5leHBvcnQgY29uc3QgU0VDUDI1NksxX09SREVSX0RJVl8yID0gc2VjcDI1NmsxLkNVUlZFLm4gLyBCaWdJbnQoMik7XG4vKipcbiAqIDJeMjU2XG4gKi9cbmV4cG9ydCBjb25zdCBUV09fUE9XMjU2ID0gQmlnSW50KCcweDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyk7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsXG4gKi9cbmV4cG9ydCBjb25zdCBLRUNDQUsyNTZfTlVMTF9TID0gJzB4YzVkMjQ2MDE4NmY3MjMzYzkyN2U3ZGIyZGNjNzAzYzBlNTAwYjY1M2NhODIyNzNiN2JmYWQ4MDQ1ZDg1YTQ3MCc7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsXG4gKi9cbmV4cG9ydCBjb25zdCBLRUNDQUsyNTZfTlVMTCA9IGhleFRvQnl0ZXMoS0VDQ0FLMjU2X05VTExfUyk7XG4vKipcbiAqIEtlY2Nhay0yNTYgb2YgYW4gUkxQIG9mIGFuIGVtcHR5IGFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCBLRUNDQUsyNTZfUkxQX0FSUkFZX1MgPSAnMHgxZGNjNGRlOGRlYzc1ZDdhYWI4NWI1NjdiNmNjZDQxYWQzMTI0NTFiOTQ4YTc0MTNmMGExNDJmZDQwZDQ5MzQ3Jztcbi8qKlxuICogS2VjY2FrLTI1NiBvZiBhbiBSTFAgb2YgYW4gZW1wdHkgYXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IEtFQ0NBSzI1Nl9STFBfQVJSQVkgPSBoZXhUb0J5dGVzKEtFQ0NBSzI1Nl9STFBfQVJSQVlfUyk7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiB0aGUgUkxQIG9mIG51bGxcbiAqL1xuZXhwb3J0IGNvbnN0IEtFQ0NBSzI1Nl9STFBfUyA9ICcweDU2ZTgxZjE3MWJjYzU1YTZmZjgzNDVlNjkyYzBmODZlNWI0OGUwMWI5OTZjYWRjMDAxNjIyZmI1ZTM2M2I0MjEnO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgdGhlIFJMUCBvZiBudWxsXG4gKi9cbmV4cG9ydCBjb25zdCBLRUNDQUsyNTZfUkxQID0gaGV4VG9CeXRlcyhLRUNDQUsyNTZfUkxQX1MpO1xuLyoqXG4gKiAgUkxQIGVuY29kZWQgZW1wdHkgc3RyaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBSTFBfRU1QVFlfU1RSSU5HID0gVWludDhBcnJheS5mcm9tKFsweDgwXSk7XG5leHBvcnQgY29uc3QgTUFYX1dJVEhEUkFXQUxTX1BFUl9QQVlMT0FEID0gMTY7XG5leHBvcnQgY29uc3QgUklQRU1EMTYwX0FERFJFU1NfU1RSSU5HID0gJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMnO1xuLyoqXG4gKiBCaWdJbnQgY29uc3RhbnRzXG4gKi9cbmV4cG9ydCBjb25zdCBCSUdJTlRfTkVHMSA9IEJpZ0ludCgtMSk7XG5leHBvcnQgY29uc3QgQklHSU5UXzAgPSBCaWdJbnQoMCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzEgPSBCaWdJbnQoMSk7XG5leHBvcnQgY29uc3QgQklHSU5UXzIgPSBCaWdJbnQoMik7XG5leHBvcnQgY29uc3QgQklHSU5UXzMgPSBCaWdJbnQoMyk7XG5leHBvcnQgY29uc3QgQklHSU5UXzcgPSBCaWdJbnQoNyk7XG5leHBvcnQgY29uc3QgQklHSU5UXzggPSBCaWdJbnQoOCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzI3ID0gQmlnSW50KDI3KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMjggPSBCaWdJbnQoMjgpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8zMSA9IEJpZ0ludCgzMSk7XG5leHBvcnQgY29uc3QgQklHSU5UXzMyID0gQmlnSW50KDMyKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfNjQgPSBCaWdJbnQoNjQpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8xMjggPSBCaWdJbnQoMTI4KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMjU1ID0gQmlnSW50KDI1NSk7XG5leHBvcnQgY29uc3QgQklHSU5UXzI1NiA9IEJpZ0ludCgyNTYpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF85NiA9IEJpZ0ludCg5Nik7XG5leHBvcnQgY29uc3QgQklHSU5UXzEwMCA9IEJpZ0ludCgxMDApO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8xNjAgPSBCaWdJbnQoMTYwKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMjI0ID0gQmlnSW50KDIyNCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzJFWFA5NiA9IEJpZ0ludCg3OTIyODE2MjUxNDI2NDMzNzU5MzU0Mzk1MDMzNik7XG5leHBvcnQgY29uc3QgQklHSU5UXzJFWFAxNjAgPSBCaWdJbnQoMTQ2MTUwMTYzNzMzMDkwMjkxODIwMzY4NDgzMjcxNjI4MzAxOTY1NTkzMjU0Mjk3Nik7XG5leHBvcnQgY29uc3QgQklHSU5UXzJFWFAyMjQgPSBCaWdJbnQoMjY5NTk5NDY2NjcxNTA2Mzk3OTQ2NjcwMTUwODcwMTk2MzA2NzM2MzcxNDQ0MjI1NDA1NzI0ODExMDM2MTAyNDkyMTYpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yRVhQMjU2ID0gQklHSU5UXzIgKiogQklHSU5UXzI1Njtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/constants.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/db.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/db.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyEncoding: function() { return /* binding */ KeyEncoding; },\n/* harmony export */   ValueEncoding: function() { return /* binding */ ValueEncoding; }\n/* harmony export */ });\nvar KeyEncoding;\n(function (KeyEncoding) {\n    KeyEncoding[\"String\"] = \"string\";\n    KeyEncoding[\"Bytes\"] = \"view\";\n    KeyEncoding[\"Number\"] = \"number\";\n})(KeyEncoding || (KeyEncoding = {}));\nvar ValueEncoding;\n(function (ValueEncoding) {\n    ValueEncoding[\"String\"] = \"string\";\n    ValueEncoding[\"Bytes\"] = \"view\";\n    ValueEncoding[\"JSON\"] = \"json\";\n})(ValueEncoding || (ValueEncoding = {}));\n//# sourceMappingURL=db.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vZGIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrQ0FBa0M7QUFDNUI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0NBQXNDO0FBQ3ZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vZGIuanM/YWI0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIEtleUVuY29kaW5nO1xuKGZ1bmN0aW9uIChLZXlFbmNvZGluZykge1xuICAgIEtleUVuY29kaW5nW1wiU3RyaW5nXCJdID0gXCJzdHJpbmdcIjtcbiAgICBLZXlFbmNvZGluZ1tcIkJ5dGVzXCJdID0gXCJ2aWV3XCI7XG4gICAgS2V5RW5jb2RpbmdbXCJOdW1iZXJcIl0gPSBcIm51bWJlclwiO1xufSkoS2V5RW5jb2RpbmcgfHwgKEtleUVuY29kaW5nID0ge30pKTtcbmV4cG9ydCB2YXIgVmFsdWVFbmNvZGluZztcbihmdW5jdGlvbiAoVmFsdWVFbmNvZGluZykge1xuICAgIFZhbHVlRW5jb2RpbmdbXCJTdHJpbmdcIl0gPSBcInN0cmluZ1wiO1xuICAgIFZhbHVlRW5jb2RpbmdbXCJCeXRlc1wiXSA9IFwidmlld1wiO1xuICAgIFZhbHVlRW5jb2RpbmdbXCJKU09OXCJdID0gXCJqc29uXCI7XG59KShWYWx1ZUVuY29kaW5nIHx8IChWYWx1ZUVuY29kaW5nID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRiLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/db.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/genesis.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/genesis.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseGethGenesisState: function() { return /* binding */ parseGethGenesisState; }\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n/**\n * Parses the geth genesis state into Blockchain {@link GenesisState}\n * @param json representing the `alloc` key in a Geth genesis file\n */\nfunction parseGethGenesisState(json) {\n    const state = {};\n    for (const address of Object.keys(json.alloc)) {\n        let { balance, code, storage, nonce } = json.alloc[address];\n        // create a map with lowercase for easy lookups\n        const prefixedAddress = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(address.toLowerCase());\n        balance = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(balance) ? balance : (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bigIntToHex)(BigInt(balance));\n        code = code !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(code) : undefined;\n        storage = storage !== undefined ? Object.entries(storage) : undefined;\n        nonce = nonce !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(nonce) : undefined;\n        state[prefixedAddress] = [balance, code, storage, nonce];\n    }\n    return state;\n}\n//# sourceMappingURL=genesis.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vZ2VuZXNpcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUQ7QUFDWDtBQUM1QztBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsY0FBYyxnQ0FBZ0M7QUFDOUM7QUFDQSxnQ0FBZ0MsdURBQVk7QUFDNUMsa0JBQWtCLHlEQUFXLHNCQUFzQixzREFBVztBQUM5RCxvQ0FBb0MsdURBQVk7QUFDaEQ7QUFDQSxzQ0FBc0MsdURBQVk7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2dlbmVzaXMuanM/MzUxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGRIZXhQcmVmaXgsIGJpZ0ludFRvSGV4IH0gZnJvbSAnLi9ieXRlcy5qcyc7XG5pbXBvcnQgeyBpc0hleFN0cmluZyB9IGZyb20gJy4vaW50ZXJuYWwuanMnO1xuLyoqXG4gKiBQYXJzZXMgdGhlIGdldGggZ2VuZXNpcyBzdGF0ZSBpbnRvIEJsb2NrY2hhaW4ge0BsaW5rIEdlbmVzaXNTdGF0ZX1cbiAqIEBwYXJhbSBqc29uIHJlcHJlc2VudGluZyB0aGUgYGFsbG9jYCBrZXkgaW4gYSBHZXRoIGdlbmVzaXMgZmlsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VHZXRoR2VuZXNpc1N0YXRlKGpzb24pIHtcbiAgICBjb25zdCBzdGF0ZSA9IHt9O1xuICAgIGZvciAoY29uc3QgYWRkcmVzcyBvZiBPYmplY3Qua2V5cyhqc29uLmFsbG9jKSkge1xuICAgICAgICBsZXQgeyBiYWxhbmNlLCBjb2RlLCBzdG9yYWdlLCBub25jZSB9ID0ganNvbi5hbGxvY1thZGRyZXNzXTtcbiAgICAgICAgLy8gY3JlYXRlIGEgbWFwIHdpdGggbG93ZXJjYXNlIGZvciBlYXN5IGxvb2t1cHNcbiAgICAgICAgY29uc3QgcHJlZml4ZWRBZGRyZXNzID0gYWRkSGV4UHJlZml4KGFkZHJlc3MudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGJhbGFuY2UgPSBpc0hleFN0cmluZyhiYWxhbmNlKSA/IGJhbGFuY2UgOiBiaWdJbnRUb0hleChCaWdJbnQoYmFsYW5jZSkpO1xuICAgICAgICBjb2RlID0gY29kZSAhPT0gdW5kZWZpbmVkID8gYWRkSGV4UHJlZml4KGNvZGUpIDogdW5kZWZpbmVkO1xuICAgICAgICBzdG9yYWdlID0gc3RvcmFnZSAhPT0gdW5kZWZpbmVkID8gT2JqZWN0LmVudHJpZXMoc3RvcmFnZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIG5vbmNlID0gbm9uY2UgIT09IHVuZGVmaW5lZCA/IGFkZEhleFByZWZpeChub25jZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIHN0YXRlW3ByZWZpeGVkQWRkcmVzc10gPSBbYmFsYW5jZSwgY29kZSwgc3RvcmFnZSwgbm9uY2VdO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lc2lzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/genesis.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/helpers.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/helpers.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertIsArray: function() { return /* binding */ assertIsArray; },\n/* harmony export */   assertIsBytes: function() { return /* binding */ assertIsBytes; },\n/* harmony export */   assertIsHexString: function() { return /* binding */ assertIsHexString; },\n/* harmony export */   assertIsString: function() { return /* binding */ assertIsString; }\n/* harmony export */ });\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nconst assertIsHexString = function (input) {\n    if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(input)) {\n        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nconst assertIsBytes = function (input) {\n    if (!(input instanceof Uint8Array)) {\n        const msg = `This method only supports Uint8Array but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nconst assertIsArray = function (input) {\n    if (!Array.isArray(input)) {\n        const msg = `This method only supports number arrays but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nconst assertIsString = function (input) {\n    if (typeof input !== 'string') {\n        const msg = `This method only supports strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vaGVscGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE0QztBQUM1QztBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ087QUFDUCxTQUFTLHlEQUFXO0FBQ3BCLHdGQUF3RixNQUFNO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDTztBQUNQO0FBQ0EsMkVBQTJFLE1BQU07QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNPO0FBQ1A7QUFDQSw4RUFBOEUsTUFBTTtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ087QUFDUDtBQUNBLHdFQUF3RSxNQUFNO0FBQzlFO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vaGVscGVycy5qcz8yNzcwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzSGV4U3RyaW5nIH0gZnJvbSAnLi9pbnRlcm5hbC5qcyc7XG4vKipcbiAqIFRocm93cyBpZiBhIHN0cmluZyBpcyBub3QgaGV4IHByZWZpeGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgc3RyaW5nIHRvIGNoZWNrIGhleCBwcmVmaXggb2ZcbiAqL1xuZXhwb3J0IGNvbnN0IGFzc2VydElzSGV4U3RyaW5nID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKCFpc0hleFN0cmluZyhpbnB1dCkpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYFRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgMHgtcHJlZml4ZWQgaGV4IHN0cmluZ3MgYnV0IGlucHV0IHdhczogJHtpbnB1dH1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59O1xuLyoqXG4gKiBUaHJvd3MgaWYgaW5wdXQgaXMgbm90IGEgYnVmZmVyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gaW5wdXQgdmFsdWUgdG8gY2hlY2tcbiAqL1xuZXhwb3J0IGNvbnN0IGFzc2VydElzQnl0ZXMgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoIShpbnB1dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGBUaGlzIG1ldGhvZCBvbmx5IHN1cHBvcnRzIFVpbnQ4QXJyYXkgYnV0IGlucHV0IHdhczogJHtpbnB1dH1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59O1xuLyoqXG4gKiBUaHJvd3MgaWYgaW5wdXQgaXMgbm90IGFuIGFycmF5XG4gKiBAcGFyYW0ge251bWJlcltdfSBpbnB1dCB2YWx1ZSB0byBjaGVja1xuICovXG5leHBvcnQgY29uc3QgYXNzZXJ0SXNBcnJheSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYFRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgbnVtYmVyIGFycmF5cyBidXQgaW5wdXQgd2FzOiAke2lucHV0fWA7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn07XG4vKipcbiAqIFRocm93cyBpZiBpbnB1dCBpcyBub3QgYSBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCB2YWx1ZSB0byBjaGVja1xuICovXG5leHBvcnQgY29uc3QgYXNzZXJ0SXNTdHJpbmcgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCBtc2cgPSBgVGhpcyBtZXRob2Qgb25seSBzdXBwb3J0cyBzdHJpbmdzIGJ1dCBpbnB1dCB3YXM6ICR7aW5wdXR9YDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/helpers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/index.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.Account; },\n/* harmony export */   Address: function() { return /* reexport safe */ _address_js__WEBPACK_IMPORTED_MODULE_3__.Address; },\n/* harmony export */   AsyncEventEmitter: function() { return /* reexport safe */ _asyncEventEmitter_js__WEBPACK_IMPORTED_MODULE_9__.AsyncEventEmitter; },\n/* harmony export */   BIGINT_0: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0; },\n/* harmony export */   BIGINT_1: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_1; },\n/* harmony export */   BIGINT_100: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_100; },\n/* harmony export */   BIGINT_128: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_128; },\n/* harmony export */   BIGINT_160: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_160; },\n/* harmony export */   BIGINT_2: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2; },\n/* harmony export */   BIGINT_224: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_224; },\n/* harmony export */   BIGINT_255: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_255; },\n/* harmony export */   BIGINT_256: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_256; },\n/* harmony export */   BIGINT_27: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_27; },\n/* harmony export */   BIGINT_28: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_28; },\n/* harmony export */   BIGINT_2EXP160: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP160; },\n/* harmony export */   BIGINT_2EXP224: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP224; },\n/* harmony export */   BIGINT_2EXP256: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP256; },\n/* harmony export */   BIGINT_2EXP96: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP96; },\n/* harmony export */   BIGINT_3: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_3; },\n/* harmony export */   BIGINT_31: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_31; },\n/* harmony export */   BIGINT_32: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_32; },\n/* harmony export */   BIGINT_64: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_64; },\n/* harmony export */   BIGINT_7: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_7; },\n/* harmony export */   BIGINT_8: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_8; },\n/* harmony export */   BIGINT_96: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_96; },\n/* harmony export */   BIGINT_NEG1: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_NEG1; },\n/* harmony export */   CLRequest: function() { return /* reexport safe */ _requests_js__WEBPACK_IMPORTED_MODULE_17__.CLRequest; },\n/* harmony export */   CLRequestFactory: function() { return /* reexport safe */ _requests_js__WEBPACK_IMPORTED_MODULE_17__.CLRequestFactory; },\n/* harmony export */   CLRequestType: function() { return /* reexport safe */ _requests_js__WEBPACK_IMPORTED_MODULE_17__.CLRequestType; },\n/* harmony export */   ConsolidationRequest: function() { return /* reexport safe */ _requests_js__WEBPACK_IMPORTED_MODULE_17__.ConsolidationRequest; },\n/* harmony export */   DepositRequest: function() { return /* reexport safe */ _requests_js__WEBPACK_IMPORTED_MODULE_17__.DepositRequest; },\n/* harmony export */   GWEI_TO_WEI: function() { return /* reexport safe */ _units_js__WEBPACK_IMPORTED_MODULE_1__.GWEI_TO_WEI; },\n/* harmony export */   KECCAK256_NULL: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_NULL; },\n/* harmony export */   KECCAK256_NULL_S: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_NULL_S; },\n/* harmony export */   KECCAK256_RLP: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP; },\n/* harmony export */   KECCAK256_RLP_ARRAY: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP_ARRAY; },\n/* harmony export */   KECCAK256_RLP_ARRAY_S: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP_ARRAY_S; },\n/* harmony export */   KECCAK256_RLP_S: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP_S; },\n/* harmony export */   KeyEncoding: function() { return /* reexport safe */ _db_js__WEBPACK_IMPORTED_MODULE_4__.KeyEncoding; },\n/* harmony export */   Lock: function() { return /* reexport safe */ _lock_js__WEBPACK_IMPORTED_MODULE_14__.Lock; },\n/* harmony export */   MAX_INTEGER: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_INTEGER; },\n/* harmony export */   MAX_INTEGER_BIGINT: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_INTEGER_BIGINT; },\n/* harmony export */   MAX_UINT64: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_UINT64; },\n/* harmony export */   MAX_WITHDRAWALS_PER_PAYLOAD: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_WITHDRAWALS_PER_PAYLOAD; },\n/* harmony export */   MapDB: function() { return /* reexport safe */ _mapDB_js__WEBPACK_IMPORTED_MODULE_15__.MapDB; },\n/* harmony export */   RIPEMD160_ADDRESS_STRING: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.RIPEMD160_ADDRESS_STRING; },\n/* harmony export */   RLP_EMPTY_STRING: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.RLP_EMPTY_STRING; },\n/* harmony export */   SECP256K1_ORDER: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.SECP256K1_ORDER; },\n/* harmony export */   SECP256K1_ORDER_DIV_2: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.SECP256K1_ORDER_DIV_2; },\n/* harmony export */   TWO_POW256: function() { return /* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.TWO_POW256; },\n/* harmony export */   TypeOutput: function() { return /* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_8__.TypeOutput; },\n/* harmony export */   VERKLE_BALANCE_LEAF_KEY: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_BALANCE_LEAF_KEY; },\n/* harmony export */   VERKLE_CODE_HASH_LEAF_KEY: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_CODE_HASH_LEAF_KEY; },\n/* harmony export */   VERKLE_CODE_OFFSET: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_CODE_OFFSET; },\n/* harmony export */   VERKLE_CODE_SIZE_LEAF_KEY: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_CODE_SIZE_LEAF_KEY; },\n/* harmony export */   VERKLE_HEADER_STORAGE_OFFSET: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_HEADER_STORAGE_OFFSET; },\n/* harmony export */   VERKLE_MAIN_STORAGE_OFFSET: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_MAIN_STORAGE_OFFSET; },\n/* harmony export */   VERKLE_NODE_WIDTH: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_NODE_WIDTH; },\n/* harmony export */   VERKLE_NONCE_LEAF_KEY: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_NONCE_LEAF_KEY; },\n/* harmony export */   VERKLE_VERSION_LEAF_KEY: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VERKLE_VERSION_LEAF_KEY; },\n/* harmony export */   ValueEncoding: function() { return /* reexport safe */ _db_js__WEBPACK_IMPORTED_MODULE_4__.ValueEncoding; },\n/* harmony export */   VerkleLeafType: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.VerkleLeafType; },\n/* harmony export */   Withdrawal: function() { return /* reexport safe */ _withdrawal_js__WEBPACK_IMPORTED_MODULE_5__.Withdrawal; },\n/* harmony export */   WithdrawalRequest: function() { return /* reexport safe */ _requests_js__WEBPACK_IMPORTED_MODULE_17__.WithdrawalRequest; },\n/* harmony export */   accountBodyFromSlim: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.accountBodyFromSlim; },\n/* harmony export */   accountBodyToRLP: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.accountBodyToRLP; },\n/* harmony export */   accountBodyToSlim: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.accountBodyToSlim; },\n/* harmony export */   addHexPrefix: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.addHexPrefix; },\n/* harmony export */   arrayContainsArray: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.arrayContainsArray; },\n/* harmony export */   bigInt64ToBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigInt64ToBytes; },\n/* harmony export */   bigIntMax: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntMax; },\n/* harmony export */   bigIntMin: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntMin; },\n/* harmony export */   bigIntToAddressBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToAddressBytes; },\n/* harmony export */   bigIntToBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToBytes; },\n/* harmony export */   bigIntToHex: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToHex; },\n/* harmony export */   bigIntToUnpaddedBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedBytes; },\n/* harmony export */   blobsToCommitments: function() { return /* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.blobsToCommitments; },\n/* harmony export */   blobsToProofs: function() { return /* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.blobsToProofs; },\n/* harmony export */   bytesToBigInt: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToBigInt; },\n/* harmony export */   bytesToBigInt64: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToBigInt64; },\n/* harmony export */   bytesToHex: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToHex; },\n/* harmony export */   bytesToInt: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToInt; },\n/* harmony export */   bytesToInt32: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToInt32; },\n/* harmony export */   bytesToUnprefixedHex: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToUnprefixedHex; },\n/* harmony export */   bytesToUtf8: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToUtf8; },\n/* harmony export */   calculateSigRecovery: function() { return /* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.calculateSigRecovery; },\n/* harmony export */   chunkifyCode: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.chunkifyCode; },\n/* harmony export */   commitmentsToVersionedHashes: function() { return /* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.commitmentsToVersionedHashes; },\n/* harmony export */   compareBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.compareBytes; },\n/* harmony export */   computeVersionedHash: function() { return /* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.computeVersionedHash; },\n/* harmony export */   concatBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.concatBytes; },\n/* harmony export */   ecrecover: function() { return /* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.ecrecover; },\n/* harmony export */   ecsign: function() { return /* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.ecsign; },\n/* harmony export */   equalsBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.equalsBytes; },\n/* harmony export */   fetchFromProvider: function() { return /* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_16__.fetchFromProvider; },\n/* harmony export */   formatBigDecimal: function() { return /* reexport safe */ _units_js__WEBPACK_IMPORTED_MODULE_1__.formatBigDecimal; },\n/* harmony export */   fromAscii: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.fromAscii; },\n/* harmony export */   fromRpcSig: function() { return /* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.fromRpcSig; },\n/* harmony export */   fromSigned: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.fromSigned; },\n/* harmony export */   fromUtf8: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.fromUtf8; },\n/* harmony export */   generateAddress: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.generateAddress; },\n/* harmony export */   generateAddress2: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.generateAddress2; },\n/* harmony export */   getBinarySize: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.getBinarySize; },\n/* harmony export */   getBlobs: function() { return /* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.getBlobs; },\n/* harmony export */   getKeys: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.getKeys; },\n/* harmony export */   getProvider: function() { return /* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_16__.getProvider; },\n/* harmony export */   getVerkleKey: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.getVerkleKey; },\n/* harmony export */   getVerkleStem: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.getVerkleStem; },\n/* harmony export */   getVerkleTreeIndexesForStorageSlot: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.getVerkleTreeIndexesForStorageSlot; },\n/* harmony export */   getVerkleTreeIndicesForCodeChunk: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.getVerkleTreeIndicesForCodeChunk; },\n/* harmony export */   getVerkleTreeKeyForCodeChunk: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.getVerkleTreeKeyForCodeChunk; },\n/* harmony export */   getVerkleTreeKeyForStorageSlot: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.getVerkleTreeKeyForStorageSlot; },\n/* harmony export */   hashPersonalMessage: function() { return /* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.hashPersonalMessage; },\n/* harmony export */   hexToBigInt: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.hexToBigInt; },\n/* harmony export */   hexToBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.hexToBytes; },\n/* harmony export */   importPublic: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.importPublic; },\n/* harmony export */   initKZG: function() { return /* reexport safe */ _kzg_js__WEBPACK_IMPORTED_MODULE_13__.initKZG; },\n/* harmony export */   int32ToBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.int32ToBytes; },\n/* harmony export */   intToBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.intToBytes; },\n/* harmony export */   intToHex: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.intToHex; },\n/* harmony export */   intToUnpaddedBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.intToUnpaddedBytes; },\n/* harmony export */   isHexString: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.isHexString; },\n/* harmony export */   isNestedUint8Array: function() { return /* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_8__.isNestedUint8Array; },\n/* harmony export */   isValidAddress: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidAddress; },\n/* harmony export */   isValidChecksumAddress: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidChecksumAddress; },\n/* harmony export */   isValidPrivate: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidPrivate; },\n/* harmony export */   isValidPublic: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidPublic; },\n/* harmony export */   isValidSignature: function() { return /* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.isValidSignature; },\n/* harmony export */   isZeroAddress: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isZeroAddress; },\n/* harmony export */   padToEven: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.padToEven; },\n/* harmony export */   parseGethGenesisState: function() { return /* reexport safe */ _genesis_js__WEBPACK_IMPORTED_MODULE_11__.parseGethGenesisState; },\n/* harmony export */   privateToAddress: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.privateToAddress; },\n/* harmony export */   privateToPublic: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.privateToPublic; },\n/* harmony export */   pubToAddress: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.pubToAddress; },\n/* harmony export */   publicToAddress: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.publicToAddress; },\n/* harmony export */   randomBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.randomBytes; },\n/* harmony export */   setLengthLeft: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.setLengthLeft; },\n/* harmony export */   setLengthRight: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.setLengthRight; },\n/* harmony export */   short: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.short; },\n/* harmony export */   stripHexPrefix: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.stripHexPrefix; },\n/* harmony export */   toAscii: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.toAscii; },\n/* harmony export */   toBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.toBytes; },\n/* harmony export */   toChecksumAddress: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.toChecksumAddress; },\n/* harmony export */   toCompactSig: function() { return /* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.toCompactSig; },\n/* harmony export */   toRpcSig: function() { return /* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.toRpcSig; },\n/* harmony export */   toType: function() { return /* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_8__.toType; },\n/* harmony export */   toUnsigned: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.toUnsigned; },\n/* harmony export */   unpadArray: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unpadArray; },\n/* harmony export */   unpadBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unpadBytes; },\n/* harmony export */   unpadHex: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unpadHex; },\n/* harmony export */   unprefixedHexToBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unprefixedHexToBytes; },\n/* harmony export */   utf8ToBytes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.utf8ToBytes; },\n/* harmony export */   validateNoLeadingZeroes: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.validateNoLeadingZeroes; },\n/* harmony export */   verifyVerkleProof: function() { return /* reexport safe */ _verkle_js__WEBPACK_IMPORTED_MODULE_18__.verifyVerkleProof; },\n/* harmony export */   zeroAddress: function() { return /* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.zeroAddress; },\n/* harmony export */   zeros: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.zeros; }\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _units_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./units.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/units.js\");\n/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./account.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/account.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./address.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/address.js\");\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./db.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/db.js\");\n/* harmony import */ var _withdrawal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./withdrawal.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/withdrawal.js\");\n/* harmony import */ var _signature_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./signature.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/signature.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./types.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/types.js\");\n/* harmony import */ var _asyncEventEmitter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./asyncEventEmitter.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js\");\n/* harmony import */ var _blobs_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./blobs.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/blobs.js\");\n/* harmony import */ var _genesis_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./genesis.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/genesis.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./internal.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n/* harmony import */ var _kzg_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./kzg.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/kzg.js\");\n/* harmony import */ var _lock_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lock.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/lock.js\");\n/* harmony import */ var _mapDB_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./mapDB.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/mapDB.js\");\n/* harmony import */ var _provider_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./provider.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/provider.js\");\n/* harmony import */ var _requests_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./requests.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/requests.js\");\n/* harmony import */ var _verkle_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./verkle.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/verkle.js\");\n/**\n * Constants\n */\n\n/**\n * Units helpers\n */\n\n/**\n * Account class and helper functions\n */\n\n/**\n * Address type\n */\n\n/**\n * DB type\n */\n\n/**\n * Withdrawal type\n */\n\n/**\n * ECDSA signature\n */\n\n/**\n * Utilities for manipulating bytes, Uint8Arrays, etc.\n */\n\n/**\n * Helpful TypeScript types\n */\n\n/**\n * Export ethjs-util methods\n */\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUMrQjtBQUMvQjtBQUNBO0FBQ0E7QUFDMkI7QUFDM0I7QUFDQTtBQUNBO0FBQzZCO0FBQzdCO0FBQ0E7QUFDQTtBQUM2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ2dDO0FBQ2hDO0FBQ0E7QUFDQTtBQUMrQjtBQUMvQjtBQUNBO0FBQ0E7QUFDMkI7QUFDM0I7QUFDQTtBQUNBO0FBQzJCO0FBQzNCO0FBQ0E7QUFDQTtBQUN1QztBQUNaO0FBQ0U7QUFDcUg7QUFDekg7QUFDQztBQUNDO0FBQ0c7QUFDQTtBQUNGO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vaW5kZXguanM/NDRmNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnN0YW50c1xuICovXG5leHBvcnQgKiBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG4vKipcbiAqIFVuaXRzIGhlbHBlcnNcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi91bml0cy5qcyc7XG4vKipcbiAqIEFjY291bnQgY2xhc3MgYW5kIGhlbHBlciBmdW5jdGlvbnNcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9hY2NvdW50LmpzJztcbi8qKlxuICogQWRkcmVzcyB0eXBlXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vYWRkcmVzcy5qcyc7XG4vKipcbiAqIERCIHR5cGVcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9kYi5qcyc7XG4vKipcbiAqIFdpdGhkcmF3YWwgdHlwZVxuICovXG5leHBvcnQgKiBmcm9tICcuL3dpdGhkcmF3YWwuanMnO1xuLyoqXG4gKiBFQ0RTQSBzaWduYXR1cmVcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9zaWduYXR1cmUuanMnO1xuLyoqXG4gKiBVdGlsaXRpZXMgZm9yIG1hbmlwdWxhdGluZyBieXRlcywgVWludDhBcnJheXMsIGV0Yy5cbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9ieXRlcy5qcyc7XG4vKipcbiAqIEhlbHBmdWwgVHlwZVNjcmlwdCB0eXBlc1xuICovXG5leHBvcnQgKiBmcm9tICcuL3R5cGVzLmpzJztcbi8qKlxuICogRXhwb3J0IGV0aGpzLXV0aWwgbWV0aG9kc1xuICovXG5leHBvcnQgKiBmcm9tICcuL2FzeW5jRXZlbnRFbWl0dGVyLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vYmxvYnMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9nZW5lc2lzLmpzJztcbmV4cG9ydCB7IGFycmF5Q29udGFpbnNBcnJheSwgZnJvbUFzY2lpLCBmcm9tVXRmOCwgZ2V0QmluYXJ5U2l6ZSwgZ2V0S2V5cywgaXNIZXhTdHJpbmcsIHBhZFRvRXZlbiwgc3RyaXBIZXhQcmVmaXgsIHRvQXNjaWksIH0gZnJvbSAnLi9pbnRlcm5hbC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2t6Zy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xvY2suanMnO1xuZXhwb3J0ICogZnJvbSAnLi9tYXBEQi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3Byb3ZpZGVyLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vcmVxdWVzdHMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi92ZXJrbGUuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/internal.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/internal.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayContainsArray: function() { return /* binding */ arrayContainsArray; },\n/* harmony export */   fromAscii: function() { return /* binding */ fromAscii; },\n/* harmony export */   fromUtf8: function() { return /* binding */ fromUtf8; },\n/* harmony export */   getBinarySize: function() { return /* binding */ getBinarySize; },\n/* harmony export */   getKeys: function() { return /* binding */ getKeys; },\n/* harmony export */   isHexString: function() { return /* binding */ isHexString; },\n/* harmony export */   padToEven: function() { return /* binding */ padToEven; },\n/* harmony export */   stripHexPrefix: function() { return /* binding */ stripHexPrefix; },\n/* harmony export */   toAscii: function() { return /* binding */ toAscii; }\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/*\nThe MIT License\n\nCopyright (c) 2016 Nick Dodson. nickdodson.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE\n */\n\n/**\n * Returns a boolean on whether or not the the input starts with '0x' and matches the optional length\n * @param {string} value the string input value\n * @param {number|undefined} length the optional length of the hex string in bytes\n * @returns {boolean} Whether or not the string is a valid PrefixedHexString matching the optional length\n */\nfunction isHexString(value, length) {\n    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/))\n        return false;\n    if (typeof length !== 'undefined' && length > 0 && value.length !== 2 + 2 * length)\n        return false;\n    return true;\n}\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nconst stripHexPrefix = (str) => {\n    if (typeof str !== 'string')\n        throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n    return isHexString(str) ? str.slice(2) : str;\n};\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nfunction padToEven(value) {\n    let a = value;\n    if (typeof a !== 'string') {\n        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n    }\n    if (a.length % 2)\n        a = `0${a}`;\n    return a;\n}\n/**\n * Get the binary size of a string\n * @param str\n * @returns the number of bytes contained within the string\n */\nfunction getBinarySize(str) {\n    if (typeof str !== 'string') {\n        throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`);\n    }\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(str).byteLength;\n}\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param superset\n * @param subset\n *\n */\nfunction arrayContainsArray(superset, subset, some) {\n    if (Array.isArray(superset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`);\n    }\n    if (Array.isArray(subset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`);\n    }\n    return subset[some === true ? 'some' : 'every']((value) => superset.indexOf(value) >= 0);\n}\n/**\n * Should be called to get ascii from its hex representation\n *\n * @param string in hex\n * @returns ascii string representation of hex value\n */\nfunction toAscii(hex) {\n    let str = '';\n    let i = 0;\n    const l = hex.length;\n    if (hex.substring(0, 2) === '0x')\n        i = 2;\n    for (; i < l; i += 2) {\n        const code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n    return str;\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string.\n * Strips leading and trailing 0's.\n *\n * @param string\n * @param optional padding\n * @returns hex representation of input string\n */\nfunction fromUtf8(stringValue) {\n    const str = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(stringValue);\n    return `0x${padToEven((0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(str)).replace(/^0+|0+$/g, '')}`;\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @param  string\n * @param  optional padding\n * @returns  hex representation of input string\n */\nfunction fromAscii(stringValue) {\n    let hex = '';\n    for (let i = 0; i < stringValue.length; i++) {\n        const code = stringValue.charCodeAt(i);\n        const n = code.toString(16);\n        hex += n.length < 2 ? `0${n}` : n;\n    }\n    return `0x${hex}`;\n}\n/**\n * Returns the keys from an array of objects.\n * @example\n * ```js\n * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']\n *````\n * @param  params\n * @param  key\n * @param  allowEmpty\n * @returns output just a simple array of output keys\n */\nfunction getKeys(params, key, allowEmpty) {\n    if (!Array.isArray(params)) {\n        throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`);\n    }\n    if (typeof key !== 'string') {\n        throw new Error(`[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`);\n    }\n    const result = [];\n    for (let i = 0; i < params.length; i++) {\n        let value = params[i][key];\n        if (allowEmpty === true && !value) {\n            value = '';\n        }\n        else if (typeof value !== 'string') {\n            throw new Error(`invalid abi - expected type 'string', received ${typeof value}`);\n        }\n        result.push(value);\n    }\n    return result;\n}\n//# sourceMappingURL=internal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/internal.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/kzg.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/kzg.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initKZG: function() { return /* binding */ initKZG; }\n/* harmony export */ });\n/**\n * @deprecated This initialization method is deprecated since trusted setup loading is done directly in the reference KZG library\n * initialization or should othewise be assured independently before KZG libary usage.\n *\n * @param kzgLib a KZG implementation (defaults to c-kzg)\n * @param a dictionary of trusted setup options\n */\nfunction initKZG(kzg, _trustedSetupPath) {\n    kzg.loadTrustedSetup();\n}\n//# sourceMappingURL=kzg.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20va3pnLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20va3pnLmpzPzQxNjMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGluaXRpYWxpemF0aW9uIG1ldGhvZCBpcyBkZXByZWNhdGVkIHNpbmNlIHRydXN0ZWQgc2V0dXAgbG9hZGluZyBpcyBkb25lIGRpcmVjdGx5IGluIHRoZSByZWZlcmVuY2UgS1pHIGxpYnJhcnlcbiAqIGluaXRpYWxpemF0aW9uIG9yIHNob3VsZCBvdGhld2lzZSBiZSBhc3N1cmVkIGluZGVwZW5kZW50bHkgYmVmb3JlIEtaRyBsaWJhcnkgdXNhZ2UuXG4gKlxuICogQHBhcmFtIGt6Z0xpYiBhIEtaRyBpbXBsZW1lbnRhdGlvbiAoZGVmYXVsdHMgdG8gYy1remcpXG4gKiBAcGFyYW0gYSBkaWN0aW9uYXJ5IG9mIHRydXN0ZWQgc2V0dXAgb3B0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdEtaRyhremcsIF90cnVzdGVkU2V0dXBQYXRoKSB7XG4gICAga3pnLmxvYWRUcnVzdGVkU2V0dXAoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWt6Zy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/kzg.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/lock.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/lock.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lock: function() { return /* binding */ Lock; }\n/* harmony export */ });\n// Based on https://github.com/jsoendermann/semaphore-async-await/blob/master/src/Semaphore.ts\nclass Lock {\n    constructor() {\n        this.permits = 1;\n        this.promiseResolverQueue = [];\n    }\n    /**\n     * Returns a promise used to wait for a permit to become available. This method should be awaited on.\n     * @returns  A promise that gets resolved when execution is allowed to proceed.\n     */\n    async acquire() {\n        if (this.permits > 0) {\n            this.permits -= 1;\n            return Promise.resolve(true);\n        }\n        // If there is no permit available, we return a promise that resolves once the semaphore gets\n        // signaled enough times that permits is equal to one.\n        return new Promise((resolver) => this.promiseResolverQueue.push(resolver));\n    }\n    /**\n     * Increases the number of permits by one. If there are other functions waiting, one of them will\n     * continue to execute in a future iteration of the event loop.\n     */\n    release() {\n        this.permits += 1;\n        if (this.permits > 1 && this.promiseResolverQueue.length > 0) {\n            // eslint-disable-next-line no-console\n            console.warn('Lock.permits should never be > 0 when there is someone waiting.');\n        }\n        else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {\n            // If there is someone else waiting, immediately consume the permit that was released\n            // at the beginning of this function and let the waiting function resume.\n            this.permits -= 1;\n            const nextResolver = this.promiseResolverQueue.shift();\n            if (nextResolver) {\n                nextResolver(true);\n            }\n        }\n    }\n}\n//# sourceMappingURL=lock.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vbG9jay5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2xvY2suanM/NDY1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vanNvZW5kZXJtYW5uL3NlbWFwaG9yZS1hc3luYy1hd2FpdC9ibG9iL21hc3Rlci9zcmMvU2VtYXBob3JlLnRzXG5leHBvcnQgY2xhc3MgTG9jayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucGVybWl0cyA9IDE7XG4gICAgICAgIHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHByb21pc2UgdXNlZCB0byB3YWl0IGZvciBhIHBlcm1pdCB0byBiZWNvbWUgYXZhaWxhYmxlLiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgYXdhaXRlZCBvbi5cbiAgICAgKiBAcmV0dXJucyAgQSBwcm9taXNlIHRoYXQgZ2V0cyByZXNvbHZlZCB3aGVuIGV4ZWN1dGlvbiBpcyBhbGxvd2VkIHRvIHByb2NlZWQuXG4gICAgICovXG4gICAgYXN5bmMgYWNxdWlyZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucGVybWl0cyA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucGVybWl0cyAtPSAxO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBwZXJtaXQgYXZhaWxhYmxlLCB3ZSByZXR1cm4gYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25jZSB0aGUgc2VtYXBob3JlIGdldHNcbiAgICAgICAgLy8gc2lnbmFsZWQgZW5vdWdoIHRpbWVzIHRoYXQgcGVybWl0cyBpcyBlcXVhbCB0byBvbmUuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZXIpID0+IHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUucHVzaChyZXNvbHZlcikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNyZWFzZXMgdGhlIG51bWJlciBvZiBwZXJtaXRzIGJ5IG9uZS4gSWYgdGhlcmUgYXJlIG90aGVyIGZ1bmN0aW9ucyB3YWl0aW5nLCBvbmUgb2YgdGhlbSB3aWxsXG4gICAgICogY29udGludWUgdG8gZXhlY3V0ZSBpbiBhIGZ1dHVyZSBpdGVyYXRpb24gb2YgdGhlIGV2ZW50IGxvb3AuXG4gICAgICovXG4gICAgcmVsZWFzZSgpIHtcbiAgICAgICAgdGhpcy5wZXJtaXRzICs9IDE7XG4gICAgICAgIGlmICh0aGlzLnBlcm1pdHMgPiAxICYmIHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignTG9jay5wZXJtaXRzIHNob3VsZCBuZXZlciBiZSA+IDAgd2hlbiB0aGVyZSBpcyBzb21lb25lIHdhaXRpbmcuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wZXJtaXRzID09PSAxICYmIHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgc29tZW9uZSBlbHNlIHdhaXRpbmcsIGltbWVkaWF0ZWx5IGNvbnN1bWUgdGhlIHBlcm1pdCB0aGF0IHdhcyByZWxlYXNlZFxuICAgICAgICAgICAgLy8gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGlzIGZ1bmN0aW9uIGFuZCBsZXQgdGhlIHdhaXRpbmcgZnVuY3Rpb24gcmVzdW1lLlxuICAgICAgICAgICAgdGhpcy5wZXJtaXRzIC09IDE7XG4gICAgICAgICAgICBjb25zdCBuZXh0UmVzb2x2ZXIgPSB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAobmV4dFJlc29sdmVyKSB7XG4gICAgICAgICAgICAgICAgbmV4dFJlc29sdmVyKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jay5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/lock.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/mapDB.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/mapDB.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapDB: function() { return /* binding */ MapDB; }\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\nclass MapDB {\n    constructor(database) {\n        this._database = database ?? new Map();\n    }\n    async get(key) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        return this._database.get(dbKey);\n    }\n    async put(key, val) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        this._database.set(dbKey, val);\n    }\n    async del(key) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        this._database.delete(dbKey);\n    }\n    async batch(opStack) {\n        for (const op of opStack) {\n            if (op.type === 'del') {\n                await this.del(op.key);\n            }\n            if (op.type === 'put') {\n                await this.put(op.key, op.value);\n            }\n        }\n    }\n    /**\n     * Note that the returned shallow copy will share the underlying database with the original\n     *\n     * @returns DB\n     */\n    shallowCopy() {\n        return new MapDB(this._database);\n    }\n    open() {\n        return Promise.resolve();\n    }\n}\n//# sourceMappingURL=mapDB.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vbWFwREIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0Q7QUFDM0M7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCwrREFBb0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELCtEQUFvQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsK0RBQW9CO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vbWFwREIuanM/MGY2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBieXRlc1RvVW5wcmVmaXhlZEhleCB9IGZyb20gJy4vYnl0ZXMuanMnO1xuZXhwb3J0IGNsYXNzIE1hcERCIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhYmFzZSkge1xuICAgICAgICB0aGlzLl9kYXRhYmFzZSA9IGRhdGFiYXNlID8/IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0KGtleSkge1xuICAgICAgICBjb25zdCBkYktleSA9IGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBieXRlc1RvVW5wcmVmaXhlZEhleChrZXkpIDoga2V5LnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhYmFzZS5nZXQoZGJLZXkpO1xuICAgIH1cbiAgICBhc3luYyBwdXQoa2V5LCB2YWwpIHtcbiAgICAgICAgY29uc3QgZGJLZXkgPSBrZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gYnl0ZXNUb1VucHJlZml4ZWRIZXgoa2V5KSA6IGtleS50b1N0cmluZygpO1xuICAgICAgICB0aGlzLl9kYXRhYmFzZS5zZXQoZGJLZXksIHZhbCk7XG4gICAgfVxuICAgIGFzeW5jIGRlbChrZXkpIHtcbiAgICAgICAgY29uc3QgZGJLZXkgPSBrZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gYnl0ZXNUb1VucHJlZml4ZWRIZXgoa2V5KSA6IGtleS50b1N0cmluZygpO1xuICAgICAgICB0aGlzLl9kYXRhYmFzZS5kZWxldGUoZGJLZXkpO1xuICAgIH1cbiAgICBhc3luYyBiYXRjaChvcFN0YWNrKSB7XG4gICAgICAgIGZvciAoY29uc3Qgb3Agb2Ygb3BTdGFjaykge1xuICAgICAgICAgICAgaWYgKG9wLnR5cGUgPT09ICdkZWwnKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5kZWwob3Aua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcC50eXBlID09PSAncHV0Jykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucHV0KG9wLmtleSwgb3AudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vdGUgdGhhdCB0aGUgcmV0dXJuZWQgc2hhbGxvdyBjb3B5IHdpbGwgc2hhcmUgdGhlIHVuZGVybHlpbmcgZGF0YWJhc2Ugd2l0aCB0aGUgb3JpZ2luYWxcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIERCXG4gICAgICovXG4gICAgc2hhbGxvd0NvcHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWFwREIodGhpcy5fZGF0YWJhc2UpO1xuICAgIH1cbiAgICBvcGVuKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwREIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/mapDB.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/provider.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/provider.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchFromProvider: function() { return /* binding */ fetchFromProvider; },\n/* harmony export */   getProvider: function() { return /* binding */ getProvider; }\n/* harmony export */ });\n/**\n * Makes a simple RPC call to a remote Ethereum JSON-RPC provider and passes through the response.\n * No parameter or response validation is done.\n *\n * @param url the URL for the JSON RPC provider\n * @param params the parameters for the JSON-RPC method - refer to\n * https://ethereum.org/en/developers/docs/apis/json-rpc/ for details on RPC methods\n * @returns the `result` field from the JSON-RPC response\n * @example\n * ```ts\n * const provider = 'https://mainnet.infura.io/v3/...'\n * const params = {\n *   method: 'eth_getBlockByNumber',\n *   params: ['latest', false],\n * }\n * const block = await fetchFromProvider(provider, params)\n * ```\n */\nconst fetchFromProvider = async (url, params) => {\n    const data = JSON.stringify({\n        method: params.method,\n        params: params.params,\n        jsonrpc: '2.0',\n        id: 1,\n    });\n    const res = await fetch(url, {\n        headers: {\n            'content-type': 'application/json',\n        },\n        method: 'POST',\n        body: data,\n    });\n    if (!res.ok) {\n        throw new Error(`JSONRpcError: ${JSON.stringify({\n            method: params.method,\n            status: res.status,\n            message: await res.text().catch(() => {\n                return 'Could not parse error message likely because of a network error';\n            }),\n        }, null, 2)}`);\n    }\n    const json = await res.json();\n    // TODO we should check json.error here\n    return json.result;\n};\n/**\n *\n * @param provider a URL string or {@link EthersProvider}\n * @returns the extracted URL string for the JSON-RPC Provider\n */\nconst getProvider = (provider) => {\n    if (typeof provider === 'string') {\n        return provider;\n    }\n    else if (typeof provider === 'object' && provider._getConnection !== undefined) {\n        return provider._getConnection().url;\n    }\n    else {\n        throw new Error('Must provide valid provider URL or Web3Provider');\n    }\n};\n//# sourceMappingURL=provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUyxXQUFXO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL2NvbW1vbi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9wcm92aWRlci5qcz8yYWRlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTWFrZXMgYSBzaW1wbGUgUlBDIGNhbGwgdG8gYSByZW1vdGUgRXRoZXJldW0gSlNPTi1SUEMgcHJvdmlkZXIgYW5kIHBhc3NlcyB0aHJvdWdoIHRoZSByZXNwb25zZS5cbiAqIE5vIHBhcmFtZXRlciBvciByZXNwb25zZSB2YWxpZGF0aW9uIGlzIGRvbmUuXG4gKlxuICogQHBhcmFtIHVybCB0aGUgVVJMIGZvciB0aGUgSlNPTiBSUEMgcHJvdmlkZXJcbiAqIEBwYXJhbSBwYXJhbXMgdGhlIHBhcmFtZXRlcnMgZm9yIHRoZSBKU09OLVJQQyBtZXRob2QgLSByZWZlciB0b1xuICogaHR0cHM6Ly9ldGhlcmV1bS5vcmcvZW4vZGV2ZWxvcGVycy9kb2NzL2FwaXMvanNvbi1ycGMvIGZvciBkZXRhaWxzIG9uIFJQQyBtZXRob2RzXG4gKiBAcmV0dXJucyB0aGUgYHJlc3VsdGAgZmllbGQgZnJvbSB0aGUgSlNPTi1SUEMgcmVzcG9uc2VcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogY29uc3QgcHJvdmlkZXIgPSAnaHR0cHM6Ly9tYWlubmV0LmluZnVyYS5pby92My8uLi4nXG4gKiBjb25zdCBwYXJhbXMgPSB7XG4gKiAgIG1ldGhvZDogJ2V0aF9nZXRCbG9ja0J5TnVtYmVyJyxcbiAqICAgcGFyYW1zOiBbJ2xhdGVzdCcsIGZhbHNlXSxcbiAqIH1cbiAqIGNvbnN0IGJsb2NrID0gYXdhaXQgZmV0Y2hGcm9tUHJvdmlkZXIocHJvdmlkZXIsIHBhcmFtcylcbiAqIGBgYFxuICovXG5leHBvcnQgY29uc3QgZmV0Y2hGcm9tUHJvdmlkZXIgPSBhc3luYyAodXJsLCBwYXJhbXMpID0+IHtcbiAgICBjb25zdCBkYXRhID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBtZXRob2Q6IHBhcmFtcy5tZXRob2QsXG4gICAgICAgIHBhcmFtczogcGFyYW1zLnBhcmFtcyxcbiAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgIGlkOiAxLFxuICAgIH0pO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogZGF0YSxcbiAgICB9KTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEpTT05ScGNFcnJvcjogJHtKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBtZXRob2Q6IHBhcmFtcy5tZXRob2QsXG4gICAgICAgICAgICBzdGF0dXM6IHJlcy5zdGF0dXMsXG4gICAgICAgICAgICBtZXNzYWdlOiBhd2FpdCByZXMudGV4dCgpLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0NvdWxkIG5vdCBwYXJzZSBlcnJvciBtZXNzYWdlIGxpa2VseSBiZWNhdXNlIG9mIGEgbmV0d29yayBlcnJvcic7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSwgbnVsbCwgMil9YCk7XG4gICAgfVxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgIC8vIFRPRE8gd2Ugc2hvdWxkIGNoZWNrIGpzb24uZXJyb3IgaGVyZVxuICAgIHJldHVybiBqc29uLnJlc3VsdDtcbn07XG4vKipcbiAqXG4gKiBAcGFyYW0gcHJvdmlkZXIgYSBVUkwgc3RyaW5nIG9yIHtAbGluayBFdGhlcnNQcm92aWRlcn1cbiAqIEByZXR1cm5zIHRoZSBleHRyYWN0ZWQgVVJMIHN0cmluZyBmb3IgdGhlIEpTT04tUlBDIFByb3ZpZGVyXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRQcm92aWRlciA9IChwcm92aWRlcikgPT4ge1xuICAgIGlmICh0eXBlb2YgcHJvdmlkZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlcjtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHByb3ZpZGVyID09PSAnb2JqZWN0JyAmJiBwcm92aWRlci5fZ2V0Q29ubmVjdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlci5fZ2V0Q29ubmVjdGlvbigpLnVybDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIHZhbGlkIHByb3ZpZGVyIFVSTCBvciBXZWIzUHJvdmlkZXInKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/requests.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/requests.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CLRequest: function() { return /* binding */ CLRequest; },\n/* harmony export */   CLRequestFactory: function() { return /* binding */ CLRequestFactory; },\n/* harmony export */   CLRequestType: function() { return /* binding */ CLRequestType; },\n/* harmony export */   ConsolidationRequest: function() { return /* binding */ ConsolidationRequest; },\n/* harmony export */   DepositRequest: function() { return /* binding */ DepositRequest; },\n/* harmony export */   WithdrawalRequest: function() { return /* binding */ WithdrawalRequest; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var ethereum_cryptography_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/utils */ \"(app-pages-browser)/./node_modules/ethereum-cryptography/esm/utils.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n\n\n\n\nvar CLRequestType;\n(function (CLRequestType) {\n    CLRequestType[CLRequestType[\"Deposit\"] = 0] = \"Deposit\";\n    CLRequestType[CLRequestType[\"Withdrawal\"] = 1] = \"Withdrawal\";\n    CLRequestType[CLRequestType[\"Consolidation\"] = 2] = \"Consolidation\";\n})(CLRequestType || (CLRequestType = {}));\nclass CLRequest {\n    constructor(type) {\n        this.type = type;\n    }\n}\nclass DepositRequest extends CLRequest {\n    constructor(pubkey, withdrawalCredentials, amount, signature, index) {\n        super(CLRequestType.Deposit);\n        this.pubkey = pubkey;\n        this.withdrawalCredentials = withdrawalCredentials;\n        this.amount = amount;\n        this.signature = signature;\n        this.index = index;\n    }\n    static fromRequestData(depositData) {\n        const { pubkey, withdrawalCredentials, amount, signature, index } = depositData;\n        return new DepositRequest(pubkey, withdrawalCredentials, amount, signature, index);\n    }\n    static fromJSON(jsonData) {\n        const { pubkey, withdrawalCredentials, amount, signature, index } = jsonData;\n        return this.fromRequestData({\n            pubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(pubkey),\n            withdrawalCredentials: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(withdrawalCredentials),\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBigInt)(amount),\n            signature: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(signature),\n            index: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBigInt)(index),\n        });\n    }\n    serialize() {\n        const indexBytes = this.index === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 ? new Uint8Array() : (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bigIntToBytes)(this.index);\n        const amountBytes = this.amount === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 ? new Uint8Array() : (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bigIntToBytes)(this.amount);\n        return (0,ethereum_cryptography_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(Uint8Array.from([this.type]), _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([this.pubkey, this.withdrawalCredentials, amountBytes, this.signature, indexBytes]));\n    }\n    toJSON() {\n        return {\n            pubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.pubkey),\n            withdrawalCredentials: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.withdrawalCredentials),\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bigIntToHex)(this.amount),\n            signature: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.signature),\n            index: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bigIntToHex)(this.index),\n        };\n    }\n    static deserialize(bytes) {\n        const [pubkey, withdrawalCredentials, amount, signature, index] = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(bytes.slice(1));\n        return this.fromRequestData({\n            pubkey,\n            withdrawalCredentials,\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(amount),\n            signature,\n            index: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(index),\n        });\n    }\n}\nclass WithdrawalRequest extends CLRequest {\n    constructor(sourceAddress, validatorPubkey, amount) {\n        super(CLRequestType.Withdrawal);\n        this.sourceAddress = sourceAddress;\n        this.validatorPubkey = validatorPubkey;\n        this.amount = amount;\n    }\n    static fromRequestData(withdrawalData) {\n        const { sourceAddress, validatorPubkey, amount } = withdrawalData;\n        return new WithdrawalRequest(sourceAddress, validatorPubkey, amount);\n    }\n    static fromJSON(jsonData) {\n        const { sourceAddress, validatorPubkey, amount } = jsonData;\n        return this.fromRequestData({\n            sourceAddress: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(sourceAddress),\n            validatorPubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(validatorPubkey),\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBigInt)(amount),\n        });\n    }\n    serialize() {\n        const amountBytes = this.amount === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 ? new Uint8Array() : (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bigIntToBytes)(this.amount);\n        return (0,ethereum_cryptography_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(Uint8Array.from([this.type]), _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([this.sourceAddress, this.validatorPubkey, amountBytes]));\n    }\n    toJSON() {\n        return {\n            sourceAddress: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.sourceAddress),\n            validatorPubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.validatorPubkey),\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bigIntToHex)(this.amount),\n        };\n    }\n    static deserialize(bytes) {\n        const [sourceAddress, validatorPubkey, amount] = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(bytes.slice(1));\n        return this.fromRequestData({\n            sourceAddress,\n            validatorPubkey,\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(amount),\n        });\n    }\n}\nclass ConsolidationRequest extends CLRequest {\n    constructor(sourceAddress, sourcePubkey, targetPubkey) {\n        super(CLRequestType.Consolidation);\n        this.sourceAddress = sourceAddress;\n        this.sourcePubkey = sourcePubkey;\n        this.targetPubkey = targetPubkey;\n    }\n    static fromRequestData(consolidationData) {\n        const { sourceAddress, sourcePubkey, targetPubkey } = consolidationData;\n        return new ConsolidationRequest(sourceAddress, sourcePubkey, targetPubkey);\n    }\n    static fromJSON(jsonData) {\n        const { sourceAddress, sourcePubkey, targetPubkey } = jsonData;\n        return this.fromRequestData({\n            sourceAddress: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(sourceAddress),\n            sourcePubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(sourcePubkey),\n            targetPubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(targetPubkey),\n        });\n    }\n    serialize() {\n        return (0,ethereum_cryptography_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(Uint8Array.from([this.type]), _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([this.sourceAddress, this.sourcePubkey, this.targetPubkey]));\n    }\n    toJSON() {\n        return {\n            sourceAddress: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.sourceAddress),\n            sourcePubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.sourcePubkey),\n            targetPubkey: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.targetPubkey),\n        };\n    }\n    static deserialize(bytes) {\n        const [sourceAddress, sourcePubkey, targetPubkey] = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(bytes.slice(1));\n        return this.fromRequestData({\n            sourceAddress,\n            sourcePubkey,\n            targetPubkey,\n        });\n    }\n}\nclass CLRequestFactory {\n    static fromSerializedRequest(bytes) {\n        switch (bytes[0]) {\n            case CLRequestType.Deposit:\n                return DepositRequest.deserialize(bytes);\n            case CLRequestType.Withdrawal:\n                return WithdrawalRequest.deserialize(bytes);\n            case CLRequestType.Consolidation:\n                return ConsolidationRequest.deserialize(bytes);\n            default:\n                throw Error(`Invalid request type=${bytes[0]}`);\n        }\n    }\n}\n//# sourceMappingURL=requests.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/requests.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/signature.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/signature.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateSigRecovery: function() { return /* binding */ calculateSigRecovery; },\n/* harmony export */   ecrecover: function() { return /* binding */ ecrecover; },\n/* harmony export */   ecsign: function() { return /* binding */ ecsign; },\n/* harmony export */   fromRpcSig: function() { return /* binding */ fromRpcSig; },\n/* harmony export */   hashPersonalMessage: function() { return /* binding */ hashPersonalMessage; },\n/* harmony export */   isValidSignature: function() { return /* binding */ isValidSignature; },\n/* harmony export */   toCompactSig: function() { return /* binding */ toCompactSig; },\n/* harmony export */   toRpcSig: function() { return /* binding */ toRpcSig; }\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(app-pages-browser)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(app-pages-browser)/./node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n\n\n\n\n\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\nfunction ecsign(msgHash, privateKey, chainId) {\n    const sig = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__.secp256k1.sign(msgHash, privateKey);\n    const buf = sig.toCompactRawBytes();\n    const r = buf.slice(0, 32);\n    const s = buf.slice(32, 64);\n    const v = chainId === undefined\n        ? BigInt(sig.recovery + 27)\n        : BigInt(sig.recovery + 35) + BigInt(chainId) * _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2;\n    return { r, s, v };\n}\nfunction calculateSigRecovery(v, chainId) {\n    if (v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1)\n        return v;\n    if (chainId === undefined) {\n        return v - _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_27;\n    }\n    return v - (chainId * _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2 + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || recovery === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1;\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nconst ecrecover = function (msgHash, v, r, s, chainId) {\n    const signature = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(s, 32));\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    const sig = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__.secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery));\n    const senderPubKey = sig.recoverPublicKey(msgHash);\n    return senderPubKey.toRawBytes(false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toRpcSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(s, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(v)));\n};\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toCompactSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    const ss = Uint8Array.from([...s]);\n    if ((v > BigInt(28) && v % _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2 === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1) || v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1 || v === BigInt(28)) {\n        ss[0] |= 0x80;\n    }\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(ss, 32)));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nconst fromRpcSig = function (sig) {\n    const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(sig);\n    let r;\n    let s;\n    let v;\n    if (bytes.length >= 65) {\n        r = bytes.subarray(0, 32);\n        s = bytes.subarray(32, 64);\n        v = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(bytes.subarray(64));\n    }\n    else if (bytes.length === 64) {\n        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n        r = bytes.subarray(0, 32);\n        s = bytes.subarray(32, 64);\n        v = BigInt((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToInt)(bytes.subarray(32, 33)) >> 7);\n        s[0] &= 0x7f;\n    }\n    else {\n        throw new Error('Invalid signature length');\n    }\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v = v + _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_27;\n    }\n    return {\n        v,\n        r,\n        s,\n    };\n};\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nconst isValidSignature = function (v, r, s, homesteadOrLater = true, chainId) {\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    const rBigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(r);\n    const sBigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(s);\n    if (rBigInt === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 ||\n        rBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER ||\n        sBigInt === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 ||\n        sBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER) {\n        return false;\n    }\n    if (homesteadOrLater && sBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER_DIV_2) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nconst hashPersonalMessage = function (message) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.assertIsBytes)(message);\n    const prefix = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.utf8ToBytes)(`\\u0019Ethereum Signed Message:\\n${message.length}`);\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)(prefix, message));\n};\n//# sourceMappingURL=signature.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/signature.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/types.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/types.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeOutput: function() { return /* binding */ TypeOutput; },\n/* harmony export */   isNestedUint8Array: function() { return /* binding */ isNestedUint8Array; },\n/* harmony export */   toType: function() { return /* binding */ toType; }\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\nfunction isNestedUint8Array(value) {\n    if (!Array.isArray(value)) {\n        return false;\n    }\n    for (const item of value) {\n        if (Array.isArray(item)) {\n            if (!isNestedUint8Array(item)) {\n                return false;\n            }\n        }\n        else if (!(item instanceof Uint8Array)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Type output options\n */\nvar TypeOutput;\n(function (TypeOutput) {\n    TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n    TypeOutput[TypeOutput[\"BigInt\"] = 1] = \"BigInt\";\n    TypeOutput[TypeOutput[\"Uint8Array\"] = 2] = \"Uint8Array\";\n    TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput || (TypeOutput = {}));\nfunction toType(input, outputType) {\n    if (input === null) {\n        return null;\n    }\n    if (input === undefined) {\n        return undefined;\n    }\n    if (typeof input === 'string' && !(0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(input)) {\n        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n    }\n    else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n        throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n    const output = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(input);\n    switch (outputType) {\n        case TypeOutput.Uint8Array:\n            return output;\n        case TypeOutput.BigInt:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)(output);\n        case TypeOutput.Number: {\n            const bigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)(output);\n            if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n                throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n            }\n            return Number(bigInt);\n        }\n        case TypeOutput.PrefixedHexString:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(output);\n        default:\n            throw new Error('unknown outputType');\n    }\n}\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBZ0U7QUFDcEI7QUFDckM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdDQUFnQztBQUMxQjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyx5REFBVztBQUNqRCw4RUFBOEUsTUFBTTtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixrREFBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix3REFBYTtBQUNoQztBQUNBLDJCQUEyQix3REFBYTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIscURBQVU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3R5cGVzLmpzPzI3M2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnl0ZXNUb0JpZ0ludCwgYnl0ZXNUb0hleCwgdG9CeXRlcyB9IGZyb20gJy4vYnl0ZXMuanMnO1xuaW1wb3J0IHsgaXNIZXhTdHJpbmcgfSBmcm9tICcuL2ludGVybmFsLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBpc05lc3RlZFVpbnQ4QXJyYXkodmFsdWUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgICAgICAgICBpZiAoIWlzTmVzdGVkVWludDhBcnJheShpdGVtKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghKGl0ZW0gaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBUeXBlIG91dHB1dCBvcHRpb25zXG4gKi9cbmV4cG9ydCB2YXIgVHlwZU91dHB1dDtcbihmdW5jdGlvbiAoVHlwZU91dHB1dCkge1xuICAgIFR5cGVPdXRwdXRbVHlwZU91dHB1dFtcIk51bWJlclwiXSA9IDBdID0gXCJOdW1iZXJcIjtcbiAgICBUeXBlT3V0cHV0W1R5cGVPdXRwdXRbXCJCaWdJbnRcIl0gPSAxXSA9IFwiQmlnSW50XCI7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiVWludDhBcnJheVwiXSA9IDJdID0gXCJVaW50OEFycmF5XCI7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiUHJlZml4ZWRIZXhTdHJpbmdcIl0gPSAzXSA9IFwiUHJlZml4ZWRIZXhTdHJpbmdcIjtcbn0pKFR5cGVPdXRwdXQgfHwgKFR5cGVPdXRwdXQgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIHRvVHlwZShpbnB1dCwgb3V0cHV0VHlwZSkge1xuICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgJiYgIWlzSGV4U3RyaW5nKGlucHV0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgc3RyaW5nIG11c3QgYmUgcHJvdmlkZWQgd2l0aCBhIDB4LXByZWZpeCwgZ2l2ZW46ICR7aW5wdXR9YCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgJiYgIU51bWJlci5pc1NhZmVJbnRlZ2VyKGlucHV0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm92aWRlZCBudW1iZXIgaXMgZ3JlYXRlciB0aGFuIE1BWF9TQUZFX0lOVEVHRVIgKHBsZWFzZSB1c2UgYW4gYWx0ZXJuYXRpdmUgaW5wdXQgdHlwZSknKTtcbiAgICB9XG4gICAgY29uc3Qgb3V0cHV0ID0gdG9CeXRlcyhpbnB1dCk7XG4gICAgc3dpdGNoIChvdXRwdXRUeXBlKSB7XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5VaW50OEFycmF5OlxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgY2FzZSBUeXBlT3V0cHV0LkJpZ0ludDpcbiAgICAgICAgICAgIHJldHVybiBieXRlc1RvQmlnSW50KG91dHB1dCk7XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5OdW1iZXI6IHtcbiAgICAgICAgICAgIGNvbnN0IGJpZ0ludCA9IGJ5dGVzVG9CaWdJbnQob3V0cHV0KTtcbiAgICAgICAgICAgIGlmIChiaWdJbnQgPiBCaWdJbnQoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcHJvdmlkZWQgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiBNQVhfU0FGRV9JTlRFR0VSIChwbGVhc2UgdXNlIGFuIGFsdGVybmF0aXZlIG91dHB1dCB0eXBlKScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcihiaWdJbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5QcmVmaXhlZEhleFN0cmluZzpcbiAgICAgICAgICAgIHJldHVybiBieXRlc1RvSGV4KG91dHB1dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gb3V0cHV0VHlwZScpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/types.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/units.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/units.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GWEI_TO_WEI: function() { return /* binding */ GWEI_TO_WEI; },\n/* harmony export */   formatBigDecimal: function() { return /* binding */ formatBigDecimal; }\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n\n/** Easy conversion from Gwei to wei */\nconst GWEI_TO_WEI = BigInt(1000000000);\nfunction formatBigDecimal(numerator, denominator, maxDecimalFactor) {\n    if (denominator === _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0) {\n        denominator = _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_1;\n    }\n    const full = numerator / denominator;\n    const fraction = ((numerator - full * denominator) * maxDecimalFactor) / denominator;\n    // zeros to be added post decimal are number of zeros in maxDecimalFactor - number of digits in fraction\n    const zerosPostDecimal = String(maxDecimalFactor).length - 1 - String(fraction).length;\n    return `${full}.${'0'.repeat(zerosPostDecimal)}${fraction}`;\n}\n//# sourceMappingURL=units.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vdW5pdHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9EO0FBQ3BEO0FBQ087QUFDQTtBQUNQLHdCQUF3QixtREFBUTtBQUNoQyxzQkFBc0IsbURBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsS0FBSyxHQUFHLDZCQUE2QixFQUFFLFNBQVM7QUFDOUQ7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3VuaXRzLmpzPzE0ZDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQklHSU5UXzAsIEJJR0lOVF8xIH0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuLyoqIEVhc3kgY29udmVyc2lvbiBmcm9tIEd3ZWkgdG8gd2VpICovXG5leHBvcnQgY29uc3QgR1dFSV9UT19XRUkgPSBCaWdJbnQoMTAwMDAwMDAwMCk7XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0QmlnRGVjaW1hbChudW1lcmF0b3IsIGRlbm9taW5hdG9yLCBtYXhEZWNpbWFsRmFjdG9yKSB7XG4gICAgaWYgKGRlbm9taW5hdG9yID09PSBCSUdJTlRfMCkge1xuICAgICAgICBkZW5vbWluYXRvciA9IEJJR0lOVF8xO1xuICAgIH1cbiAgICBjb25zdCBmdWxsID0gbnVtZXJhdG9yIC8gZGVub21pbmF0b3I7XG4gICAgY29uc3QgZnJhY3Rpb24gPSAoKG51bWVyYXRvciAtIGZ1bGwgKiBkZW5vbWluYXRvcikgKiBtYXhEZWNpbWFsRmFjdG9yKSAvIGRlbm9taW5hdG9yO1xuICAgIC8vIHplcm9zIHRvIGJlIGFkZGVkIHBvc3QgZGVjaW1hbCBhcmUgbnVtYmVyIG9mIHplcm9zIGluIG1heERlY2ltYWxGYWN0b3IgLSBudW1iZXIgb2YgZGlnaXRzIGluIGZyYWN0aW9uXG4gICAgY29uc3QgemVyb3NQb3N0RGVjaW1hbCA9IFN0cmluZyhtYXhEZWNpbWFsRmFjdG9yKS5sZW5ndGggLSAxIC0gU3RyaW5nKGZyYWN0aW9uKS5sZW5ndGg7XG4gICAgcmV0dXJuIGAke2Z1bGx9LiR7JzAnLnJlcGVhdCh6ZXJvc1Bvc3REZWNpbWFsKX0ke2ZyYWN0aW9ufWA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bml0cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/units.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/verkle.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/verkle.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERKLE_BALANCE_LEAF_KEY: function() { return /* binding */ VERKLE_BALANCE_LEAF_KEY; },\n/* harmony export */   VERKLE_CODE_HASH_LEAF_KEY: function() { return /* binding */ VERKLE_CODE_HASH_LEAF_KEY; },\n/* harmony export */   VERKLE_CODE_OFFSET: function() { return /* binding */ VERKLE_CODE_OFFSET; },\n/* harmony export */   VERKLE_CODE_SIZE_LEAF_KEY: function() { return /* binding */ VERKLE_CODE_SIZE_LEAF_KEY; },\n/* harmony export */   VERKLE_HEADER_STORAGE_OFFSET: function() { return /* binding */ VERKLE_HEADER_STORAGE_OFFSET; },\n/* harmony export */   VERKLE_MAIN_STORAGE_OFFSET: function() { return /* binding */ VERKLE_MAIN_STORAGE_OFFSET; },\n/* harmony export */   VERKLE_NODE_WIDTH: function() { return /* binding */ VERKLE_NODE_WIDTH; },\n/* harmony export */   VERKLE_NONCE_LEAF_KEY: function() { return /* binding */ VERKLE_NONCE_LEAF_KEY; },\n/* harmony export */   VERKLE_VERSION_LEAF_KEY: function() { return /* binding */ VERKLE_VERSION_LEAF_KEY; },\n/* harmony export */   VerkleLeafType: function() { return /* binding */ VerkleLeafType; },\n/* harmony export */   chunkifyCode: function() { return /* binding */ chunkifyCode; },\n/* harmony export */   getVerkleKey: function() { return /* binding */ getVerkleKey; },\n/* harmony export */   getVerkleStem: function() { return /* binding */ getVerkleStem; },\n/* harmony export */   getVerkleTreeIndexesForStorageSlot: function() { return /* binding */ getVerkleTreeIndexesForStorageSlot; },\n/* harmony export */   getVerkleTreeIndicesForCodeChunk: function() { return /* binding */ getVerkleTreeIndicesForCodeChunk; },\n/* harmony export */   getVerkleTreeKeyForCodeChunk: function() { return /* binding */ getVerkleTreeKeyForCodeChunk; },\n/* harmony export */   getVerkleTreeKeyForStorageSlot: function() { return /* binding */ getVerkleTreeKeyForStorageSlot; },\n/* harmony export */   verifyVerkleProof: function() { return /* binding */ verifyVerkleProof; }\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\n/**\n * @dev Returns the 31-bytes verkle tree stem for a given address and tree index.\n * @dev Assumes that the verkle node width = 256\n * @param ffi The verkle ffi object from verkle-crypotography-wasm.\n * @param address The address to generate the tree key for.\n * @param treeIndex The index of the tree to generate the key for. Defaults to 0.\n * @return The 31-bytes verkle tree stem as a Uint8Array.\n */\nfunction getVerkleStem(ffi, address, treeIndex = 0) {\n    const address32 = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.setLengthLeft)(address.toBytes(), 32);\n    let treeIndexBytes;\n    if (typeof treeIndex === 'number') {\n        treeIndexBytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.setLengthRight)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.int32ToBytes)(Number(treeIndex), true), 32);\n    }\n    else {\n        treeIndexBytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.setLengthRight)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bigIntToBytes)(BigInt(treeIndex), true).slice(0, 32), 32);\n    }\n    const treeStem = ffi.getTreeKey(address32, treeIndexBytes, 0).slice(0, 31);\n    return treeStem;\n}\n/**\n * Verifies that the executionWitness is valid for the given prestateRoot.\n * @param ffi The verkle ffi object from verkle-crypotography-wasm.\n * @param prestateRoot The prestateRoot matching the executionWitness.\n * @param executionWitness The verkle execution witness.\n * @returns {boolean} Whether or not the executionWitness belongs to the prestateRoot.\n */\nfunction verifyVerkleProof(ffi, prestateRoot, executionWitness) {\n    return ffi.verifyExecutionWitnessPreState((0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(prestateRoot), JSON.stringify(executionWitness));\n}\nvar VerkleLeafType;\n(function (VerkleLeafType) {\n    VerkleLeafType[VerkleLeafType[\"Version\"] = 0] = \"Version\";\n    VerkleLeafType[VerkleLeafType[\"Balance\"] = 1] = \"Balance\";\n    VerkleLeafType[VerkleLeafType[\"Nonce\"] = 2] = \"Nonce\";\n    VerkleLeafType[VerkleLeafType[\"CodeHash\"] = 3] = \"CodeHash\";\n    VerkleLeafType[VerkleLeafType[\"CodeSize\"] = 4] = \"CodeSize\";\n})(VerkleLeafType || (VerkleLeafType = {}));\nconst VERKLE_VERSION_LEAF_KEY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.intToBytes)(VerkleLeafType.Version);\nconst VERKLE_BALANCE_LEAF_KEY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.intToBytes)(VerkleLeafType.Balance);\nconst VERKLE_NONCE_LEAF_KEY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.intToBytes)(VerkleLeafType.Nonce);\nconst VERKLE_CODE_HASH_LEAF_KEY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.intToBytes)(VerkleLeafType.CodeHash);\nconst VERKLE_CODE_SIZE_LEAF_KEY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.intToBytes)(VerkleLeafType.CodeSize);\nconst VERKLE_HEADER_STORAGE_OFFSET = 64;\nconst VERKLE_CODE_OFFSET = 128;\nconst VERKLE_NODE_WIDTH = 256;\nconst VERKLE_MAIN_STORAGE_OFFSET = BigInt(256) ** BigInt(31);\n/**\n * @dev Returns the tree key for a given verkle tree stem, and sub index.\n * @dev Assumes that the verkle node width = 256\n * @param stem The 31-bytes verkle tree stem as a Uint8Array.\n * @param subIndex The sub index of the tree to generate the key for as a Uint8Array.\n * @return The tree key as a Uint8Array.\n */\nconst getVerkleKey = (stem, leaf) => {\n    switch (leaf) {\n        case VerkleLeafType.Version:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(stem, VERKLE_VERSION_LEAF_KEY);\n        case VerkleLeafType.Balance:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(stem, VERKLE_BALANCE_LEAF_KEY);\n        case VerkleLeafType.Nonce:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(stem, VERKLE_NONCE_LEAF_KEY);\n        case VerkleLeafType.CodeHash:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(stem, VERKLE_CODE_HASH_LEAF_KEY);\n        case VerkleLeafType.CodeSize:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(stem, VERKLE_CODE_SIZE_LEAF_KEY);\n        default:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(stem, leaf);\n    }\n};\nfunction getVerkleTreeIndexesForStorageSlot(storageKey) {\n    let position;\n    if (storageKey < VERKLE_CODE_OFFSET - VERKLE_HEADER_STORAGE_OFFSET) {\n        position = BigInt(VERKLE_HEADER_STORAGE_OFFSET) + storageKey;\n    }\n    else {\n        position = VERKLE_MAIN_STORAGE_OFFSET + storageKey;\n    }\n    const treeIndex = position / BigInt(VERKLE_NODE_WIDTH);\n    const subIndex = Number(position % BigInt(VERKLE_NODE_WIDTH));\n    return { treeIndex, subIndex };\n}\nfunction getVerkleTreeIndicesForCodeChunk(chunkId) {\n    const treeIndex = Math.floor((VERKLE_CODE_OFFSET + chunkId) / VERKLE_NODE_WIDTH);\n    const subIndex = (VERKLE_CODE_OFFSET + chunkId) % VERKLE_NODE_WIDTH;\n    return { treeIndex, subIndex };\n}\nconst getVerkleTreeKeyForCodeChunk = async (address, chunkId, verkleCrypto) => {\n    const { treeIndex, subIndex } = getVerkleTreeIndicesForCodeChunk(chunkId);\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(getVerkleStem(verkleCrypto, address, treeIndex), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(subIndex));\n};\nconst chunkifyCode = (code) => {\n    // Pad code to multiple of 31 bytes\n    if (code.length % 31 !== 0) {\n        const paddingLength = 31 - (code.length % 31);\n        code = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.setLengthRight)(code, code.length + paddingLength);\n    }\n    throw new Error('Not implemented');\n};\nconst getVerkleTreeKeyForStorageSlot = async (address, storageKey, verkleCrypto) => {\n    const { treeIndex, subIndex } = getVerkleTreeIndexesForStorageSlot(storageKey);\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(getVerkleStem(verkleCrypto, address, treeIndex), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(subIndex));\n};\n//# sourceMappingURL=verkle.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/verkle.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/withdrawal.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/withdrawal.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Withdrawal: function() { return /* binding */ Withdrawal; }\n/* harmony export */ });\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./address.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/address.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/types.js\");\n\n\n\n\n/**\n * Representation of EIP-4895 withdrawal data\n */\nclass Withdrawal {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating a Withdrawal object from varying data types.\n     * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot\n     */\n    constructor(index, validatorIndex, address, \n    /**\n     * withdrawal amount in Gwei to match the CL repesentation and eventually ssz withdrawalsRoot\n     */\n    amount) {\n        this.index = index;\n        this.validatorIndex = validatorIndex;\n        this.address = address;\n        this.amount = amount;\n    }\n    static fromWithdrawalData(withdrawalData) {\n        const { index: indexData, validatorIndex: validatorIndexData, address: addressData, amount: amountData, } = withdrawalData;\n        const index = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(indexData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        const validatorIndex = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndexData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        const address = addressData instanceof _address_js__WEBPACK_IMPORTED_MODULE_0__.Address ? addressData : new _address_js__WEBPACK_IMPORTED_MODULE_0__.Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(addressData));\n        const amount = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amountData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        return new Withdrawal(index, validatorIndex, address, amount);\n    }\n    static fromValuesArray(withdrawalArray) {\n        if (withdrawalArray.length !== 4) {\n            throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);\n        }\n        const [index, validatorIndex, address, amount] = withdrawalArray;\n        return Withdrawal.fromWithdrawalData({ index, validatorIndex, address, amount });\n    }\n    /**\n     * Convert a withdrawal to a buffer array\n     * @param withdrawal the withdrawal to convert\n     * @returns buffer array of the withdrawal\n     */\n    static toBytesArray(withdrawal) {\n        const { index, validatorIndex, address, amount } = withdrawal;\n        const indexBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(index, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0\n            ? new Uint8Array()\n            : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(index, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const validatorIndexBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndex, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0\n            ? new Uint8Array()\n            : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndex, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const addressBytes = address instanceof _address_js__WEBPACK_IMPORTED_MODULE_0__.Address ? address.bytes : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(address, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const amountBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amount, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0\n            ? new Uint8Array()\n            : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amount, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        return [indexBytes, validatorIndexBytes, addressBytes, amountBytes];\n    }\n    raw() {\n        return Withdrawal.toBytesArray(this);\n    }\n    toValue() {\n        return {\n            index: this.index,\n            validatorIndex: this.validatorIndex,\n            address: this.address.bytes,\n            amount: this.amount,\n        };\n    }\n    toJSON() {\n        return {\n            index: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.index),\n            validatorIndex: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.validatorIndex),\n            address: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.address.bytes),\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.amount),\n        };\n    }\n}\n//# sourceMappingURL=withdrawal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vd2l0aGRyYXdhbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF1QztBQUN1QjtBQUNwQjtBQUNNO0FBQ2hEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isa0dBQWtHO0FBQ2xILHNCQUFzQixpREFBTSxZQUFZLGlEQUFVO0FBQ2xELCtCQUErQixpREFBTSxxQkFBcUIsaURBQVU7QUFDcEUsK0NBQStDLGdEQUFPLHFCQUFxQixnREFBTyxDQUFDLGtEQUFPO0FBQzFGLHVCQUF1QixpREFBTSxhQUFhLGlEQUFVO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLHVCQUF1QjtBQUNuRztBQUNBO0FBQ0EsK0NBQStDLHdDQUF3QztBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix5Q0FBeUM7QUFDekQsMkJBQTJCLGlEQUFNLFFBQVEsaURBQVUsYUFBYSxtREFBUTtBQUN4RTtBQUNBLGNBQWMsaURBQU0sUUFBUSxpREFBVTtBQUN0QyxvQ0FBb0MsaURBQU0saUJBQWlCLGlEQUFVLGFBQWEsbURBQVE7QUFDMUY7QUFDQSxjQUFjLGlEQUFNLGlCQUFpQixpREFBVTtBQUMvQyxnREFBZ0QsZ0RBQU8sbUJBQW1CLGlEQUFNLFVBQVUsaURBQVU7QUFDcEcsNEJBQTRCLGlEQUFNLFNBQVMsaURBQVUsYUFBYSxtREFBUTtBQUMxRTtBQUNBLGNBQWMsaURBQU0sU0FBUyxpREFBVTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0RBQVc7QUFDOUIsNEJBQTRCLHNEQUFXO0FBQ3ZDLHFCQUFxQixxREFBVTtBQUMvQixvQkFBb0Isc0RBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL2NvbW1vbi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS93aXRoZHJhd2FsLmpzPzkxNTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4vYWRkcmVzcy5qcyc7XG5pbXBvcnQgeyBiaWdJbnRUb0hleCwgYnl0ZXNUb0hleCwgdG9CeXRlcyB9IGZyb20gJy4vYnl0ZXMuanMnO1xuaW1wb3J0IHsgQklHSU5UXzAgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBUeXBlT3V0cHV0LCB0b1R5cGUgfSBmcm9tICcuL3R5cGVzLmpzJztcbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgRUlQLTQ4OTUgd2l0aGRyYXdhbCBkYXRhXG4gKi9cbmV4cG9ydCBjbGFzcyBXaXRoZHJhd2FsIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGNvbnN0cnVjdG9yIGFzc2lnbnMgYW5kIHZhbGlkYXRlcyB0aGUgdmFsdWVzLlxuICAgICAqIFVzZSB0aGUgc3RhdGljIGZhY3RvcnkgbWV0aG9kcyB0byBhc3Npc3QgaW4gY3JlYXRpbmcgYSBXaXRoZHJhd2FsIG9iamVjdCBmcm9tIHZhcnlpbmcgZGF0YSB0eXBlcy5cbiAgICAgKiBJdHMgYW1vdW50IGlzIGluIEd3ZWkgdG8gbWF0Y2ggQ0wgcmVwcmVzZW50YXRpb24gYW5kIGZvciBldmVudHVhbCBzc3ogd2l0aGRyYXdhbHNSb290XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaW5kZXgsIHZhbGlkYXRvckluZGV4LCBhZGRyZXNzLCBcbiAgICAvKipcbiAgICAgKiB3aXRoZHJhd2FsIGFtb3VudCBpbiBHd2VpIHRvIG1hdGNoIHRoZSBDTCByZXBlc2VudGF0aW9uIGFuZCBldmVudHVhbGx5IHNzeiB3aXRoZHJhd2Fsc1Jvb3RcbiAgICAgKi9cbiAgICBhbW91bnQpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLnZhbGlkYXRvckluZGV4ID0gdmFsaWRhdG9ySW5kZXg7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgICAgIHRoaXMuYW1vdW50ID0gYW1vdW50O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVdpdGhkcmF3YWxEYXRhKHdpdGhkcmF3YWxEYXRhKSB7XG4gICAgICAgIGNvbnN0IHsgaW5kZXg6IGluZGV4RGF0YSwgdmFsaWRhdG9ySW5kZXg6IHZhbGlkYXRvckluZGV4RGF0YSwgYWRkcmVzczogYWRkcmVzc0RhdGEsIGFtb3VudDogYW1vdW50RGF0YSwgfSA9IHdpdGhkcmF3YWxEYXRhO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRvVHlwZShpbmRleERhdGEsIFR5cGVPdXRwdXQuQmlnSW50KTtcbiAgICAgICAgY29uc3QgdmFsaWRhdG9ySW5kZXggPSB0b1R5cGUodmFsaWRhdG9ySW5kZXhEYXRhLCBUeXBlT3V0cHV0LkJpZ0ludCk7XG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSBhZGRyZXNzRGF0YSBpbnN0YW5jZW9mIEFkZHJlc3MgPyBhZGRyZXNzRGF0YSA6IG5ldyBBZGRyZXNzKHRvQnl0ZXMoYWRkcmVzc0RhdGEpKTtcbiAgICAgICAgY29uc3QgYW1vdW50ID0gdG9UeXBlKGFtb3VudERhdGEsIFR5cGVPdXRwdXQuQmlnSW50KTtcbiAgICAgICAgcmV0dXJuIG5ldyBXaXRoZHJhd2FsKGluZGV4LCB2YWxpZGF0b3JJbmRleCwgYWRkcmVzcywgYW1vdW50KTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21WYWx1ZXNBcnJheSh3aXRoZHJhd2FsQXJyYXkpIHtcbiAgICAgICAgaWYgKHdpdGhkcmF3YWxBcnJheS5sZW5ndGggIT09IDQpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBJbnZhbGlkIHdpdGhkcmF3YWxBcnJheSBsZW5ndGggZXhwZWN0ZWQ9NCBhY3R1YWw9JHt3aXRoZHJhd2FsQXJyYXkubGVuZ3RofWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFtpbmRleCwgdmFsaWRhdG9ySW5kZXgsIGFkZHJlc3MsIGFtb3VudF0gPSB3aXRoZHJhd2FsQXJyYXk7XG4gICAgICAgIHJldHVybiBXaXRoZHJhd2FsLmZyb21XaXRoZHJhd2FsRGF0YSh7IGluZGV4LCB2YWxpZGF0b3JJbmRleCwgYWRkcmVzcywgYW1vdW50IH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGEgd2l0aGRyYXdhbCB0byBhIGJ1ZmZlciBhcnJheVxuICAgICAqIEBwYXJhbSB3aXRoZHJhd2FsIHRoZSB3aXRoZHJhd2FsIHRvIGNvbnZlcnRcbiAgICAgKiBAcmV0dXJucyBidWZmZXIgYXJyYXkgb2YgdGhlIHdpdGhkcmF3YWxcbiAgICAgKi9cbiAgICBzdGF0aWMgdG9CeXRlc0FycmF5KHdpdGhkcmF3YWwpIHtcbiAgICAgICAgY29uc3QgeyBpbmRleCwgdmFsaWRhdG9ySW5kZXgsIGFkZHJlc3MsIGFtb3VudCB9ID0gd2l0aGRyYXdhbDtcbiAgICAgICAgY29uc3QgaW5kZXhCeXRlcyA9IHRvVHlwZShpbmRleCwgVHlwZU91dHB1dC5CaWdJbnQpID09PSBCSUdJTlRfMFxuICAgICAgICAgICAgPyBuZXcgVWludDhBcnJheSgpXG4gICAgICAgICAgICA6IHRvVHlwZShpbmRleCwgVHlwZU91dHB1dC5VaW50OEFycmF5KTtcbiAgICAgICAgY29uc3QgdmFsaWRhdG9ySW5kZXhCeXRlcyA9IHRvVHlwZSh2YWxpZGF0b3JJbmRleCwgVHlwZU91dHB1dC5CaWdJbnQpID09PSBCSUdJTlRfMFxuICAgICAgICAgICAgPyBuZXcgVWludDhBcnJheSgpXG4gICAgICAgICAgICA6IHRvVHlwZSh2YWxpZGF0b3JJbmRleCwgVHlwZU91dHB1dC5VaW50OEFycmF5KTtcbiAgICAgICAgY29uc3QgYWRkcmVzc0J5dGVzID0gYWRkcmVzcyBpbnN0YW5jZW9mIEFkZHJlc3MgPyBhZGRyZXNzLmJ5dGVzIDogdG9UeXBlKGFkZHJlc3MsIFR5cGVPdXRwdXQuVWludDhBcnJheSk7XG4gICAgICAgIGNvbnN0IGFtb3VudEJ5dGVzID0gdG9UeXBlKGFtb3VudCwgVHlwZU91dHB1dC5CaWdJbnQpID09PSBCSUdJTlRfMFxuICAgICAgICAgICAgPyBuZXcgVWludDhBcnJheSgpXG4gICAgICAgICAgICA6IHRvVHlwZShhbW91bnQsIFR5cGVPdXRwdXQuVWludDhBcnJheSk7XG4gICAgICAgIHJldHVybiBbaW5kZXhCeXRlcywgdmFsaWRhdG9ySW5kZXhCeXRlcywgYWRkcmVzc0J5dGVzLCBhbW91bnRCeXRlc107XG4gICAgfVxuICAgIHJhdygpIHtcbiAgICAgICAgcmV0dXJuIFdpdGhkcmF3YWwudG9CeXRlc0FycmF5KHRoaXMpO1xuICAgIH1cbiAgICB0b1ZhbHVlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICAgICAgICB2YWxpZGF0b3JJbmRleDogdGhpcy52YWxpZGF0b3JJbmRleCxcbiAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuYWRkcmVzcy5ieXRlcyxcbiAgICAgICAgICAgIGFtb3VudDogdGhpcy5hbW91bnQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluZGV4OiBiaWdJbnRUb0hleCh0aGlzLmluZGV4KSxcbiAgICAgICAgICAgIHZhbGlkYXRvckluZGV4OiBiaWdJbnRUb0hleCh0aGlzLnZhbGlkYXRvckluZGV4KSxcbiAgICAgICAgICAgIGFkZHJlc3M6IGJ5dGVzVG9IZXgodGhpcy5hZGRyZXNzLmJ5dGVzKSxcbiAgICAgICAgICAgIGFtb3VudDogYmlnSW50VG9IZXgodGhpcy5hbW91bnQpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpdGhkcmF3YWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethereumjs/common/node_modules/@ethereumjs/util/dist/esm/withdrawal.js\n"));

/***/ })

}]);